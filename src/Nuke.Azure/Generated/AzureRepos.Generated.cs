// Generated from https://github.com/nuke-build/azure/blob/master/src/Nuke.Azure/specifications/AzureRepos.json
// Generated with Nuke.CodeGeneration version 0.20.1 (OSX,.NETStandard,Version=v2.0)

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Azure
{
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposTasks
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public static string AzureReposPath =>
            ToolPathResolver.TryGetEnvironmentExecutable("AZUREREPOS_EXE") ??
            ToolPathResolver.GetPathExecutable("az");
        public static Action<OutputType, string> AzureReposLogger { get; set; } = ProcessTasks.DefaultLogger;
        /// <summary>
        ///   Manage Azure Repos.
        /// </summary>
        public static IReadOnlyCollection<Output> AzureRepos(string arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Func<string, string> outputFilter = null)
        {
            var process = ProcessTasks.StartProcess(AzureReposPath, arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, AzureReposLogger, outputFilter);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposCreate(AzureReposCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposCreateSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureReposCreateSettings.Name"/></li>
        ///     <li><c>--open</c> via <see cref="AzureReposCreateSettings.Open"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposCreateSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposCreate(Configure<AzureReposCreateSettings> configurator)
        {
            return AzureReposCreate(configurator(new AzureReposCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposCreateSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureReposCreateSettings.Name"/></li>
        ///     <li><c>--open</c> via <see cref="AzureReposCreateSettings.Open"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposCreateSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposCreate(CombinatorialConfigure<AzureReposCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposDelete(AzureReposDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposDeleteSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposDeleteSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposDeleteSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposDeleteSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposDeleteSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposDeleteSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposDeleteSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposDeleteSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposDeleteSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="AzureReposDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposDelete(Configure<AzureReposDeleteSettings> configurator)
        {
            return AzureReposDelete(configurator(new AzureReposDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposDeleteSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposDeleteSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposDeleteSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposDeleteSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposDeleteSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposDeleteSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposDeleteSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposDeleteSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposDeleteSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="AzureReposDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposDelete(CombinatorialConfigure<AzureReposDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposDelete, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposList(AzureReposListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposListSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposListSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposListSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposListSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposListSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposList(Configure<AzureReposListSettings> configurator)
        {
            return AzureReposList(configurator(new AzureReposListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposListSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposListSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposListSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposListSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposListSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposListSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposList(CombinatorialConfigure<AzureReposListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposList, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposShow(AzureReposShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposShowSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposShowSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposShowSettings.Help"/></li>
        ///     <li><c>--open</c> via <see cref="AzureReposShowSettings.Open"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposShowSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposShowSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposShowSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposShowSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposShowSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposShow(Configure<AzureReposShowSettings> configurator)
        {
            return AzureReposShow(configurator(new AzureReposShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposShowSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposShowSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposShowSettings.Help"/></li>
        ///     <li><c>--open</c> via <see cref="AzureReposShowSettings.Open"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposShowSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposShowSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposShowSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposShowSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposShowSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposShow(CombinatorialConfigure<AzureReposShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposShow, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposUpdate(AzureReposUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposUpdateSettings.Debug"/></li>
        ///     <li><c>--default-branch</c> via <see cref="AzureReposUpdateSettings.DefaultBranch"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposUpdateSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureReposUpdateSettings.Name"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposUpdateSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposUpdateSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposUpdate(Configure<AzureReposUpdateSettings> configurator)
        {
            return AzureReposUpdate(configurator(new AzureReposUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposUpdateSettings.Debug"/></li>
        ///     <li><c>--default-branch</c> via <see cref="AzureReposUpdateSettings.DefaultBranch"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposUpdateSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureReposUpdateSettings.Name"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposUpdateSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposUpdateSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposUpdate(CombinatorialConfigure<AzureReposUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposUpdate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposRefCreate(AzureReposRefCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposRefCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposRefCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposRefCreateSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposRefCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureReposRefCreateSettings.Name"/></li>
        ///     <li><c>--object-id</c> via <see cref="AzureReposRefCreateSettings.ObjectId"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposRefCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposRefCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposRefCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposRefCreateSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposRefCreateSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposRefCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposRefCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposRefCreate(Configure<AzureReposRefCreateSettings> configurator)
        {
            return AzureReposRefCreate(configurator(new AzureReposRefCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposRefCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposRefCreateSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposRefCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureReposRefCreateSettings.Name"/></li>
        ///     <li><c>--object-id</c> via <see cref="AzureReposRefCreateSettings.ObjectId"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposRefCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposRefCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposRefCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposRefCreateSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposRefCreateSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposRefCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposRefCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposRefCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposRefCreate(CombinatorialConfigure<AzureReposRefCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposRefCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposRefDelete(AzureReposRefDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposRefDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposRefDeleteSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposRefDeleteSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposRefDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureReposRefDeleteSettings.Name"/></li>
        ///     <li><c>--object-id</c> via <see cref="AzureReposRefDeleteSettings.ObjectId"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposRefDeleteSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposRefDeleteSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposRefDeleteSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposRefDeleteSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposRefDeleteSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposRefDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposRefDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposRefDelete(Configure<AzureReposRefDeleteSettings> configurator)
        {
            return AzureReposRefDelete(configurator(new AzureReposRefDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposRefDeleteSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposRefDeleteSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposRefDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureReposRefDeleteSettings.Name"/></li>
        ///     <li><c>--object-id</c> via <see cref="AzureReposRefDeleteSettings.ObjectId"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposRefDeleteSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposRefDeleteSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposRefDeleteSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposRefDeleteSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposRefDeleteSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposRefDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposRefDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposRefDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposRefDelete(CombinatorialConfigure<AzureReposRefDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposRefDelete, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposRefList(AzureReposRefListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposRefListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposRefListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposRefListSettings.Detect"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureReposRefListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposRefListSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposRefListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposRefListSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposRefListSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposRefListSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposRefListSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposRefListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposRefListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposRefList(Configure<AzureReposRefListSettings> configurator)
        {
            return AzureReposRefList(configurator(new AzureReposRefListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposRefListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposRefListSettings.Detect"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureReposRefListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposRefListSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposRefListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposRefListSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposRefListSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposRefListSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposRefListSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposRefListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposRefListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposRefListSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposRefList(CombinatorialConfigure<AzureReposRefListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposRefList, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposRefLock(AzureReposRefLockSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposRefLockSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposRefLockSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposRefLockSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposRefLockSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureReposRefLockSettings.Name"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposRefLockSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposRefLockSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposRefLockSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposRefLockSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposRefLockSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposRefLockSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposRefLockSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposRefLock(Configure<AzureReposRefLockSettings> configurator)
        {
            return AzureReposRefLock(configurator(new AzureReposRefLockSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposRefLockSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposRefLockSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposRefLockSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureReposRefLockSettings.Name"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposRefLockSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposRefLockSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposRefLockSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposRefLockSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposRefLockSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposRefLockSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposRefLockSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposRefLockSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposRefLock(CombinatorialConfigure<AzureReposRefLockSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposRefLock, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposRefUnlock(AzureReposRefUnlockSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposRefUnlockSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposRefUnlockSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposRefUnlockSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposRefUnlockSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureReposRefUnlockSettings.Name"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposRefUnlockSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposRefUnlockSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposRefUnlockSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposRefUnlockSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposRefUnlockSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposRefUnlockSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposRefUnlockSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposRefUnlock(Configure<AzureReposRefUnlockSettings> configurator)
        {
            return AzureReposRefUnlock(configurator(new AzureReposRefUnlockSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposRefUnlockSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposRefUnlockSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposRefUnlockSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureReposRefUnlockSettings.Name"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposRefUnlockSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposRefUnlockSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposRefUnlockSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposRefUnlockSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposRefUnlockSettings.Repository"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposRefUnlockSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposRefUnlockSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposRefUnlockSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposRefUnlock(CombinatorialConfigure<AzureReposRefUnlockSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposRefUnlock, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrCheckout(AzureReposPrCheckoutSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrCheckoutSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrCheckoutSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrCheckoutSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrCheckoutSettings.Id"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrCheckoutSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrCheckoutSettings.Query"/></li>
        ///     <li><c>--remote-name</c> via <see cref="AzureReposPrCheckoutSettings.RemoteName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrCheckoutSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrCheckoutSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrCheckout(Configure<AzureReposPrCheckoutSettings> configurator)
        {
            return AzureReposPrCheckout(configurator(new AzureReposPrCheckoutSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrCheckoutSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrCheckoutSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrCheckoutSettings.Id"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrCheckoutSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrCheckoutSettings.Query"/></li>
        ///     <li><c>--remote-name</c> via <see cref="AzureReposPrCheckoutSettings.RemoteName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrCheckoutSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrCheckoutSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrCheckoutSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrCheckout(CombinatorialConfigure<AzureReposPrCheckoutSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrCheckout, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrCreate(AzureReposPrCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--auto-complete</c> via <see cref="AzureReposPrCreateSettings.AutoComplete"/></li>
        ///     <li><c>--bypass-policy</c> via <see cref="AzureReposPrCreateSettings.BypassPolicy"/></li>
        ///     <li><c>--bypass-policy-reason</c> via <see cref="AzureReposPrCreateSettings.BypassPolicyReason"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrCreateSettings.Debug"/></li>
        ///     <li><c>--delete-source-branch</c> via <see cref="AzureReposPrCreateSettings.DeleteSourceBranch"/></li>
        ///     <li><c>--description</c> via <see cref="AzureReposPrCreateSettings.Description"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrCreateSettings.Detect"/></li>
        ///     <li><c>--draft</c> via <see cref="AzureReposPrCreateSettings.Draft"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrCreateSettings.Help"/></li>
        ///     <li><c>--merge-commit-message</c> via <see cref="AzureReposPrCreateSettings.MergeCommitMessage"/></li>
        ///     <li><c>--open</c> via <see cref="AzureReposPrCreateSettings.Open"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPrCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrCreateSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposPrCreateSettings.Repository"/></li>
        ///     <li><c>--reviewers</c> via <see cref="AzureReposPrCreateSettings.Reviewers"/></li>
        ///     <li><c>--source-branch</c> via <see cref="AzureReposPrCreateSettings.SourceBranch"/></li>
        ///     <li><c>--squash</c> via <see cref="AzureReposPrCreateSettings.Squash"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrCreateSettings.Subscription"/></li>
        ///     <li><c>--target-branch</c> via <see cref="AzureReposPrCreateSettings.TargetBranch"/></li>
        ///     <li><c>--title</c> via <see cref="AzureReposPrCreateSettings.Title"/></li>
        ///     <li><c>--transition-work-items</c> via <see cref="AzureReposPrCreateSettings.TransitionWorkItems"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrCreateSettings.Verbose"/></li>
        ///     <li><c>--work-items</c> via <see cref="AzureReposPrCreateSettings.WorkItems"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrCreate(Configure<AzureReposPrCreateSettings> configurator)
        {
            return AzureReposPrCreate(configurator(new AzureReposPrCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--auto-complete</c> via <see cref="AzureReposPrCreateSettings.AutoComplete"/></li>
        ///     <li><c>--bypass-policy</c> via <see cref="AzureReposPrCreateSettings.BypassPolicy"/></li>
        ///     <li><c>--bypass-policy-reason</c> via <see cref="AzureReposPrCreateSettings.BypassPolicyReason"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrCreateSettings.Debug"/></li>
        ///     <li><c>--delete-source-branch</c> via <see cref="AzureReposPrCreateSettings.DeleteSourceBranch"/></li>
        ///     <li><c>--description</c> via <see cref="AzureReposPrCreateSettings.Description"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrCreateSettings.Detect"/></li>
        ///     <li><c>--draft</c> via <see cref="AzureReposPrCreateSettings.Draft"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrCreateSettings.Help"/></li>
        ///     <li><c>--merge-commit-message</c> via <see cref="AzureReposPrCreateSettings.MergeCommitMessage"/></li>
        ///     <li><c>--open</c> via <see cref="AzureReposPrCreateSettings.Open"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPrCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrCreateSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposPrCreateSettings.Repository"/></li>
        ///     <li><c>--reviewers</c> via <see cref="AzureReposPrCreateSettings.Reviewers"/></li>
        ///     <li><c>--source-branch</c> via <see cref="AzureReposPrCreateSettings.SourceBranch"/></li>
        ///     <li><c>--squash</c> via <see cref="AzureReposPrCreateSettings.Squash"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrCreateSettings.Subscription"/></li>
        ///     <li><c>--target-branch</c> via <see cref="AzureReposPrCreateSettings.TargetBranch"/></li>
        ///     <li><c>--title</c> via <see cref="AzureReposPrCreateSettings.Title"/></li>
        ///     <li><c>--transition-work-items</c> via <see cref="AzureReposPrCreateSettings.TransitionWorkItems"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrCreateSettings.Verbose"/></li>
        ///     <li><c>--work-items</c> via <see cref="AzureReposPrCreateSettings.WorkItems"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrCreate(CombinatorialConfigure<AzureReposPrCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrList(AzureReposPrListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--creator</c> via <see cref="AzureReposPrListSettings.Creator"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrListSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrListSettings.Help"/></li>
        ///     <li><c>--include-links</c> via <see cref="AzureReposPrListSettings.IncludeLinks"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrListSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPrListSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrListSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposPrListSettings.Repository"/></li>
        ///     <li><c>--reviewer</c> via <see cref="AzureReposPrListSettings.Reviewer"/></li>
        ///     <li><c>--skip</c> via <see cref="AzureReposPrListSettings.Skip"/></li>
        ///     <li><c>--source-branch</c> via <see cref="AzureReposPrListSettings.SourceBranch"/></li>
        ///     <li><c>--status</c> via <see cref="AzureReposPrListSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrListSettings.Subscription"/></li>
        ///     <li><c>--target-branch</c> via <see cref="AzureReposPrListSettings.TargetBranch"/></li>
        ///     <li><c>--top</c> via <see cref="AzureReposPrListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrList(Configure<AzureReposPrListSettings> configurator)
        {
            return AzureReposPrList(configurator(new AzureReposPrListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--creator</c> via <see cref="AzureReposPrListSettings.Creator"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrListSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrListSettings.Help"/></li>
        ///     <li><c>--include-links</c> via <see cref="AzureReposPrListSettings.IncludeLinks"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrListSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPrListSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrListSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposPrListSettings.Repository"/></li>
        ///     <li><c>--reviewer</c> via <see cref="AzureReposPrListSettings.Reviewer"/></li>
        ///     <li><c>--skip</c> via <see cref="AzureReposPrListSettings.Skip"/></li>
        ///     <li><c>--source-branch</c> via <see cref="AzureReposPrListSettings.SourceBranch"/></li>
        ///     <li><c>--status</c> via <see cref="AzureReposPrListSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrListSettings.Subscription"/></li>
        ///     <li><c>--target-branch</c> via <see cref="AzureReposPrListSettings.TargetBranch"/></li>
        ///     <li><c>--top</c> via <see cref="AzureReposPrListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrListSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrList(CombinatorialConfigure<AzureReposPrListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrList, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrSetVote(AzureReposPrSetVoteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrSetVoteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrSetVoteSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrSetVoteSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrSetVoteSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrSetVoteSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrSetVoteSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrSetVoteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrSetVoteSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrSetVoteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrSetVoteSettings.Verbose"/></li>
        ///     <li><c>--vote</c> via <see cref="AzureReposPrSetVoteSettings.Vote"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrSetVote(Configure<AzureReposPrSetVoteSettings> configurator)
        {
            return AzureReposPrSetVote(configurator(new AzureReposPrSetVoteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrSetVoteSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrSetVoteSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrSetVoteSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrSetVoteSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrSetVoteSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrSetVoteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrSetVoteSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrSetVoteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrSetVoteSettings.Verbose"/></li>
        ///     <li><c>--vote</c> via <see cref="AzureReposPrSetVoteSettings.Vote"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrSetVoteSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrSetVote(CombinatorialConfigure<AzureReposPrSetVoteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrSetVote, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrShow(AzureReposPrShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrShowSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrShowSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrShowSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrShowSettings.Id"/></li>
        ///     <li><c>--open</c> via <see cref="AzureReposPrShowSettings.Open"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrShowSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrShowSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrShow(Configure<AzureReposPrShowSettings> configurator)
        {
            return AzureReposPrShow(configurator(new AzureReposPrShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrShowSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrShowSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrShowSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrShowSettings.Id"/></li>
        ///     <li><c>--open</c> via <see cref="AzureReposPrShowSettings.Open"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrShowSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrShowSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrShow(CombinatorialConfigure<AzureReposPrShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrShow, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrUpdate(AzureReposPrUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--auto-complete</c> via <see cref="AzureReposPrUpdateSettings.AutoComplete"/></li>
        ///     <li><c>--bypass-policy</c> via <see cref="AzureReposPrUpdateSettings.BypassPolicy"/></li>
        ///     <li><c>--bypass-policy-reason</c> via <see cref="AzureReposPrUpdateSettings.BypassPolicyReason"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrUpdateSettings.Debug"/></li>
        ///     <li><c>--delete-source-branch</c> via <see cref="AzureReposPrUpdateSettings.DeleteSourceBranch"/></li>
        ///     <li><c>--description</c> via <see cref="AzureReposPrUpdateSettings.Description"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrUpdateSettings.Detect"/></li>
        ///     <li><c>--draft</c> via <see cref="AzureReposPrUpdateSettings.Draft"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrUpdateSettings.Id"/></li>
        ///     <li><c>--merge-commit-message</c> via <see cref="AzureReposPrUpdateSettings.MergeCommitMessage"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrUpdateSettings.Query"/></li>
        ///     <li><c>--squash</c> via <see cref="AzureReposPrUpdateSettings.Squash"/></li>
        ///     <li><c>--status</c> via <see cref="AzureReposPrUpdateSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrUpdateSettings.Subscription"/></li>
        ///     <li><c>--title</c> via <see cref="AzureReposPrUpdateSettings.Title"/></li>
        ///     <li><c>--transition-work-items</c> via <see cref="AzureReposPrUpdateSettings.TransitionWorkItems"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrUpdate(Configure<AzureReposPrUpdateSettings> configurator)
        {
            return AzureReposPrUpdate(configurator(new AzureReposPrUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--auto-complete</c> via <see cref="AzureReposPrUpdateSettings.AutoComplete"/></li>
        ///     <li><c>--bypass-policy</c> via <see cref="AzureReposPrUpdateSettings.BypassPolicy"/></li>
        ///     <li><c>--bypass-policy-reason</c> via <see cref="AzureReposPrUpdateSettings.BypassPolicyReason"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrUpdateSettings.Debug"/></li>
        ///     <li><c>--delete-source-branch</c> via <see cref="AzureReposPrUpdateSettings.DeleteSourceBranch"/></li>
        ///     <li><c>--description</c> via <see cref="AzureReposPrUpdateSettings.Description"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrUpdateSettings.Detect"/></li>
        ///     <li><c>--draft</c> via <see cref="AzureReposPrUpdateSettings.Draft"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrUpdateSettings.Id"/></li>
        ///     <li><c>--merge-commit-message</c> via <see cref="AzureReposPrUpdateSettings.MergeCommitMessage"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrUpdateSettings.Query"/></li>
        ///     <li><c>--squash</c> via <see cref="AzureReposPrUpdateSettings.Squash"/></li>
        ///     <li><c>--status</c> via <see cref="AzureReposPrUpdateSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrUpdateSettings.Subscription"/></li>
        ///     <li><c>--title</c> via <see cref="AzureReposPrUpdateSettings.Title"/></li>
        ///     <li><c>--transition-work-items</c> via <see cref="AzureReposPrUpdateSettings.TransitionWorkItems"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrUpdate(CombinatorialConfigure<AzureReposPrUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrUpdate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposImportCreate(AzureReposImportCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposImportCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposImportCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposImportCreateSettings.Detect"/></li>
        ///     <li><c>--git-service-endpoint-id</c> via <see cref="AzureReposImportCreateSettings.GitServiceEndpointId"/></li>
        ///     <li><c>--git-source-url</c> via <see cref="AzureReposImportCreateSettings.GitSourceUrl"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposImportCreateSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposImportCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposImportCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposImportCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposImportCreateSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposImportCreateSettings.Repository"/></li>
        ///     <li><c>--requires-authorization</c> via <see cref="AzureReposImportCreateSettings.RequiresAuthorization"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposImportCreateSettings.Subscription"/></li>
        ///     <li><c>--user-name</c> via <see cref="AzureReposImportCreateSettings.UserName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposImportCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposImportCreate(Configure<AzureReposImportCreateSettings> configurator)
        {
            return AzureReposImportCreate(configurator(new AzureReposImportCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposImportCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposImportCreateSettings.Detect"/></li>
        ///     <li><c>--git-service-endpoint-id</c> via <see cref="AzureReposImportCreateSettings.GitServiceEndpointId"/></li>
        ///     <li><c>--git-source-url</c> via <see cref="AzureReposImportCreateSettings.GitSourceUrl"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposImportCreateSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposImportCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposImportCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposImportCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposImportCreateSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureReposImportCreateSettings.Repository"/></li>
        ///     <li><c>--requires-authorization</c> via <see cref="AzureReposImportCreateSettings.RequiresAuthorization"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposImportCreateSettings.Subscription"/></li>
        ///     <li><c>--user-name</c> via <see cref="AzureReposImportCreateSettings.UserName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposImportCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposImportCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposImportCreate(CombinatorialConfigure<AzureReposImportCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposImportCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyCreate(AzureReposPolicyCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--config</c> via <see cref="AzureReposPolicyCreateSettings.Config"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyCreateSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyCreateSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyCreateSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyCreate(Configure<AzureReposPolicyCreateSettings> configurator)
        {
            return AzureReposPolicyCreate(configurator(new AzureReposPolicyCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--config</c> via <see cref="AzureReposPolicyCreateSettings.Config"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyCreateSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyCreateSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyCreateSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyCreate(CombinatorialConfigure<AzureReposPolicyCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyDelete(AzureReposPolicyDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyDeleteSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyDeleteSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyDeleteSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyDeleteSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyDeleteSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyDeleteSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyDeleteSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyDeleteSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyDeleteSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="AzureReposPolicyDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyDelete(Configure<AzureReposPolicyDeleteSettings> configurator)
        {
            return AzureReposPolicyDelete(configurator(new AzureReposPolicyDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyDeleteSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyDeleteSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyDeleteSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyDeleteSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyDeleteSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyDeleteSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyDeleteSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyDeleteSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyDeleteSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="AzureReposPolicyDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyDelete(CombinatorialConfigure<AzureReposPolicyDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyDelete, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyList(AzureReposPolicyListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyListSettings.Branch"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyListSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyListSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyListSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyListSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyListSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyListSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyList(Configure<AzureReposPolicyListSettings> configurator)
        {
            return AzureReposPolicyList(configurator(new AzureReposPolicyListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyListSettings.Branch"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyListSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyListSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyListSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyListSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyListSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyListSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyListSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyList(CombinatorialConfigure<AzureReposPolicyListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyList, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyShow(AzureReposPolicyShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyShowSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyShowSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyShowSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyShowSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyShowSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyShowSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyShowSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyShowSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyShow(Configure<AzureReposPolicyShowSettings> configurator)
        {
            return AzureReposPolicyShow(configurator(new AzureReposPolicyShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyShowSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyShowSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyShowSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyShowSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyShowSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyShowSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyShowSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyShowSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyShow(CombinatorialConfigure<AzureReposPolicyShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyShow, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyUpdate(AzureReposPolicyUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--config</c> via <see cref="AzureReposPolicyUpdateSettings.Config"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyUpdateSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyUpdateSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyUpdateSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyUpdate(Configure<AzureReposPolicyUpdateSettings> configurator)
        {
            return AzureReposPolicyUpdate(configurator(new AzureReposPolicyUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--config</c> via <see cref="AzureReposPolicyUpdateSettings.Config"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyUpdateSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyUpdateSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyUpdateSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyUpdate(CombinatorialConfigure<AzureReposPolicyUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyUpdate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrReviewerAdd(AzureReposPrReviewerAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrReviewerAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrReviewerAddSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrReviewerAddSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrReviewerAddSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrReviewerAddSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrReviewerAddSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrReviewerAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrReviewerAddSettings.Query"/></li>
        ///     <li><c>--reviewers</c> via <see cref="AzureReposPrReviewerAddSettings.Reviewers"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrReviewerAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrReviewerAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrReviewerAdd(Configure<AzureReposPrReviewerAddSettings> configurator)
        {
            return AzureReposPrReviewerAdd(configurator(new AzureReposPrReviewerAddSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrReviewerAddSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrReviewerAddSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrReviewerAddSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrReviewerAddSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrReviewerAddSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrReviewerAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrReviewerAddSettings.Query"/></li>
        ///     <li><c>--reviewers</c> via <see cref="AzureReposPrReviewerAddSettings.Reviewers"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrReviewerAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrReviewerAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrReviewerAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrReviewerAdd(CombinatorialConfigure<AzureReposPrReviewerAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrReviewerAdd, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrReviewerList(AzureReposPrReviewerListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrReviewerListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrReviewerListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrReviewerListSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrReviewerListSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrReviewerListSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrReviewerListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrReviewerListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrReviewerListSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrReviewerListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrReviewerListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrReviewerList(Configure<AzureReposPrReviewerListSettings> configurator)
        {
            return AzureReposPrReviewerList(configurator(new AzureReposPrReviewerListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrReviewerListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrReviewerListSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrReviewerListSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrReviewerListSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrReviewerListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrReviewerListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrReviewerListSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrReviewerListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrReviewerListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrReviewerListSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrReviewerList(CombinatorialConfigure<AzureReposPrReviewerListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrReviewerList, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrReviewerRemove(AzureReposPrReviewerRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrReviewerRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrReviewerRemoveSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrReviewerRemoveSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrReviewerRemoveSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrReviewerRemoveSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrReviewerRemoveSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrReviewerRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrReviewerRemoveSettings.Query"/></li>
        ///     <li><c>--reviewers</c> via <see cref="AzureReposPrReviewerRemoveSettings.Reviewers"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrReviewerRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrReviewerRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrReviewerRemove(Configure<AzureReposPrReviewerRemoveSettings> configurator)
        {
            return AzureReposPrReviewerRemove(configurator(new AzureReposPrReviewerRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrReviewerRemoveSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrReviewerRemoveSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrReviewerRemoveSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrReviewerRemoveSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrReviewerRemoveSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrReviewerRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrReviewerRemoveSettings.Query"/></li>
        ///     <li><c>--reviewers</c> via <see cref="AzureReposPrReviewerRemoveSettings.Reviewers"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrReviewerRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrReviewerRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrReviewerRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrReviewerRemove(CombinatorialConfigure<AzureReposPrReviewerRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrReviewerRemove, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrWorkItemAdd(AzureReposPrWorkItemAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrWorkItemAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrWorkItemAddSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrWorkItemAddSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrWorkItemAddSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrWorkItemAddSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrWorkItemAddSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrWorkItemAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrWorkItemAddSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrWorkItemAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrWorkItemAddSettings.Verbose"/></li>
        ///     <li><c>--work-items</c> via <see cref="AzureReposPrWorkItemAddSettings.WorkItems"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrWorkItemAdd(Configure<AzureReposPrWorkItemAddSettings> configurator)
        {
            return AzureReposPrWorkItemAdd(configurator(new AzureReposPrWorkItemAddSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrWorkItemAddSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrWorkItemAddSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrWorkItemAddSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrWorkItemAddSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrWorkItemAddSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrWorkItemAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrWorkItemAddSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrWorkItemAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrWorkItemAddSettings.Verbose"/></li>
        ///     <li><c>--work-items</c> via <see cref="AzureReposPrWorkItemAddSettings.WorkItems"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrWorkItemAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrWorkItemAdd(CombinatorialConfigure<AzureReposPrWorkItemAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrWorkItemAdd, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrWorkItemList(AzureReposPrWorkItemListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrWorkItemListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrWorkItemListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrWorkItemListSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrWorkItemListSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrWorkItemListSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrWorkItemListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrWorkItemListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrWorkItemListSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrWorkItemListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrWorkItemListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrWorkItemList(Configure<AzureReposPrWorkItemListSettings> configurator)
        {
            return AzureReposPrWorkItemList(configurator(new AzureReposPrWorkItemListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrWorkItemListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrWorkItemListSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrWorkItemListSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrWorkItemListSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrWorkItemListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrWorkItemListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrWorkItemListSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrWorkItemListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrWorkItemListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrWorkItemListSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrWorkItemList(CombinatorialConfigure<AzureReposPrWorkItemListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrWorkItemList, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrWorkItemRemove(AzureReposPrWorkItemRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrWorkItemRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Verbose"/></li>
        ///     <li><c>--work-items</c> via <see cref="AzureReposPrWorkItemRemoveSettings.WorkItems"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrWorkItemRemove(Configure<AzureReposPrWorkItemRemoveSettings> configurator)
        {
            return AzureReposPrWorkItemRemove(configurator(new AzureReposPrWorkItemRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrWorkItemRemoveSettings.Verbose"/></li>
        ///     <li><c>--work-items</c> via <see cref="AzureReposPrWorkItemRemoveSettings.WorkItems"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrWorkItemRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrWorkItemRemove(CombinatorialConfigure<AzureReposPrWorkItemRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrWorkItemRemove, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrPolicyList(AzureReposPrPolicyListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrPolicyListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrPolicyListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrPolicyListSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrPolicyListSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrPolicyListSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrPolicyListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrPolicyListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrPolicyListSettings.Query"/></li>
        ///     <li><c>--skip</c> via <see cref="AzureReposPrPolicyListSettings.Skip"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrPolicyListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureReposPrPolicyListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrPolicyListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrPolicyList(Configure<AzureReposPrPolicyListSettings> configurator)
        {
            return AzureReposPrPolicyList(configurator(new AzureReposPrPolicyListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrPolicyListSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrPolicyListSettings.Detect"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrPolicyListSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrPolicyListSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrPolicyListSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrPolicyListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrPolicyListSettings.Query"/></li>
        ///     <li><c>--skip</c> via <see cref="AzureReposPrPolicyListSettings.Skip"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrPolicyListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureReposPrPolicyListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrPolicyListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrPolicyListSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrPolicyList(CombinatorialConfigure<AzureReposPrPolicyListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrPolicyList, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPrPolicyQueue(AzureReposPrPolicyQueueSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPrPolicyQueueSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrPolicyQueueSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrPolicyQueueSettings.Detect"/></li>
        ///     <li><c>--evaluation-id</c> via <see cref="AzureReposPrPolicyQueueSettings.EvaluationId"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrPolicyQueueSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrPolicyQueueSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrPolicyQueueSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrPolicyQueueSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrPolicyQueueSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrPolicyQueueSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrPolicyQueueSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPrPolicyQueue(Configure<AzureReposPrPolicyQueueSettings> configurator)
        {
            return AzureReposPrPolicyQueue(configurator(new AzureReposPrPolicyQueueSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureReposPrPolicyQueueSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPrPolicyQueueSettings.Detect"/></li>
        ///     <li><c>--evaluation-id</c> via <see cref="AzureReposPrPolicyQueueSettings.EvaluationId"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPrPolicyQueueSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPrPolicyQueueSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPrPolicyQueueSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPrPolicyQueueSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPrPolicyQueueSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPrPolicyQueueSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPrPolicyQueueSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPrPolicyQueueSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPrPolicyQueue(CombinatorialConfigure<AzureReposPrPolicyQueueSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPrPolicyQueue, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyWorkItemLinkingCreate(AzureReposPolicyWorkItemLinkingCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyWorkItemLinkingCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyWorkItemLinkingCreate(Configure<AzureReposPolicyWorkItemLinkingCreateSettings> configurator)
        {
            return AzureReposPolicyWorkItemLinkingCreate(configurator(new AzureReposPolicyWorkItemLinkingCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyWorkItemLinkingCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyWorkItemLinkingCreate(CombinatorialConfigure<AzureReposPolicyWorkItemLinkingCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyWorkItemLinkingCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyWorkItemLinkingUpdate(AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyWorkItemLinkingUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyWorkItemLinkingUpdate(Configure<AzureReposPolicyWorkItemLinkingUpdateSettings> configurator)
        {
            return AzureReposPolicyWorkItemLinkingUpdate(configurator(new AzureReposPolicyWorkItemLinkingUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyWorkItemLinkingUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyWorkItemLinkingUpdate(CombinatorialConfigure<AzureReposPolicyWorkItemLinkingUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyWorkItemLinkingUpdate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyCaseEnforcementCreate(AzureReposPolicyCaseEnforcementCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyCaseEnforcementCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Blocking"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyCaseEnforcementCreate(Configure<AzureReposPolicyCaseEnforcementCreateSettings> configurator)
        {
            return AzureReposPolicyCaseEnforcementCreate(configurator(new AzureReposPolicyCaseEnforcementCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Blocking"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyCaseEnforcementCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyCaseEnforcementCreate(CombinatorialConfigure<AzureReposPolicyCaseEnforcementCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyCaseEnforcementCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyCaseEnforcementUpdate(AzureReposPolicyCaseEnforcementUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyCaseEnforcementUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Blocking"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyCaseEnforcementUpdate(Configure<AzureReposPolicyCaseEnforcementUpdateSettings> configurator)
        {
            return AzureReposPolicyCaseEnforcementUpdate(configurator(new AzureReposPolicyCaseEnforcementUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Blocking"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyCaseEnforcementUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyCaseEnforcementUpdate(CombinatorialConfigure<AzureReposPolicyCaseEnforcementUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyCaseEnforcementUpdate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyApproverCountCreate(AzureReposPolicyApproverCountCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyApproverCountCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--allow-downvotes</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.AllowDownvotes"/></li>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.BranchMatchType"/></li>
        ///     <li><c>--creator-vote-counts</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.CreatorVoteCounts"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Help"/></li>
        ///     <li><c>--minimum-approver-count</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.MinimumApproverCount"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.RepositoryId"/></li>
        ///     <li><c>--reset-on-source-push</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.ResetOnSourcePush"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyApproverCountCreate(Configure<AzureReposPolicyApproverCountCreateSettings> configurator)
        {
            return AzureReposPolicyApproverCountCreate(configurator(new AzureReposPolicyApproverCountCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--allow-downvotes</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.AllowDownvotes"/></li>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.BranchMatchType"/></li>
        ///     <li><c>--creator-vote-counts</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.CreatorVoteCounts"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Help"/></li>
        ///     <li><c>--minimum-approver-count</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.MinimumApproverCount"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.RepositoryId"/></li>
        ///     <li><c>--reset-on-source-push</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.ResetOnSourcePush"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyApproverCountCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyApproverCountCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyApproverCountCreate(CombinatorialConfigure<AzureReposPolicyApproverCountCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyApproverCountCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyApproverCountUpdate(AzureReposPolicyApproverCountUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyApproverCountUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--allow-downvotes</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.AllowDownvotes"/></li>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.BranchMatchType"/></li>
        ///     <li><c>--creator-vote-counts</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.CreatorVoteCounts"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Id"/></li>
        ///     <li><c>--minimum-approver-count</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.MinimumApproverCount"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--reset-on-source-push</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.ResetOnSourcePush"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyApproverCountUpdate(Configure<AzureReposPolicyApproverCountUpdateSettings> configurator)
        {
            return AzureReposPolicyApproverCountUpdate(configurator(new AzureReposPolicyApproverCountUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--allow-downvotes</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.AllowDownvotes"/></li>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.BranchMatchType"/></li>
        ///     <li><c>--creator-vote-counts</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.CreatorVoteCounts"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Id"/></li>
        ///     <li><c>--minimum-approver-count</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.MinimumApproverCount"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--reset-on-source-push</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.ResetOnSourcePush"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyApproverCountUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyApproverCountUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyApproverCountUpdate(CombinatorialConfigure<AzureReposPolicyApproverCountUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyApproverCountUpdate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyFileSizeCreate(AzureReposPolicyFileSizeCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyFileSizeCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Blocking"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Help"/></li>
        ///     <li><c>--maximum-git-blob-size</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.MaximumGitBlobSize"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Subscription"/></li>
        ///     <li><c>--use-uncompressed-size</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.UseUncompressedSize"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyFileSizeCreate(Configure<AzureReposPolicyFileSizeCreateSettings> configurator)
        {
            return AzureReposPolicyFileSizeCreate(configurator(new AzureReposPolicyFileSizeCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Blocking"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Help"/></li>
        ///     <li><c>--maximum-git-blob-size</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.MaximumGitBlobSize"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Subscription"/></li>
        ///     <li><c>--use-uncompressed-size</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.UseUncompressedSize"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyFileSizeCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyFileSizeCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyFileSizeCreate(CombinatorialConfigure<AzureReposPolicyFileSizeCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyFileSizeCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyFileSizeUpdate(AzureReposPolicyFileSizeUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyFileSizeUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Blocking"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Id"/></li>
        ///     <li><c>--maximum-git-blob-size</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.MaximumGitBlobSize"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Subscription"/></li>
        ///     <li><c>--use-uncompressed-size</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.UseUncompressedSize"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyFileSizeUpdate(Configure<AzureReposPolicyFileSizeUpdateSettings> configurator)
        {
            return AzureReposPolicyFileSizeUpdate(configurator(new AzureReposPolicyFileSizeUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Blocking"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Id"/></li>
        ///     <li><c>--maximum-git-blob-size</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.MaximumGitBlobSize"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Subscription"/></li>
        ///     <li><c>--use-uncompressed-size</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.UseUncompressedSize"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyFileSizeUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyFileSizeUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyFileSizeUpdate(CombinatorialConfigure<AzureReposPolicyFileSizeUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyFileSizeUpdate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyRequiredReviewerCreate(AzureReposPolicyRequiredReviewerCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyRequiredReviewerCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Help"/></li>
        ///     <li><c>--message</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Message"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Output"/></li>
        ///     <li><c>--path-filter</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.PathFilter"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.RepositoryId"/></li>
        ///     <li><c>--required-reviewer-ids</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.RequiredReviewerIds"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyRequiredReviewerCreate(Configure<AzureReposPolicyRequiredReviewerCreateSettings> configurator)
        {
            return AzureReposPolicyRequiredReviewerCreate(configurator(new AzureReposPolicyRequiredReviewerCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Help"/></li>
        ///     <li><c>--message</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Message"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Output"/></li>
        ///     <li><c>--path-filter</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.PathFilter"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.RepositoryId"/></li>
        ///     <li><c>--required-reviewer-ids</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.RequiredReviewerIds"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyRequiredReviewerCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyRequiredReviewerCreate(CombinatorialConfigure<AzureReposPolicyRequiredReviewerCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyRequiredReviewerCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyRequiredReviewerUpdate(AzureReposPolicyRequiredReviewerUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyRequiredReviewerUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Id"/></li>
        ///     <li><c>--message</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Message"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Output"/></li>
        ///     <li><c>--path-filter</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.PathFilter"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--required-reviewer-ids</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.RequiredReviewerIds"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyRequiredReviewerUpdate(Configure<AzureReposPolicyRequiredReviewerUpdateSettings> configurator)
        {
            return AzureReposPolicyRequiredReviewerUpdate(configurator(new AzureReposPolicyRequiredReviewerUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Id"/></li>
        ///     <li><c>--message</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Message"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Output"/></li>
        ///     <li><c>--path-filter</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.PathFilter"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--required-reviewer-ids</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.RequiredReviewerIds"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyRequiredReviewerUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyRequiredReviewerUpdate(CombinatorialConfigure<AzureReposPolicyRequiredReviewerUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyRequiredReviewerUpdate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyCommentRequiredCreate(AzureReposPolicyCommentRequiredCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyCommentRequiredCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyCommentRequiredCreate(Configure<AzureReposPolicyCommentRequiredCreateSettings> configurator)
        {
            return AzureReposPolicyCommentRequiredCreate(configurator(new AzureReposPolicyCommentRequiredCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyCommentRequiredCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyCommentRequiredCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyCommentRequiredCreate(CombinatorialConfigure<AzureReposPolicyCommentRequiredCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyCommentRequiredCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyCommentRequiredUpdate(AzureReposPolicyCommentRequiredUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyCommentRequiredUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyCommentRequiredUpdate(Configure<AzureReposPolicyCommentRequiredUpdateSettings> configurator)
        {
            return AzureReposPolicyCommentRequiredUpdate(configurator(new AzureReposPolicyCommentRequiredUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyCommentRequiredUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyCommentRequiredUpdate(CombinatorialConfigure<AzureReposPolicyCommentRequiredUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyCommentRequiredUpdate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyMergeStrategyCreate(AzureReposPolicyMergeStrategyCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyMergeStrategyCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Subscription"/></li>
        ///     <li><c>--use-squash-merge</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.UseSquashMerge"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyMergeStrategyCreate(Configure<AzureReposPolicyMergeStrategyCreateSettings> configurator)
        {
            return AzureReposPolicyMergeStrategyCreate(configurator(new AzureReposPolicyMergeStrategyCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Help"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Subscription"/></li>
        ///     <li><c>--use-squash-merge</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.UseSquashMerge"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyMergeStrategyCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyMergeStrategyCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyMergeStrategyCreate(CombinatorialConfigure<AzureReposPolicyMergeStrategyCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyMergeStrategyCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyMergeStrategyUpdate(AzureReposPolicyMergeStrategyUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyMergeStrategyUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Subscription"/></li>
        ///     <li><c>--use-squash-merge</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.UseSquashMerge"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyMergeStrategyUpdate(Configure<AzureReposPolicyMergeStrategyUpdateSettings> configurator)
        {
            return AzureReposPolicyMergeStrategyUpdate(configurator(new AzureReposPolicyMergeStrategyUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.BranchMatchType"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Detect"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Id"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Output"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Query"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Subscription"/></li>
        ///     <li><c>--use-squash-merge</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.UseSquashMerge"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyMergeStrategyUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyMergeStrategyUpdate(CombinatorialConfigure<AzureReposPolicyMergeStrategyUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyMergeStrategyUpdate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyBuildCreate(AzureReposPolicyBuildCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyBuildCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyBuildCreateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyBuildCreateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyBuildCreateSettings.BranchMatchType"/></li>
        ///     <li><c>--build-definition-id</c> via <see cref="AzureReposPolicyBuildCreateSettings.BuildDefinitionId"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyBuildCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyBuildCreateSettings.Detect"/></li>
        ///     <li><c>--display-name</c> via <see cref="AzureReposPolicyBuildCreateSettings.DisplayName"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyBuildCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyBuildCreateSettings.Help"/></li>
        ///     <li><c>--manual-queue-only</c> via <see cref="AzureReposPolicyBuildCreateSettings.ManualQueueOnly"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyBuildCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyBuildCreateSettings.Output"/></li>
        ///     <li><c>--path-filter</c> via <see cref="AzureReposPolicyBuildCreateSettings.PathFilter"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyBuildCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyBuildCreateSettings.Query"/></li>
        ///     <li><c>--queue-on-source-update-only</c> via <see cref="AzureReposPolicyBuildCreateSettings.QueueOnSourceUpdateOnly"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyBuildCreateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyBuildCreateSettings.Subscription"/></li>
        ///     <li><c>--valid-duration</c> via <see cref="AzureReposPolicyBuildCreateSettings.ValidDuration"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyBuildCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyBuildCreate(Configure<AzureReposPolicyBuildCreateSettings> configurator)
        {
            return AzureReposPolicyBuildCreate(configurator(new AzureReposPolicyBuildCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyBuildCreateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyBuildCreateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyBuildCreateSettings.BranchMatchType"/></li>
        ///     <li><c>--build-definition-id</c> via <see cref="AzureReposPolicyBuildCreateSettings.BuildDefinitionId"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyBuildCreateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyBuildCreateSettings.Detect"/></li>
        ///     <li><c>--display-name</c> via <see cref="AzureReposPolicyBuildCreateSettings.DisplayName"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyBuildCreateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyBuildCreateSettings.Help"/></li>
        ///     <li><c>--manual-queue-only</c> via <see cref="AzureReposPolicyBuildCreateSettings.ManualQueueOnly"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyBuildCreateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyBuildCreateSettings.Output"/></li>
        ///     <li><c>--path-filter</c> via <see cref="AzureReposPolicyBuildCreateSettings.PathFilter"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyBuildCreateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyBuildCreateSettings.Query"/></li>
        ///     <li><c>--queue-on-source-update-only</c> via <see cref="AzureReposPolicyBuildCreateSettings.QueueOnSourceUpdateOnly"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyBuildCreateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyBuildCreateSettings.Subscription"/></li>
        ///     <li><c>--valid-duration</c> via <see cref="AzureReposPolicyBuildCreateSettings.ValidDuration"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyBuildCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyBuildCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyBuildCreate(CombinatorialConfigure<AzureReposPolicyBuildCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyBuildCreate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureReposPolicyBuildUpdate(AzureReposPolicyBuildUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureReposPolicyBuildUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyBuildUpdateSettings.BranchMatchType"/></li>
        ///     <li><c>--build-definition-id</c> via <see cref="AzureReposPolicyBuildUpdateSettings.BuildDefinitionId"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Detect"/></li>
        ///     <li><c>--display-name</c> via <see cref="AzureReposPolicyBuildUpdateSettings.DisplayName"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Id"/></li>
        ///     <li><c>--manual-queue-only</c> via <see cref="AzureReposPolicyBuildUpdateSettings.ManualQueueOnly"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Output"/></li>
        ///     <li><c>--path-filter</c> via <see cref="AzureReposPolicyBuildUpdateSettings.PathFilter"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Query"/></li>
        ///     <li><c>--queue-on-source-update-only</c> via <see cref="AzureReposPolicyBuildUpdateSettings.QueueOnSourceUpdateOnly"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyBuildUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Subscription"/></li>
        ///     <li><c>--valid-duration</c> via <see cref="AzureReposPolicyBuildUpdateSettings.ValidDuration"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureReposPolicyBuildUpdate(Configure<AzureReposPolicyBuildUpdateSettings> configurator)
        {
            return AzureReposPolicyBuildUpdate(configurator(new AzureReposPolicyBuildUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Repos.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/repos?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--blocking</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Blocking"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Branch"/></li>
        ///     <li><c>--branch-match-type</c> via <see cref="AzureReposPolicyBuildUpdateSettings.BranchMatchType"/></li>
        ///     <li><c>--build-definition-id</c> via <see cref="AzureReposPolicyBuildUpdateSettings.BuildDefinitionId"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Debug"/></li>
        ///     <li><c>--detect</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Detect"/></li>
        ///     <li><c>--display-name</c> via <see cref="AzureReposPolicyBuildUpdateSettings.DisplayName"/></li>
        ///     <li><c>--enabled</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Enabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Id"/></li>
        ///     <li><c>--manual-queue-only</c> via <see cref="AzureReposPolicyBuildUpdateSettings.ManualQueueOnly"/></li>
        ///     <li><c>--org</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Org"/></li>
        ///     <li><c>--output</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Output"/></li>
        ///     <li><c>--path-filter</c> via <see cref="AzureReposPolicyBuildUpdateSettings.PathFilter"/></li>
        ///     <li><c>--project</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Project"/></li>
        ///     <li><c>--query</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Query"/></li>
        ///     <li><c>--queue-on-source-update-only</c> via <see cref="AzureReposPolicyBuildUpdateSettings.QueueOnSourceUpdateOnly"/></li>
        ///     <li><c>--repository-id</c> via <see cref="AzureReposPolicyBuildUpdateSettings.RepositoryId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Subscription"/></li>
        ///     <li><c>--valid-duration</c> via <see cref="AzureReposPolicyBuildUpdateSettings.ValidDuration"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureReposPolicyBuildUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureReposPolicyBuildUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureReposPolicyBuildUpdate(CombinatorialConfigure<AzureReposPolicyBuildUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureReposPolicyBuildUpdate, AzureReposLogger, degreeOfParallelism, completeOnFailure);
        }
    }
    #region AzureReposCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Name for the new repository.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Open the repository page in your web browser.
        /// </summary>
        public virtual string Open { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos create")
              .Add("--name {value}", Name)
              .Add("--detect", Detect)
              .Add("--open {value}", Open)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the repository.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Do not prompt for confirmation.
        /// </summary>
        public virtual string Yes { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos delete")
              .Add("--id {value}", Id)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--yes {value}", Yes)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposListSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos list")
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposShowSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Name or ID of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Open the repository page in your web browser.
        /// </summary>
        public virtual string Open { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos show")
              .Add("--repository {value}", Repository)
              .Add("--detect", Detect)
              .Add("--open {value}", Open)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Name or ID of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Default branch to be set for the repository. Example: 'refs/heads/live' or 'live'.
        /// </summary>
        public virtual string DefaultBranch { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   New name for the repository.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos update")
              .Add("--repository {value}", Repository)
              .Add("--default-branch {value}", DefaultBranch)
              .Add("--detect", Detect)
              .Add("--name {value}", Name)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposRefCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposRefCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Name of the reference to create (example: heads/my_branch or tags/my_tag).
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Id of the object to create the reference from.
        /// </summary>
        public virtual string ObjectId { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos ref create")
              .Add("--name {value}", Name)
              .Add("--object-id {value}", ObjectId)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository {value}", Repository)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposRefDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposRefDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Name of the reference to delete (example: heads/my_branch).
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Id of the reference to delete.
        /// </summary>
        public virtual string ObjectId { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos ref delete")
              .Add("--name {value}", Name)
              .Add("--object-id {value}", ObjectId)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository {value}", Repository)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposRefListSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposRefListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   A filter to apply to the refs (starts with). Example: head or heads/ for the branches.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos ref list")
              .Add("--detect", Detect)
              .Add("--filter {value}", Filter)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository {value}", Repository)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposRefLockSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposRefLockSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Name of the reference to update (example: heads/my_branch).
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos ref lock")
              .Add("--name {value}", Name)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository {value}", Repository)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposRefUnlockSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposRefUnlockSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Name of the reference to update (example: heads/my_branch).
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos ref unlock")
              .Add("--name {value}", Name)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository {value}", Repository)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrCheckoutSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrCheckoutSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the pull request.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Name of git remote against which PR is raised.
        /// </summary>
        public virtual string RemoteName { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr checkout")
              .Add("--id {value}", Id)
              .Add("--remote-name {value}", RemoteName)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.
        /// </summary>
        public virtual bool? AutoComplete { get; internal set; }
        /// <summary>
        ///   Bypass required policies (if any) and completes the pull request once it can be merged.
        /// </summary>
        public virtual bool? BypassPolicy { get; internal set; }
        /// <summary>
        ///   Reason for bypassing the required policies.
        /// </summary>
        public virtual string BypassPolicyReason { get; internal set; }
        /// <summary>
        ///   Delete the source branch after the pull request has been completed and merged into the target branch.
        /// </summary>
        public virtual bool? DeleteSourceBranch { get; internal set; }
        /// <summary>
        ///   Description for the new pull request. Can include markdown. Each value sent to this arg will be a new line. For example: --description "First Line" "Second Line".
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Use this flag to create the pull request in draft/work in progress mode.
        /// </summary>
        public virtual bool? Draft { get; internal set; }
        /// <summary>
        ///   Message displayed when commits are merged.
        /// </summary>
        public virtual string MergeCommitMessage { get; internal set; }
        /// <summary>
        ///   Open the pull request in your web browser.
        /// </summary>
        public virtual string Open { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of the repository to create the pull request in.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Additional users or groups to include as reviewers on the new pull request. Space separated.
        /// </summary>
        public virtual string Reviewers { get; internal set; }
        /// <summary>
        ///   Name of the source branch. Example: "dev".
        /// </summary>
        public virtual string SourceBranch { get; internal set; }
        /// <summary>
        ///   Squash the commits in the source branch when merging into the target branch.
        /// </summary>
        public virtual bool? Squash { get; internal set; }
        /// <summary>
        ///   Name of the target branch. If not specified, defaults to the default branch of the target repository.
        /// </summary>
        public virtual string TargetBranch { get; internal set; }
        /// <summary>
        ///   Title for the new pull request.
        /// </summary>
        public virtual string Title { get; internal set; }
        /// <summary>
        ///   Transition any work items linked to the pull request into the next logical state. (e.g. Active -&gt; Resolved).
        /// </summary>
        public virtual bool? TransitionWorkItems { get; internal set; }
        /// <summary>
        ///   IDs of the work items to link to the new pull request. Space separated.
        /// </summary>
        public virtual string WorkItems { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr create")
              .Add("--auto-complete", AutoComplete)
              .Add("--bypass-policy", BypassPolicy)
              .Add("--bypass-policy-reason {value}", BypassPolicyReason)
              .Add("--delete-source-branch", DeleteSourceBranch)
              .Add("--description {value}", Description)
              .Add("--detect", Detect)
              .Add("--draft", Draft)
              .Add("--merge-commit-message {value}", MergeCommitMessage)
              .Add("--open {value}", Open)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository {value}", Repository)
              .Add("--reviewers {value}", Reviewers)
              .Add("--source-branch {value}", SourceBranch)
              .Add("--squash", Squash)
              .Add("--target-branch {value}", TargetBranch)
              .Add("--title {value}", Title)
              .Add("--transition-work-items", TransitionWorkItems)
              .Add("--work-items {value}", WorkItems)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrListSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Limit results to pull requests created by this user.
        /// </summary>
        public virtual string Creator { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Include _links for each pull request.
        /// </summary>
        public virtual string IncludeLinks { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Limit results to pull requests where this user is a reviewer.
        /// </summary>
        public virtual string Reviewer { get; internal set; }
        /// <summary>
        ///   Number of pull requests to skip.
        /// </summary>
        public virtual int? Skip { get; internal set; }
        /// <summary>
        ///   Limit results to pull requests that originate from this source branch.
        /// </summary>
        public virtual string SourceBranch { get; internal set; }
        /// <summary>
        ///   Limit results to pull requests with this status.
        /// </summary>
        public virtual ReposPrListStatus Status { get; internal set; }
        /// <summary>
        ///   Limit results to pull requests that target this branch.
        /// </summary>
        public virtual string TargetBranch { get; internal set; }
        /// <summary>
        ///   Maximum number of pull requests to list.
        /// </summary>
        public virtual int? Top { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr list")
              .Add("--creator {value}", Creator)
              .Add("--detect", Detect)
              .Add("--include-links {value}", IncludeLinks)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository {value}", Repository)
              .Add("--reviewer {value}", Reviewer)
              .Add("--skip {value}", Skip)
              .Add("--source-branch {value}", SourceBranch)
              .Add("--status {value}", Status)
              .Add("--target-branch {value}", TargetBranch)
              .Add("--top {value}", Top)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrSetVoteSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrSetVoteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the pull request.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   New vote value for the pull request.
        /// </summary>
        public virtual ReposPrSetVoteVote Vote { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr set-vote")
              .Add("--id {value}", Id)
              .Add("--vote {value}", Vote)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrShowSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the pull request.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Open the pull request in your web browser.
        /// </summary>
        public virtual string Open { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr show")
              .Add("--id {value}", Id)
              .Add("--detect", Detect)
              .Add("--open {value}", Open)
              .Add("--org {value}", Org)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the pull request.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.
        /// </summary>
        public virtual bool? AutoComplete { get; internal set; }
        /// <summary>
        ///   Bypass required policies (if any) and completes the pull request once it can be merged.
        /// </summary>
        public virtual bool? BypassPolicy { get; internal set; }
        /// <summary>
        ///   Reason for bypassing the required policies.
        /// </summary>
        public virtual string BypassPolicyReason { get; internal set; }
        /// <summary>
        ///   Delete the source branch after the pull request has been completed and merged into the target branch.
        /// </summary>
        public virtual bool? DeleteSourceBranch { get; internal set; }
        /// <summary>
        ///   New description for the pull request.  Can include markdown.  Each value sent to this arg will be a new line. For example: --description "First Line" "Second Line".
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Publish the PR or convert to draft mode.
        /// </summary>
        public virtual bool? Draft { get; internal set; }
        /// <summary>
        ///   Message displayed when commits are merged.
        /// </summary>
        public virtual string MergeCommitMessage { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Squash the commits in the source branch when merging into the target branch.
        /// </summary>
        public virtual bool? Squash { get; internal set; }
        /// <summary>
        ///   Set the new state of pull request.
        /// </summary>
        public virtual ReposPrUpdateStatus Status { get; internal set; }
        /// <summary>
        ///   New title for the pull request.
        /// </summary>
        public virtual string Title { get; internal set; }
        /// <summary>
        ///   Transition any work items linked to the pull request into the next logical state. (e.g. Active -&gt; Resolved).
        /// </summary>
        public virtual bool? TransitionWorkItems { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr update")
              .Add("--id {value}", Id)
              .Add("--auto-complete", AutoComplete)
              .Add("--bypass-policy", BypassPolicy)
              .Add("--bypass-policy-reason {value}", BypassPolicyReason)
              .Add("--delete-source-branch", DeleteSourceBranch)
              .Add("--description {value}", Description)
              .Add("--detect", Detect)
              .Add("--draft", Draft)
              .Add("--merge-commit-message {value}", MergeCommitMessage)
              .Add("--org {value}", Org)
              .Add("--squash", Squash)
              .Add("--status {value}", Status)
              .Add("--title {value}", Title)
              .Add("--transition-work-items", TransitionWorkItems)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposImportCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposImportCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Url of the source git repository.
        /// </summary>
        public virtual string GitSourceUrl { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Service Endpoint for connection to external endpoint.
        /// </summary>
        public virtual string GitServiceEndpointId { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of the repository to create the import request in.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Flag to tell if source git repository is private.
        /// </summary>
        public virtual string RequiresAuthorization { get; internal set; }
        /// <summary>
        ///   User name in case source git repository is private.
        /// </summary>
        public virtual string UserName { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos import create")
              .Add("--git-source-url {value}", GitSourceUrl)
              .Add("--detect", Detect)
              .Add("--git-service-endpoint-id {value}", GitServiceEndpointId)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository {value}", Repository)
              .Add("--requires-authorization {value}", RequiresAuthorization)
              .Add("--user-name {value}", UserName)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Local file path for configuration file. Please use / backslash when typing in directory path.
        /// </summary>
        public virtual string Config { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy create")
              .Add("--config {value}", Config)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the policy.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Do not prompt for confirmation.
        /// </summary>
        public virtual string Yes { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy delete")
              .Add("--id {value}", Id)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--yes {value}", Yes)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyListSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Branch name to filter results by exact match of branch name. The --repository-id parameter is required to use the branch filter. For example: --branch master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   ID of the repository to filter results by exact match of the repository ID. For example --repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy list")
              .Add("--branch {value}", Branch)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyShowSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the policy.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy show")
              .Add("--id {value}", Id)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Local file path for configuration file. Please use / backslash when typing in directory path.
        /// </summary>
        public virtual string Config { get; internal set; }
        /// <summary>
        ///   ID of the policy.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy update")
              .Add("--config {value}", Config)
              .Add("--id {value}", Id)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrReviewerAddSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrReviewerAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the pull request.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Users or groups to include as reviewers on a pull request. Space separated.
        /// </summary>
        public virtual string Reviewers { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr reviewer add")
              .Add("--id {value}", Id)
              .Add("--reviewers {value}", Reviewers)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrReviewerListSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrReviewerListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the pull request.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr reviewer list")
              .Add("--id {value}", Id)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrReviewerRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrReviewerRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the pull request.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Users or groups to remove as reviewers on a pull request. Space separated.
        /// </summary>
        public virtual string Reviewers { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr reviewer remove")
              .Add("--id {value}", Id)
              .Add("--reviewers {value}", Reviewers)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrWorkItemAddSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrWorkItemAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the pull request.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   IDs of the work items to link. Space separated.
        /// </summary>
        public virtual string WorkItems { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr work-item add")
              .Add("--id {value}", Id)
              .Add("--work-items {value}", WorkItems)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrWorkItemListSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrWorkItemListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the pull request.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr work-item list")
              .Add("--id {value}", Id)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrWorkItemRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrWorkItemRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the pull request.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   IDs of the work items to unlink. Space separated.
        /// </summary>
        public virtual string WorkItems { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr work-item remove")
              .Add("--id {value}", Id)
              .Add("--work-items {value}", WorkItems)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrPolicyListSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrPolicyListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the pull request.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Number of policies to skip.
        /// </summary>
        public virtual int? Skip { get; internal set; }
        /// <summary>
        ///   Maximum number of policies to list.
        /// </summary>
        public virtual int? Top { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr policy list")
              .Add("--id {value}", Id)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--skip {value}", Skip)
              .Add("--top {value}", Top)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPrPolicyQueueSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPrPolicyQueueSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the policy evaluation to queue.
        /// </summary>
        public virtual string EvaluationId { get; internal set; }
        /// <summary>
        ///   ID of the pull request.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos pr policy queue")
              .Add("--evaluation-id {value}", EvaluationId)
              .Add("--id {value}", Id)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyWorkItemLinkingCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyWorkItemLinkingCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Branch on which this policy should be applied. For example: master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.
        /// </summary>
        public virtual ReposPolicyWorkItemLinkingBranchMatchType BranchMatchType { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy work-item-linking create")
              .Add("--blocking", Blocking)
              .Add("--branch {value}", Branch)
              .Add("--enabled", Enabled)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--branch-match-type {value}", BranchMatchType)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyWorkItemLinkingUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyWorkItemLinkingUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the policy.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Branch on which this policy should be applied. For example: master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.
        /// </summary>
        public virtual ReposPolicyWorkItemLinkingBranchMatchType BranchMatchType { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy work-item-linking update")
              .Add("--id {value}", Id)
              .Add("--blocking", Blocking)
              .Add("--branch {value}", Branch)
              .Add("--branch-match-type {value}", BranchMatchType)
              .Add("--detect", Detect)
              .Add("--enabled", Enabled)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyCaseEnforcementCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyCaseEnforcementCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy case-enforcement create")
              .Add("--blocking", Blocking)
              .Add("--enabled", Enabled)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyCaseEnforcementUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyCaseEnforcementUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the policy.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy case-enforcement update")
              .Add("--id {value}", Id)
              .Add("--blocking", Blocking)
              .Add("--detect", Detect)
              .Add("--enabled", Enabled)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyApproverCountCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyApproverCountCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Whether to allow downvotes or not.
        /// </summary>
        public virtual bool? AllowDownvotes { get; internal set; }
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Branch on which this policy should be applied. For example: master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Whether the creator's vote counts or not.
        /// </summary>
        public virtual bool? CreatorVoteCounts { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Minimum number of approvers required. For example: 2.
        /// </summary>
        public virtual int? MinimumApproverCount { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Whether to reset source on push.
        /// </summary>
        public virtual bool? ResetOnSourcePush { get; internal set; }
        /// <summary>
        ///   Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.
        /// </summary>
        public virtual ReposPolicyWorkItemLinkingBranchMatchType BranchMatchType { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy approver-count create")
              .Add("--allow-downvotes", AllowDownvotes)
              .Add("--blocking", Blocking)
              .Add("--branch {value}", Branch)
              .Add("--creator-vote-counts", CreatorVoteCounts)
              .Add("--enabled", Enabled)
              .Add("--minimum-approver-count {value}", MinimumApproverCount)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--reset-on-source-push", ResetOnSourcePush)
              .Add("--branch-match-type {value}", BranchMatchType)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyApproverCountUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyApproverCountUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the policy.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Whether to allow downvotes or not.
        /// </summary>
        public virtual bool? AllowDownvotes { get; internal set; }
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Branch on which this policy should be applied. For example: master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.
        /// </summary>
        public virtual ReposPolicyWorkItemLinkingBranchMatchType BranchMatchType { get; internal set; }
        /// <summary>
        ///   Whether the creator's vote counts or not.
        /// </summary>
        public virtual bool? CreatorVoteCounts { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Minimum number of approvers required. For example: 2.
        /// </summary>
        public virtual int? MinimumApproverCount { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Whether to reset source on push.
        /// </summary>
        public virtual bool? ResetOnSourcePush { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy approver-count update")
              .Add("--id {value}", Id)
              .Add("--allow-downvotes", AllowDownvotes)
              .Add("--blocking", Blocking)
              .Add("--branch {value}", Branch)
              .Add("--branch-match-type {value}", BranchMatchType)
              .Add("--creator-vote-counts", CreatorVoteCounts)
              .Add("--detect", Detect)
              .Add("--enabled", Enabled)
              .Add("--minimum-approver-count {value}", MinimumApproverCount)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--reset-on-source-push", ResetOnSourcePush)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyFileSizeCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyFileSizeCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Maximum git blob size in bytes. For example, to specify a 10byte limit, --maximum-git-blob-size 10.
        /// </summary>
        public virtual string MaximumGitBlobSize { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Whether to use uncompressed size.
        /// </summary>
        public virtual bool? UseUncompressedSize { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy file-size create")
              .Add("--blocking", Blocking)
              .Add("--enabled", Enabled)
              .Add("--maximum-git-blob-size {value}", MaximumGitBlobSize)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--use-uncompressed-size", UseUncompressedSize)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyFileSizeUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyFileSizeUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the policy.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Maximum git blob size in bytes. For example, to specify a 10byte limit, --maximum-git-blob-size 10.
        /// </summary>
        public virtual string MaximumGitBlobSize { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Whether to use uncompressed size.
        /// </summary>
        public virtual bool? UseUncompressedSize { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy file-size update")
              .Add("--id {value}", Id)
              .Add("--blocking", Blocking)
              .Add("--detect", Detect)
              .Add("--enabled", Enabled)
              .Add("--maximum-git-blob-size {value}", MaximumGitBlobSize)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--use-uncompressed-size", UseUncompressedSize)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyRequiredReviewerCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyRequiredReviewerCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Branch on which this policy should be applied. For example: master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Message.
        /// </summary>
        public virtual string Message { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Required reviewers email addresses separated by ';'. For example: john@contoso.com;alice@contoso.com.
        /// </summary>
        public virtual string RequiredReviewerIds { get; internal set; }
        /// <summary>
        ///   Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.
        /// </summary>
        public virtual ReposPolicyWorkItemLinkingBranchMatchType BranchMatchType { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths separated by ';'. Example: /WebApp/Models/Data.cs, /WebApp/\* or \*.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.
        /// </summary>
        public virtual string PathFilter { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy required-reviewer create")
              .Add("--blocking", Blocking)
              .Add("--branch {value}", Branch)
              .Add("--enabled", Enabled)
              .Add("--message {value}", Message)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--required-reviewer-ids {value}", RequiredReviewerIds)
              .Add("--branch-match-type {value}", BranchMatchType)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--path-filter {value}", PathFilter)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyRequiredReviewerUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyRequiredReviewerUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the policy.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Branch on which this policy should be applied. For example: master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.
        /// </summary>
        public virtual ReposPolicyWorkItemLinkingBranchMatchType BranchMatchType { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Message.
        /// </summary>
        public virtual string Message { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths separated by ';'. Example: /WebApp/Models/Data.cs, /WebApp/\* or \*.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.
        /// </summary>
        public virtual string PathFilter { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Required reviewers email addresses separated by ';'. For example: john@contoso.com;alice@contoso.com.
        /// </summary>
        public virtual string RequiredReviewerIds { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy required-reviewer update")
              .Add("--id {value}", Id)
              .Add("--blocking", Blocking)
              .Add("--branch {value}", Branch)
              .Add("--branch-match-type {value}", BranchMatchType)
              .Add("--detect", Detect)
              .Add("--enabled", Enabled)
              .Add("--message {value}", Message)
              .Add("--org {value}", Org)
              .Add("--path-filter {value}", PathFilter)
              .Add("--project {value}", Project)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--required-reviewer-ids {value}", RequiredReviewerIds)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyCommentRequiredCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyCommentRequiredCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Branch on which this policy should be applied. For example: master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.
        /// </summary>
        public virtual ReposPolicyWorkItemLinkingBranchMatchType BranchMatchType { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy comment-required create")
              .Add("--blocking", Blocking)
              .Add("--branch {value}", Branch)
              .Add("--enabled", Enabled)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--branch-match-type {value}", BranchMatchType)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyCommentRequiredUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyCommentRequiredUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the policy.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Branch on which this policy should be applied. For example: master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.
        /// </summary>
        public virtual ReposPolicyWorkItemLinkingBranchMatchType BranchMatchType { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy comment-required update")
              .Add("--id {value}", Id)
              .Add("--blocking", Blocking)
              .Add("--branch {value}", Branch)
              .Add("--branch-match-type {value}", BranchMatchType)
              .Add("--detect", Detect)
              .Add("--enabled", Enabled)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyMergeStrategyCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyMergeStrategyCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Branch on which this policy should be applied. For example: master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Whether to squash merge always.
        /// </summary>
        public virtual bool? UseSquashMerge { get; internal set; }
        /// <summary>
        ///   Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.
        /// </summary>
        public virtual ReposPolicyWorkItemLinkingBranchMatchType BranchMatchType { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy merge-strategy create")
              .Add("--blocking", Blocking)
              .Add("--branch {value}", Branch)
              .Add("--enabled", Enabled)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--use-squash-merge", UseSquashMerge)
              .Add("--branch-match-type {value}", BranchMatchType)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyMergeStrategyUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyMergeStrategyUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the policy.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Branch on which this policy should be applied. For example: master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.
        /// </summary>
        public virtual ReposPolicyWorkItemLinkingBranchMatchType BranchMatchType { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Whether to squash merge always.
        /// </summary>
        public virtual bool? UseSquashMerge { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy merge-strategy update")
              .Add("--id {value}", Id)
              .Add("--blocking", Blocking)
              .Add("--branch {value}", Branch)
              .Add("--branch-match-type {value}", BranchMatchType)
              .Add("--detect", Detect)
              .Add("--enabled", Enabled)
              .Add("--org {value}", Org)
              .Add("--project {value}", Project)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--use-squash-merge", UseSquashMerge)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyBuildCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyBuildCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Branch on which this policy should be applied. For example: master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Build Definition Id.
        /// </summary>
        public virtual string BuildDefinitionId { get; internal set; }
        /// <summary>
        ///   Display name for this build policy to identify the policy. For example: 'Manual queue policy'.
        /// </summary>
        public virtual string DisplayName { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Whether to allow only manual queue of builds.
        /// </summary>
        public virtual bool? ManualQueueOnly { get; internal set; }
        /// <summary>
        ///   Queue Only on source update.
        /// </summary>
        public virtual bool? QueueOnSourceUpdateOnly { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Policy validity duration (in minutes).
        /// </summary>
        public virtual string ValidDuration { get; internal set; }
        /// <summary>
        ///   Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.
        /// </summary>
        public virtual ReposPolicyWorkItemLinkingBranchMatchType BranchMatchType { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths separated by ';'. Example: /WebApp/Models/Data.cs, /WebApp/\* or \*.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.
        /// </summary>
        public virtual string PathFilter { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy build create")
              .Add("--blocking", Blocking)
              .Add("--branch {value}", Branch)
              .Add("--build-definition-id {value}", BuildDefinitionId)
              .Add("--display-name {value}", DisplayName)
              .Add("--enabled", Enabled)
              .Add("--manual-queue-only", ManualQueueOnly)
              .Add("--queue-on-source-update-only", QueueOnSourceUpdateOnly)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--valid-duration {value}", ValidDuration)
              .Add("--branch-match-type {value}", BranchMatchType)
              .Add("--detect", Detect)
              .Add("--org {value}", Org)
              .Add("--path-filter {value}", PathFilter)
              .Add("--project {value}", Project)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposPolicyBuildUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureReposPolicyBuildUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureRepos executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureReposTasks.AzureReposPath;
        public override Action<OutputType, string> CustomLogger => AzureReposTasks.AzureReposLogger;
        /// <summary>
        ///   ID of the policy.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   Whether the policy should be blocking or not.
        /// </summary>
        public virtual bool? Blocking { get; internal set; }
        /// <summary>
        ///   Branch on which this policy should be applied. For example: master.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.
        /// </summary>
        public virtual ReposPolicyWorkItemLinkingBranchMatchType BranchMatchType { get; internal set; }
        /// <summary>
        ///   Build Definition Id.
        /// </summary>
        public virtual string BuildDefinitionId { get; internal set; }
        /// <summary>
        ///   Automatically detect organization.
        /// </summary>
        public virtual bool? Detect { get; internal set; }
        /// <summary>
        ///   Display name for this build policy to identify the policy. For example: 'Manual queue policy'.
        /// </summary>
        public virtual string DisplayName { get; internal set; }
        /// <summary>
        ///   Whether the policy is enabled or not.
        /// </summary>
        public virtual bool? Enabled { get; internal set; }
        /// <summary>
        ///   Whether to allow only manual queue of builds.
        /// </summary>
        public virtual bool? ManualQueueOnly { get; internal set; }
        /// <summary>
        ///   Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.
        /// </summary>
        public virtual string Org { get; internal set; }
        /// <summary>
        ///   Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths separated by ';'. Example: /WebApp/Models/Data.cs, /WebApp/\* or \*.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.
        /// </summary>
        public virtual string PathFilter { get; internal set; }
        /// <summary>
        ///   Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Queue Only on source update.
        /// </summary>
        public virtual bool? QueueOnSourceUpdateOnly { get; internal set; }
        /// <summary>
        ///   Id of the repository on which to apply the policy.
        /// </summary>
        public virtual string RepositoryId { get; internal set; }
        /// <summary>
        ///   Policy validity duration (in minutes).
        /// </summary>
        public virtual string ValidDuration { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("repos policy build update")
              .Add("--id {value}", Id)
              .Add("--blocking", Blocking)
              .Add("--branch {value}", Branch)
              .Add("--branch-match-type {value}", BranchMatchType)
              .Add("--build-definition-id {value}", BuildDefinitionId)
              .Add("--detect", Detect)
              .Add("--display-name {value}", DisplayName)
              .Add("--enabled", Enabled)
              .Add("--manual-queue-only", ManualQueueOnly)
              .Add("--org {value}", Org)
              .Add("--path-filter {value}", PathFilter)
              .Add("--project {value}", Project)
              .Add("--queue-on-source-update-only", QueueOnSourceUpdateOnly)
              .Add("--repository-id {value}", RepositoryId)
              .Add("--valid-duration {value}", ValidDuration)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureReposCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposCreateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposCreateSettings.Name"/></em></p>
        ///   <p>Name for the new repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings SetName(this AzureReposCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposCreateSettings.Name"/></em></p>
        ///   <p>Name for the new repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings ResetName(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings SetDetect(this AzureReposCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings ResetDetect(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings EnableDetect(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings DisableDetect(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings ToggleDetect(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Open
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposCreateSettings.Open"/></em></p>
        ///   <p>Open the repository page in your web browser.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings SetOpen(this AzureReposCreateSettings toolSettings, string open)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Open = open;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposCreateSettings.Open"/></em></p>
        ///   <p>Open the repository page in your web browser.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings ResetOpen(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Open = null;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings SetOrg(this AzureReposCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings ResetOrg(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings SetProject(this AzureReposCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings ResetProject(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings SetSubscription(this AzureReposCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings ResetSubscription(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings SetDebug(this AzureReposCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings ResetDebug(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings SetHelp(this AzureReposCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings ResetHelp(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings SetOutput(this AzureReposCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings ResetOutput(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings SetQuery(this AzureReposCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings ResetQuery(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings SetVerbose(this AzureReposCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposCreateSettings ResetVerbose(this AzureReposCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposDeleteSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposDeleteSettings.Id"/></em></p>
        ///   <p>ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings SetId(this AzureReposDeleteSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposDeleteSettings.Id"/></em></p>
        ///   <p>ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings ResetId(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings SetDetect(this AzureReposDeleteSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings ResetDetect(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings EnableDetect(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings DisableDetect(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings ToggleDetect(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposDeleteSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings SetOrg(this AzureReposDeleteSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposDeleteSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings ResetOrg(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposDeleteSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings SetProject(this AzureReposDeleteSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposDeleteSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings ResetProject(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposDeleteSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings SetYes(this AzureReposDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposDeleteSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings ResetYes(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings SetSubscription(this AzureReposDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings ResetSubscription(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings SetDebug(this AzureReposDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings ResetDebug(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings SetHelp(this AzureReposDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings ResetHelp(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings SetOutput(this AzureReposDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings ResetOutput(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings SetQuery(this AzureReposDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings ResetQuery(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings SetVerbose(this AzureReposDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposDeleteSettings ResetVerbose(this AzureReposDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposListSettingsExtensions
    {
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings SetDetect(this AzureReposListSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings ResetDetect(this AzureReposListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings EnableDetect(this AzureReposListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings DisableDetect(this AzureReposListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings ToggleDetect(this AzureReposListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings SetOrg(this AzureReposListSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings ResetOrg(this AzureReposListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposListSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings SetProject(this AzureReposListSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposListSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings ResetProject(this AzureReposListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings SetSubscription(this AzureReposListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings ResetSubscription(this AzureReposListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings SetDebug(this AzureReposListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings ResetDebug(this AzureReposListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings SetHelp(this AzureReposListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings ResetHelp(this AzureReposListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings SetOutput(this AzureReposListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings ResetOutput(this AzureReposListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings SetQuery(this AzureReposListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings ResetQuery(this AzureReposListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings SetVerbose(this AzureReposListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposListSettings ResetVerbose(this AzureReposListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposShowSettingsExtensions
    {
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposShowSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings SetRepository(this AzureReposShowSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposShowSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings ResetRepository(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings SetDetect(this AzureReposShowSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings ResetDetect(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings EnableDetect(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings DisableDetect(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings ToggleDetect(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Open
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposShowSettings.Open"/></em></p>
        ///   <p>Open the repository page in your web browser.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings SetOpen(this AzureReposShowSettings toolSettings, string open)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Open = open;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposShowSettings.Open"/></em></p>
        ///   <p>Open the repository page in your web browser.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings ResetOpen(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Open = null;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposShowSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings SetOrg(this AzureReposShowSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposShowSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings ResetOrg(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposShowSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings SetProject(this AzureReposShowSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposShowSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings ResetProject(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings SetSubscription(this AzureReposShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings ResetSubscription(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings SetDebug(this AzureReposShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings ResetDebug(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings SetHelp(this AzureReposShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings ResetHelp(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings SetOutput(this AzureReposShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings ResetOutput(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings SetQuery(this AzureReposShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings ResetQuery(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings SetVerbose(this AzureReposShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposShowSettings ResetVerbose(this AzureReposShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposUpdateSettingsExtensions
    {
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposUpdateSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings SetRepository(this AzureReposUpdateSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposUpdateSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ResetRepository(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region DefaultBranch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposUpdateSettings.DefaultBranch"/></em></p>
        ///   <p>Default branch to be set for the repository. Example: 'refs/heads/live' or 'live'.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings SetDefaultBranch(this AzureReposUpdateSettings toolSettings, string defaultBranch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultBranch = defaultBranch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposUpdateSettings.DefaultBranch"/></em></p>
        ///   <p>Default branch to be set for the repository. Example: 'refs/heads/live' or 'live'.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ResetDefaultBranch(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultBranch = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings SetDetect(this AzureReposUpdateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ResetDetect(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings EnableDetect(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings DisableDetect(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ToggleDetect(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposUpdateSettings.Name"/></em></p>
        ///   <p>New name for the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings SetName(this AzureReposUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposUpdateSettings.Name"/></em></p>
        ///   <p>New name for the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ResetName(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings SetOrg(this AzureReposUpdateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ResetOrg(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings SetProject(this AzureReposUpdateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ResetProject(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings SetSubscription(this AzureReposUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ResetSubscription(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings SetDebug(this AzureReposUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ResetDebug(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings SetHelp(this AzureReposUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ResetHelp(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings SetOutput(this AzureReposUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ResetOutput(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings SetQuery(this AzureReposUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ResetQuery(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings SetVerbose(this AzureReposUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposUpdateSettings ResetVerbose(this AzureReposUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposRefCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposRefCreateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefCreateSettings.Name"/></em></p>
        ///   <p>Name of the reference to create (example: heads/my_branch or tags/my_tag).</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings SetName(this AzureReposRefCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefCreateSettings.Name"/></em></p>
        ///   <p>Name of the reference to create (example: heads/my_branch or tags/my_tag).</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ResetName(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ObjectId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefCreateSettings.ObjectId"/></em></p>
        ///   <p>Id of the object to create the reference from.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings SetObjectId(this AzureReposRefCreateSettings toolSettings, string objectId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ObjectId = objectId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefCreateSettings.ObjectId"/></em></p>
        ///   <p>Id of the object to create the reference from.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ResetObjectId(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ObjectId = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings SetDetect(this AzureReposRefCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ResetDetect(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposRefCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings EnableDetect(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposRefCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings DisableDetect(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposRefCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ToggleDetect(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings SetOrg(this AzureReposRefCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ResetOrg(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings SetProject(this AzureReposRefCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ResetProject(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefCreateSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings SetRepository(this AzureReposRefCreateSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefCreateSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ResetRepository(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings SetSubscription(this AzureReposRefCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ResetSubscription(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings SetDebug(this AzureReposRefCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ResetDebug(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings SetHelp(this AzureReposRefCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ResetHelp(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings SetOutput(this AzureReposRefCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ResetOutput(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings SetQuery(this AzureReposRefCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ResetQuery(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings SetVerbose(this AzureReposRefCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefCreateSettings ResetVerbose(this AzureReposRefCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposRefDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposRefDeleteSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefDeleteSettings.Name"/></em></p>
        ///   <p>Name of the reference to delete (example: heads/my_branch).</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings SetName(this AzureReposRefDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefDeleteSettings.Name"/></em></p>
        ///   <p>Name of the reference to delete (example: heads/my_branch).</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ResetName(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ObjectId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefDeleteSettings.ObjectId"/></em></p>
        ///   <p>Id of the reference to delete.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings SetObjectId(this AzureReposRefDeleteSettings toolSettings, string objectId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ObjectId = objectId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefDeleteSettings.ObjectId"/></em></p>
        ///   <p>Id of the reference to delete.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ResetObjectId(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ObjectId = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings SetDetect(this AzureReposRefDeleteSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ResetDetect(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposRefDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings EnableDetect(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposRefDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings DisableDetect(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposRefDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ToggleDetect(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefDeleteSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings SetOrg(this AzureReposRefDeleteSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefDeleteSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ResetOrg(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefDeleteSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings SetProject(this AzureReposRefDeleteSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefDeleteSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ResetProject(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefDeleteSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings SetRepository(this AzureReposRefDeleteSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefDeleteSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ResetRepository(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings SetSubscription(this AzureReposRefDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ResetSubscription(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings SetDebug(this AzureReposRefDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ResetDebug(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings SetHelp(this AzureReposRefDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ResetHelp(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings SetOutput(this AzureReposRefDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ResetOutput(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings SetQuery(this AzureReposRefDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ResetQuery(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings SetVerbose(this AzureReposRefDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefDeleteSettings ResetVerbose(this AzureReposRefDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposRefListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposRefListSettingsExtensions
    {
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings SetDetect(this AzureReposRefListSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings ResetDetect(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposRefListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings EnableDetect(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposRefListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings DisableDetect(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposRefListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings ToggleDetect(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefListSettings.Filter"/></em></p>
        ///   <p>A filter to apply to the refs (starts with). Example: head or heads/ for the branches.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings SetFilter(this AzureReposRefListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefListSettings.Filter"/></em></p>
        ///   <p>A filter to apply to the refs (starts with). Example: head or heads/ for the branches.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings ResetFilter(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings SetOrg(this AzureReposRefListSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings ResetOrg(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefListSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings SetProject(this AzureReposRefListSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefListSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings ResetProject(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefListSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings SetRepository(this AzureReposRefListSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefListSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings ResetRepository(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings SetSubscription(this AzureReposRefListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings ResetSubscription(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings SetDebug(this AzureReposRefListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings ResetDebug(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings SetHelp(this AzureReposRefListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings ResetHelp(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings SetOutput(this AzureReposRefListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings ResetOutput(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings SetQuery(this AzureReposRefListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings ResetQuery(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings SetVerbose(this AzureReposRefListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefListSettings ResetVerbose(this AzureReposRefListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposRefLockSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposRefLockSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefLockSettings.Name"/></em></p>
        ///   <p>Name of the reference to update (example: heads/my_branch).</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings SetName(this AzureReposRefLockSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefLockSettings.Name"/></em></p>
        ///   <p>Name of the reference to update (example: heads/my_branch).</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings ResetName(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefLockSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings SetDetect(this AzureReposRefLockSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefLockSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings ResetDetect(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposRefLockSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings EnableDetect(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposRefLockSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings DisableDetect(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposRefLockSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings ToggleDetect(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefLockSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings SetOrg(this AzureReposRefLockSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefLockSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings ResetOrg(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefLockSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings SetProject(this AzureReposRefLockSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefLockSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings ResetProject(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefLockSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings SetRepository(this AzureReposRefLockSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefLockSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings ResetRepository(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefLockSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings SetSubscription(this AzureReposRefLockSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefLockSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings ResetSubscription(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefLockSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings SetDebug(this AzureReposRefLockSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefLockSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings ResetDebug(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefLockSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings SetHelp(this AzureReposRefLockSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefLockSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings ResetHelp(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefLockSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings SetOutput(this AzureReposRefLockSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefLockSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings ResetOutput(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefLockSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings SetQuery(this AzureReposRefLockSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefLockSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings ResetQuery(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefLockSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings SetVerbose(this AzureReposRefLockSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefLockSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefLockSettings ResetVerbose(this AzureReposRefLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposRefUnlockSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposRefUnlockSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefUnlockSettings.Name"/></em></p>
        ///   <p>Name of the reference to update (example: heads/my_branch).</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings SetName(this AzureReposRefUnlockSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefUnlockSettings.Name"/></em></p>
        ///   <p>Name of the reference to update (example: heads/my_branch).</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings ResetName(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefUnlockSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings SetDetect(this AzureReposRefUnlockSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefUnlockSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings ResetDetect(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposRefUnlockSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings EnableDetect(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposRefUnlockSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings DisableDetect(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposRefUnlockSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings ToggleDetect(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefUnlockSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings SetOrg(this AzureReposRefUnlockSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefUnlockSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings ResetOrg(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefUnlockSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings SetProject(this AzureReposRefUnlockSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefUnlockSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings ResetProject(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefUnlockSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings SetRepository(this AzureReposRefUnlockSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefUnlockSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings ResetRepository(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefUnlockSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings SetSubscription(this AzureReposRefUnlockSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefUnlockSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings ResetSubscription(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefUnlockSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings SetDebug(this AzureReposRefUnlockSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefUnlockSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings ResetDebug(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefUnlockSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings SetHelp(this AzureReposRefUnlockSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefUnlockSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings ResetHelp(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefUnlockSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings SetOutput(this AzureReposRefUnlockSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefUnlockSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings ResetOutput(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefUnlockSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings SetQuery(this AzureReposRefUnlockSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefUnlockSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings ResetQuery(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposRefUnlockSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings SetVerbose(this AzureReposRefUnlockSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposRefUnlockSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposRefUnlockSettings ResetVerbose(this AzureReposRefUnlockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrCheckoutSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrCheckoutSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCheckoutSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings SetId(this AzureReposPrCheckoutSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCheckoutSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings ResetId(this AzureReposPrCheckoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region RemoteName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCheckoutSettings.RemoteName"/></em></p>
        ///   <p>Name of git remote against which PR is raised.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings SetRemoteName(this AzureReposPrCheckoutSettings toolSettings, string remoteName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RemoteName = remoteName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCheckoutSettings.RemoteName"/></em></p>
        ///   <p>Name of git remote against which PR is raised.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings ResetRemoteName(this AzureReposPrCheckoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RemoteName = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCheckoutSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings SetSubscription(this AzureReposPrCheckoutSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCheckoutSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings ResetSubscription(this AzureReposPrCheckoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCheckoutSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings SetDebug(this AzureReposPrCheckoutSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCheckoutSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings ResetDebug(this AzureReposPrCheckoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCheckoutSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings SetHelp(this AzureReposPrCheckoutSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCheckoutSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings ResetHelp(this AzureReposPrCheckoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCheckoutSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings SetOutput(this AzureReposPrCheckoutSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCheckoutSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings ResetOutput(this AzureReposPrCheckoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCheckoutSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings SetQuery(this AzureReposPrCheckoutSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCheckoutSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings ResetQuery(this AzureReposPrCheckoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCheckoutSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings SetVerbose(this AzureReposPrCheckoutSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCheckoutSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCheckoutSettings ResetVerbose(this AzureReposPrCheckoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrCreateSettingsExtensions
    {
        #region AutoComplete
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.AutoComplete"/></em></p>
        ///   <p>Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetAutoComplete(this AzureReposPrCreateSettings toolSettings, bool? autoComplete)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoComplete = autoComplete;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.AutoComplete"/></em></p>
        ///   <p>Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetAutoComplete(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoComplete = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrCreateSettings.AutoComplete"/></em></p>
        ///   <p>Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings EnableAutoComplete(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoComplete = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrCreateSettings.AutoComplete"/></em></p>
        ///   <p>Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings DisableAutoComplete(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoComplete = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrCreateSettings.AutoComplete"/></em></p>
        ///   <p>Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ToggleAutoComplete(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoComplete = !toolSettings.AutoComplete;
            return toolSettings;
        }
        #endregion
        #region BypassPolicy
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.BypassPolicy"/></em></p>
        ///   <p>Bypass required policies (if any) and completes the pull request once it can be merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetBypassPolicy(this AzureReposPrCreateSettings toolSettings, bool? bypassPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicy = bypassPolicy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.BypassPolicy"/></em></p>
        ///   <p>Bypass required policies (if any) and completes the pull request once it can be merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetBypassPolicy(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicy = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrCreateSettings.BypassPolicy"/></em></p>
        ///   <p>Bypass required policies (if any) and completes the pull request once it can be merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings EnableBypassPolicy(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicy = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrCreateSettings.BypassPolicy"/></em></p>
        ///   <p>Bypass required policies (if any) and completes the pull request once it can be merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings DisableBypassPolicy(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicy = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrCreateSettings.BypassPolicy"/></em></p>
        ///   <p>Bypass required policies (if any) and completes the pull request once it can be merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ToggleBypassPolicy(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicy = !toolSettings.BypassPolicy;
            return toolSettings;
        }
        #endregion
        #region BypassPolicyReason
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.BypassPolicyReason"/></em></p>
        ///   <p>Reason for bypassing the required policies.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetBypassPolicyReason(this AzureReposPrCreateSettings toolSettings, string bypassPolicyReason)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicyReason = bypassPolicyReason;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.BypassPolicyReason"/></em></p>
        ///   <p>Reason for bypassing the required policies.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetBypassPolicyReason(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicyReason = null;
            return toolSettings;
        }
        #endregion
        #region DeleteSourceBranch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.DeleteSourceBranch"/></em></p>
        ///   <p>Delete the source branch after the pull request has been completed and merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetDeleteSourceBranch(this AzureReposPrCreateSettings toolSettings, bool? deleteSourceBranch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSourceBranch = deleteSourceBranch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.DeleteSourceBranch"/></em></p>
        ///   <p>Delete the source branch after the pull request has been completed and merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetDeleteSourceBranch(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSourceBranch = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrCreateSettings.DeleteSourceBranch"/></em></p>
        ///   <p>Delete the source branch after the pull request has been completed and merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings EnableDeleteSourceBranch(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSourceBranch = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrCreateSettings.DeleteSourceBranch"/></em></p>
        ///   <p>Delete the source branch after the pull request has been completed and merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings DisableDeleteSourceBranch(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSourceBranch = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrCreateSettings.DeleteSourceBranch"/></em></p>
        ///   <p>Delete the source branch after the pull request has been completed and merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ToggleDeleteSourceBranch(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSourceBranch = !toolSettings.DeleteSourceBranch;
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Description"/></em></p>
        ///   <p>Description for the new pull request. Can include markdown. Each value sent to this arg will be a new line. For example: --description "First Line" "Second Line".</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetDescription(this AzureReposPrCreateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Description"/></em></p>
        ///   <p>Description for the new pull request. Can include markdown. Each value sent to this arg will be a new line. For example: --description "First Line" "Second Line".</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetDescription(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetDetect(this AzureReposPrCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetDetect(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings EnableDetect(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings DisableDetect(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ToggleDetect(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Draft
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Draft"/></em></p>
        ///   <p>Use this flag to create the pull request in draft/work in progress mode.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetDraft(this AzureReposPrCreateSettings toolSettings, bool? draft)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Draft = draft;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Draft"/></em></p>
        ///   <p>Use this flag to create the pull request in draft/work in progress mode.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetDraft(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Draft = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrCreateSettings.Draft"/></em></p>
        ///   <p>Use this flag to create the pull request in draft/work in progress mode.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings EnableDraft(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Draft = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrCreateSettings.Draft"/></em></p>
        ///   <p>Use this flag to create the pull request in draft/work in progress mode.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings DisableDraft(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Draft = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrCreateSettings.Draft"/></em></p>
        ///   <p>Use this flag to create the pull request in draft/work in progress mode.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ToggleDraft(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Draft = !toolSettings.Draft;
            return toolSettings;
        }
        #endregion
        #region MergeCommitMessage
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.MergeCommitMessage"/></em></p>
        ///   <p>Message displayed when commits are merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetMergeCommitMessage(this AzureReposPrCreateSettings toolSettings, string mergeCommitMessage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MergeCommitMessage = mergeCommitMessage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.MergeCommitMessage"/></em></p>
        ///   <p>Message displayed when commits are merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetMergeCommitMessage(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MergeCommitMessage = null;
            return toolSettings;
        }
        #endregion
        #region Open
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Open"/></em></p>
        ///   <p>Open the pull request in your web browser.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetOpen(this AzureReposPrCreateSettings toolSettings, string open)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Open = open;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Open"/></em></p>
        ///   <p>Open the pull request in your web browser.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetOpen(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Open = null;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetOrg(this AzureReposPrCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetOrg(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetProject(this AzureReposPrCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetProject(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository to create the pull request in.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetRepository(this AzureReposPrCreateSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository to create the pull request in.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetRepository(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region Reviewers
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Reviewers"/></em></p>
        ///   <p>Additional users or groups to include as reviewers on the new pull request. Space separated.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetReviewers(this AzureReposPrCreateSettings toolSettings, string reviewers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reviewers = reviewers;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Reviewers"/></em></p>
        ///   <p>Additional users or groups to include as reviewers on the new pull request. Space separated.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetReviewers(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reviewers = null;
            return toolSettings;
        }
        #endregion
        #region SourceBranch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.SourceBranch"/></em></p>
        ///   <p>Name of the source branch. Example: "dev".</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetSourceBranch(this AzureReposPrCreateSettings toolSettings, string sourceBranch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceBranch = sourceBranch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.SourceBranch"/></em></p>
        ///   <p>Name of the source branch. Example: "dev".</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetSourceBranch(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceBranch = null;
            return toolSettings;
        }
        #endregion
        #region Squash
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Squash"/></em></p>
        ///   <p>Squash the commits in the source branch when merging into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetSquash(this AzureReposPrCreateSettings toolSettings, bool? squash)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = squash;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Squash"/></em></p>
        ///   <p>Squash the commits in the source branch when merging into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetSquash(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrCreateSettings.Squash"/></em></p>
        ///   <p>Squash the commits in the source branch when merging into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings EnableSquash(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrCreateSettings.Squash"/></em></p>
        ///   <p>Squash the commits in the source branch when merging into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings DisableSquash(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrCreateSettings.Squash"/></em></p>
        ///   <p>Squash the commits in the source branch when merging into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ToggleSquash(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = !toolSettings.Squash;
            return toolSettings;
        }
        #endregion
        #region TargetBranch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.TargetBranch"/></em></p>
        ///   <p>Name of the target branch. If not specified, defaults to the default branch of the target repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetTargetBranch(this AzureReposPrCreateSettings toolSettings, string targetBranch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetBranch = targetBranch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.TargetBranch"/></em></p>
        ///   <p>Name of the target branch. If not specified, defaults to the default branch of the target repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetTargetBranch(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetBranch = null;
            return toolSettings;
        }
        #endregion
        #region Title
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Title"/></em></p>
        ///   <p>Title for the new pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetTitle(this AzureReposPrCreateSettings toolSettings, string title)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Title = title;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Title"/></em></p>
        ///   <p>Title for the new pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetTitle(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Title = null;
            return toolSettings;
        }
        #endregion
        #region TransitionWorkItems
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.TransitionWorkItems"/></em></p>
        ///   <p>Transition any work items linked to the pull request into the next logical state. (e.g. Active -&gt; Resolved).</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetTransitionWorkItems(this AzureReposPrCreateSettings toolSettings, bool? transitionWorkItems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransitionWorkItems = transitionWorkItems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.TransitionWorkItems"/></em></p>
        ///   <p>Transition any work items linked to the pull request into the next logical state. (e.g. Active -&gt; Resolved).</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetTransitionWorkItems(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransitionWorkItems = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrCreateSettings.TransitionWorkItems"/></em></p>
        ///   <p>Transition any work items linked to the pull request into the next logical state. (e.g. Active -&gt; Resolved).</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings EnableTransitionWorkItems(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransitionWorkItems = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrCreateSettings.TransitionWorkItems"/></em></p>
        ///   <p>Transition any work items linked to the pull request into the next logical state. (e.g. Active -&gt; Resolved).</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings DisableTransitionWorkItems(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransitionWorkItems = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrCreateSettings.TransitionWorkItems"/></em></p>
        ///   <p>Transition any work items linked to the pull request into the next logical state. (e.g. Active -&gt; Resolved).</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ToggleTransitionWorkItems(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransitionWorkItems = !toolSettings.TransitionWorkItems;
            return toolSettings;
        }
        #endregion
        #region WorkItems
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.WorkItems"/></em></p>
        ///   <p>IDs of the work items to link to the new pull request. Space separated.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetWorkItems(this AzureReposPrCreateSettings toolSettings, string workItems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkItems = workItems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.WorkItems"/></em></p>
        ///   <p>IDs of the work items to link to the new pull request. Space separated.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetWorkItems(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkItems = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetSubscription(this AzureReposPrCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetSubscription(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetDebug(this AzureReposPrCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetDebug(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetHelp(this AzureReposPrCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetHelp(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetOutput(this AzureReposPrCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetOutput(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetQuery(this AzureReposPrCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetQuery(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings SetVerbose(this AzureReposPrCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrCreateSettings ResetVerbose(this AzureReposPrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrListSettingsExtensions
    {
        #region Creator
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Creator"/></em></p>
        ///   <p>Limit results to pull requests created by this user.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetCreator(this AzureReposPrListSettings toolSettings, string creator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Creator = creator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Creator"/></em></p>
        ///   <p>Limit results to pull requests created by this user.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetCreator(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Creator = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetDetect(this AzureReposPrListSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetDetect(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings EnableDetect(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings DisableDetect(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ToggleDetect(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region IncludeLinks
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.IncludeLinks"/></em></p>
        ///   <p>Include _links for each pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetIncludeLinks(this AzureReposPrListSettings toolSettings, string includeLinks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludeLinks = includeLinks;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.IncludeLinks"/></em></p>
        ///   <p>Include _links for each pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetIncludeLinks(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludeLinks = null;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetOrg(this AzureReposPrListSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetOrg(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetProject(this AzureReposPrListSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetProject(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetRepository(this AzureReposPrListSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetRepository(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region Reviewer
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Reviewer"/></em></p>
        ///   <p>Limit results to pull requests where this user is a reviewer.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetReviewer(this AzureReposPrListSettings toolSettings, string reviewer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reviewer = reviewer;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Reviewer"/></em></p>
        ///   <p>Limit results to pull requests where this user is a reviewer.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetReviewer(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reviewer = null;
            return toolSettings;
        }
        #endregion
        #region Skip
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Skip"/></em></p>
        ///   <p>Number of pull requests to skip.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetSkip(this AzureReposPrListSettings toolSettings, int? skip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Skip = skip;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Skip"/></em></p>
        ///   <p>Number of pull requests to skip.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetSkip(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Skip = null;
            return toolSettings;
        }
        #endregion
        #region SourceBranch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.SourceBranch"/></em></p>
        ///   <p>Limit results to pull requests that originate from this source branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetSourceBranch(this AzureReposPrListSettings toolSettings, string sourceBranch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceBranch = sourceBranch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.SourceBranch"/></em></p>
        ///   <p>Limit results to pull requests that originate from this source branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetSourceBranch(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceBranch = null;
            return toolSettings;
        }
        #endregion
        #region Status
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Status"/></em></p>
        ///   <p>Limit results to pull requests with this status.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetStatus(this AzureReposPrListSettings toolSettings, ReposPrListStatus status)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = status;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Status"/></em></p>
        ///   <p>Limit results to pull requests with this status.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetStatus(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = null;
            return toolSettings;
        }
        #endregion
        #region TargetBranch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.TargetBranch"/></em></p>
        ///   <p>Limit results to pull requests that target this branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetTargetBranch(this AzureReposPrListSettings toolSettings, string targetBranch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetBranch = targetBranch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.TargetBranch"/></em></p>
        ///   <p>Limit results to pull requests that target this branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetTargetBranch(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetBranch = null;
            return toolSettings;
        }
        #endregion
        #region Top
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Top"/></em></p>
        ///   <p>Maximum number of pull requests to list.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetTop(this AzureReposPrListSettings toolSettings, int? top)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = top;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Top"/></em></p>
        ///   <p>Maximum number of pull requests to list.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetTop(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetSubscription(this AzureReposPrListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetSubscription(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetDebug(this AzureReposPrListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetDebug(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetHelp(this AzureReposPrListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetHelp(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetOutput(this AzureReposPrListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetOutput(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetQuery(this AzureReposPrListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetQuery(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings SetVerbose(this AzureReposPrListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrListSettings ResetVerbose(this AzureReposPrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrSetVoteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrSetVoteSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrSetVoteSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings SetId(this AzureReposPrSetVoteSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrSetVoteSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings ResetId(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Vote
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrSetVoteSettings.Vote"/></em></p>
        ///   <p>New vote value for the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings SetVote(this AzureReposPrSetVoteSettings toolSettings, ReposPrSetVoteVote vote)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Vote = vote;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrSetVoteSettings.Vote"/></em></p>
        ///   <p>New vote value for the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings ResetVote(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Vote = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrSetVoteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings SetDetect(this AzureReposPrSetVoteSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrSetVoteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings ResetDetect(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrSetVoteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings EnableDetect(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrSetVoteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings DisableDetect(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrSetVoteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings ToggleDetect(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrSetVoteSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings SetOrg(this AzureReposPrSetVoteSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrSetVoteSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings ResetOrg(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrSetVoteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings SetSubscription(this AzureReposPrSetVoteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrSetVoteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings ResetSubscription(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrSetVoteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings SetDebug(this AzureReposPrSetVoteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrSetVoteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings ResetDebug(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrSetVoteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings SetHelp(this AzureReposPrSetVoteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrSetVoteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings ResetHelp(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrSetVoteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings SetOutput(this AzureReposPrSetVoteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrSetVoteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings ResetOutput(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrSetVoteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings SetQuery(this AzureReposPrSetVoteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrSetVoteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings ResetQuery(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrSetVoteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings SetVerbose(this AzureReposPrSetVoteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrSetVoteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrSetVoteSettings ResetVerbose(this AzureReposPrSetVoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrShowSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrShowSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings SetId(this AzureReposPrShowSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrShowSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings ResetId(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings SetDetect(this AzureReposPrShowSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings ResetDetect(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings EnableDetect(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings DisableDetect(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings ToggleDetect(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Open
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrShowSettings.Open"/></em></p>
        ///   <p>Open the pull request in your web browser.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings SetOpen(this AzureReposPrShowSettings toolSettings, string open)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Open = open;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrShowSettings.Open"/></em></p>
        ///   <p>Open the pull request in your web browser.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings ResetOpen(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Open = null;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrShowSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings SetOrg(this AzureReposPrShowSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrShowSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings ResetOrg(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings SetSubscription(this AzureReposPrShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings ResetSubscription(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings SetDebug(this AzureReposPrShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings ResetDebug(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings SetHelp(this AzureReposPrShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings ResetHelp(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings SetOutput(this AzureReposPrShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings ResetOutput(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings SetQuery(this AzureReposPrShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings ResetQuery(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings SetVerbose(this AzureReposPrShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrShowSettings ResetVerbose(this AzureReposPrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrUpdateSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetId(this AzureReposPrUpdateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetId(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region AutoComplete
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.AutoComplete"/></em></p>
        ///   <p>Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetAutoComplete(this AzureReposPrUpdateSettings toolSettings, bool? autoComplete)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoComplete = autoComplete;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.AutoComplete"/></em></p>
        ///   <p>Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetAutoComplete(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoComplete = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrUpdateSettings.AutoComplete"/></em></p>
        ///   <p>Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings EnableAutoComplete(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoComplete = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrUpdateSettings.AutoComplete"/></em></p>
        ///   <p>Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings DisableAutoComplete(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoComplete = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrUpdateSettings.AutoComplete"/></em></p>
        ///   <p>Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ToggleAutoComplete(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoComplete = !toolSettings.AutoComplete;
            return toolSettings;
        }
        #endregion
        #region BypassPolicy
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.BypassPolicy"/></em></p>
        ///   <p>Bypass required policies (if any) and completes the pull request once it can be merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetBypassPolicy(this AzureReposPrUpdateSettings toolSettings, bool? bypassPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicy = bypassPolicy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.BypassPolicy"/></em></p>
        ///   <p>Bypass required policies (if any) and completes the pull request once it can be merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetBypassPolicy(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicy = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrUpdateSettings.BypassPolicy"/></em></p>
        ///   <p>Bypass required policies (if any) and completes the pull request once it can be merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings EnableBypassPolicy(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicy = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrUpdateSettings.BypassPolicy"/></em></p>
        ///   <p>Bypass required policies (if any) and completes the pull request once it can be merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings DisableBypassPolicy(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicy = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrUpdateSettings.BypassPolicy"/></em></p>
        ///   <p>Bypass required policies (if any) and completes the pull request once it can be merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ToggleBypassPolicy(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicy = !toolSettings.BypassPolicy;
            return toolSettings;
        }
        #endregion
        #region BypassPolicyReason
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.BypassPolicyReason"/></em></p>
        ///   <p>Reason for bypassing the required policies.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetBypassPolicyReason(this AzureReposPrUpdateSettings toolSettings, string bypassPolicyReason)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicyReason = bypassPolicyReason;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.BypassPolicyReason"/></em></p>
        ///   <p>Reason for bypassing the required policies.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetBypassPolicyReason(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassPolicyReason = null;
            return toolSettings;
        }
        #endregion
        #region DeleteSourceBranch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.DeleteSourceBranch"/></em></p>
        ///   <p>Delete the source branch after the pull request has been completed and merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetDeleteSourceBranch(this AzureReposPrUpdateSettings toolSettings, bool? deleteSourceBranch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSourceBranch = deleteSourceBranch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.DeleteSourceBranch"/></em></p>
        ///   <p>Delete the source branch after the pull request has been completed and merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetDeleteSourceBranch(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSourceBranch = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrUpdateSettings.DeleteSourceBranch"/></em></p>
        ///   <p>Delete the source branch after the pull request has been completed and merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings EnableDeleteSourceBranch(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSourceBranch = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrUpdateSettings.DeleteSourceBranch"/></em></p>
        ///   <p>Delete the source branch after the pull request has been completed and merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings DisableDeleteSourceBranch(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSourceBranch = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrUpdateSettings.DeleteSourceBranch"/></em></p>
        ///   <p>Delete the source branch after the pull request has been completed and merged into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ToggleDeleteSourceBranch(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSourceBranch = !toolSettings.DeleteSourceBranch;
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Description"/></em></p>
        ///   <p>New description for the pull request.  Can include markdown.  Each value sent to this arg will be a new line. For example: --description "First Line" "Second Line".</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetDescription(this AzureReposPrUpdateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Description"/></em></p>
        ///   <p>New description for the pull request.  Can include markdown.  Each value sent to this arg will be a new line. For example: --description "First Line" "Second Line".</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetDescription(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetDetect(this AzureReposPrUpdateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetDetect(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings EnableDetect(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings DisableDetect(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ToggleDetect(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Draft
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Draft"/></em></p>
        ///   <p>Publish the PR or convert to draft mode.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetDraft(this AzureReposPrUpdateSettings toolSettings, bool? draft)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Draft = draft;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Draft"/></em></p>
        ///   <p>Publish the PR or convert to draft mode.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetDraft(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Draft = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrUpdateSettings.Draft"/></em></p>
        ///   <p>Publish the PR or convert to draft mode.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings EnableDraft(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Draft = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrUpdateSettings.Draft"/></em></p>
        ///   <p>Publish the PR or convert to draft mode.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings DisableDraft(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Draft = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrUpdateSettings.Draft"/></em></p>
        ///   <p>Publish the PR or convert to draft mode.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ToggleDraft(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Draft = !toolSettings.Draft;
            return toolSettings;
        }
        #endregion
        #region MergeCommitMessage
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.MergeCommitMessage"/></em></p>
        ///   <p>Message displayed when commits are merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetMergeCommitMessage(this AzureReposPrUpdateSettings toolSettings, string mergeCommitMessage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MergeCommitMessage = mergeCommitMessage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.MergeCommitMessage"/></em></p>
        ///   <p>Message displayed when commits are merged.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetMergeCommitMessage(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MergeCommitMessage = null;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetOrg(this AzureReposPrUpdateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetOrg(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Squash
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Squash"/></em></p>
        ///   <p>Squash the commits in the source branch when merging into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetSquash(this AzureReposPrUpdateSettings toolSettings, bool? squash)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = squash;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Squash"/></em></p>
        ///   <p>Squash the commits in the source branch when merging into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetSquash(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrUpdateSettings.Squash"/></em></p>
        ///   <p>Squash the commits in the source branch when merging into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings EnableSquash(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrUpdateSettings.Squash"/></em></p>
        ///   <p>Squash the commits in the source branch when merging into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings DisableSquash(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrUpdateSettings.Squash"/></em></p>
        ///   <p>Squash the commits in the source branch when merging into the target branch.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ToggleSquash(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = !toolSettings.Squash;
            return toolSettings;
        }
        #endregion
        #region Status
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Status"/></em></p>
        ///   <p>Set the new state of pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetStatus(this AzureReposPrUpdateSettings toolSettings, ReposPrUpdateStatus status)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = status;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Status"/></em></p>
        ///   <p>Set the new state of pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetStatus(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = null;
            return toolSettings;
        }
        #endregion
        #region Title
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Title"/></em></p>
        ///   <p>New title for the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetTitle(this AzureReposPrUpdateSettings toolSettings, string title)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Title = title;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Title"/></em></p>
        ///   <p>New title for the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetTitle(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Title = null;
            return toolSettings;
        }
        #endregion
        #region TransitionWorkItems
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.TransitionWorkItems"/></em></p>
        ///   <p>Transition any work items linked to the pull request into the next logical state. (e.g. Active -&gt; Resolved).</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetTransitionWorkItems(this AzureReposPrUpdateSettings toolSettings, bool? transitionWorkItems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransitionWorkItems = transitionWorkItems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.TransitionWorkItems"/></em></p>
        ///   <p>Transition any work items linked to the pull request into the next logical state. (e.g. Active -&gt; Resolved).</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetTransitionWorkItems(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransitionWorkItems = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrUpdateSettings.TransitionWorkItems"/></em></p>
        ///   <p>Transition any work items linked to the pull request into the next logical state. (e.g. Active -&gt; Resolved).</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings EnableTransitionWorkItems(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransitionWorkItems = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrUpdateSettings.TransitionWorkItems"/></em></p>
        ///   <p>Transition any work items linked to the pull request into the next logical state. (e.g. Active -&gt; Resolved).</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings DisableTransitionWorkItems(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransitionWorkItems = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrUpdateSettings.TransitionWorkItems"/></em></p>
        ///   <p>Transition any work items linked to the pull request into the next logical state. (e.g. Active -&gt; Resolved).</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ToggleTransitionWorkItems(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransitionWorkItems = !toolSettings.TransitionWorkItems;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetSubscription(this AzureReposPrUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetSubscription(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetDebug(this AzureReposPrUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetDebug(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetHelp(this AzureReposPrUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetHelp(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetOutput(this AzureReposPrUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetOutput(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetQuery(this AzureReposPrUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetQuery(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings SetVerbose(this AzureReposPrUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrUpdateSettings ResetVerbose(this AzureReposPrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposImportCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposImportCreateSettingsExtensions
    {
        #region GitSourceUrl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.GitSourceUrl"/></em></p>
        ///   <p>Url of the source git repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetGitSourceUrl(this AzureReposImportCreateSettings toolSettings, string gitSourceUrl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GitSourceUrl = gitSourceUrl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.GitSourceUrl"/></em></p>
        ///   <p>Url of the source git repository.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetGitSourceUrl(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GitSourceUrl = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetDetect(this AzureReposImportCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetDetect(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposImportCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings EnableDetect(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposImportCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings DisableDetect(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposImportCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ToggleDetect(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region GitServiceEndpointId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.GitServiceEndpointId"/></em></p>
        ///   <p>Service Endpoint for connection to external endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetGitServiceEndpointId(this AzureReposImportCreateSettings toolSettings, string gitServiceEndpointId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GitServiceEndpointId = gitServiceEndpointId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.GitServiceEndpointId"/></em></p>
        ///   <p>Service Endpoint for connection to external endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetGitServiceEndpointId(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GitServiceEndpointId = null;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetOrg(this AzureReposImportCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetOrg(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetProject(this AzureReposImportCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetProject(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository to create the import request in.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetRepository(this AzureReposImportCreateSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.Repository"/></em></p>
        ///   <p>Name or ID of the repository to create the import request in.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetRepository(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region RequiresAuthorization
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.RequiresAuthorization"/></em></p>
        ///   <p>Flag to tell if source git repository is private.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetRequiresAuthorization(this AzureReposImportCreateSettings toolSettings, string requiresAuthorization)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiresAuthorization = requiresAuthorization;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.RequiresAuthorization"/></em></p>
        ///   <p>Flag to tell if source git repository is private.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetRequiresAuthorization(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiresAuthorization = null;
            return toolSettings;
        }
        #endregion
        #region UserName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.UserName"/></em></p>
        ///   <p>User name in case source git repository is private.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetUserName(this AzureReposImportCreateSettings toolSettings, string userName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UserName = userName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.UserName"/></em></p>
        ///   <p>User name in case source git repository is private.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetUserName(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UserName = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetSubscription(this AzureReposImportCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetSubscription(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetDebug(this AzureReposImportCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetDebug(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetHelp(this AzureReposImportCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetHelp(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetOutput(this AzureReposImportCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetOutput(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetQuery(this AzureReposImportCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetQuery(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposImportCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings SetVerbose(this AzureReposImportCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposImportCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposImportCreateSettings ResetVerbose(this AzureReposImportCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyCreateSettingsExtensions
    {
        #region Config
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCreateSettings.Config"/></em></p>
        ///   <p>Local file path for configuration file. Please use / backslash when typing in directory path.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings SetConfig(this AzureReposPolicyCreateSettings toolSettings, string config)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Config = config;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCreateSettings.Config"/></em></p>
        ///   <p>Local file path for configuration file. Please use / backslash when typing in directory path.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings ResetConfig(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Config = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings SetDetect(this AzureReposPolicyCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings ResetDetect(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings EnableDetect(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings DisableDetect(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings ToggleDetect(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings SetOrg(this AzureReposPolicyCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings ResetOrg(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings SetProject(this AzureReposPolicyCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings ResetProject(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings SetSubscription(this AzureReposPolicyCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings ResetSubscription(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings SetDebug(this AzureReposPolicyCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings ResetDebug(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings SetHelp(this AzureReposPolicyCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings ResetHelp(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings SetOutput(this AzureReposPolicyCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings ResetOutput(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings SetQuery(this AzureReposPolicyCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings ResetQuery(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings SetVerbose(this AzureReposPolicyCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCreateSettings ResetVerbose(this AzureReposPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyDeleteSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyDeleteSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings SetId(this AzureReposPolicyDeleteSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyDeleteSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings ResetId(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings SetDetect(this AzureReposPolicyDeleteSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings ResetDetect(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings EnableDetect(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings DisableDetect(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyDeleteSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings ToggleDetect(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyDeleteSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings SetOrg(this AzureReposPolicyDeleteSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyDeleteSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings ResetOrg(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyDeleteSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings SetProject(this AzureReposPolicyDeleteSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyDeleteSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings ResetProject(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyDeleteSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings SetYes(this AzureReposPolicyDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyDeleteSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings ResetYes(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings SetSubscription(this AzureReposPolicyDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings ResetSubscription(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings SetDebug(this AzureReposPolicyDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings ResetDebug(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings SetHelp(this AzureReposPolicyDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings ResetHelp(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings SetOutput(this AzureReposPolicyDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings ResetOutput(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings SetQuery(this AzureReposPolicyDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings ResetQuery(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings SetVerbose(this AzureReposPolicyDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyDeleteSettings ResetVerbose(this AzureReposPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyListSettingsExtensions
    {
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyListSettings.Branch"/></em></p>
        ///   <p>Branch name to filter results by exact match of branch name. The --repository-id parameter is required to use the branch filter. For example: --branch master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings SetBranch(this AzureReposPolicyListSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyListSettings.Branch"/></em></p>
        ///   <p>Branch name to filter results by exact match of branch name. The --repository-id parameter is required to use the branch filter. For example: --branch master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings ResetBranch(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings SetDetect(this AzureReposPolicyListSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings ResetDetect(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings EnableDetect(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings DisableDetect(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings ToggleDetect(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings SetOrg(this AzureReposPolicyListSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings ResetOrg(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyListSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings SetProject(this AzureReposPolicyListSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyListSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings ResetProject(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyListSettings.RepositoryId"/></em></p>
        ///   <p>ID of the repository to filter results by exact match of the repository ID. For example --repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings SetRepositoryId(this AzureReposPolicyListSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyListSettings.RepositoryId"/></em></p>
        ///   <p>ID of the repository to filter results by exact match of the repository ID. For example --repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings ResetRepositoryId(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings SetSubscription(this AzureReposPolicyListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings ResetSubscription(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings SetDebug(this AzureReposPolicyListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings ResetDebug(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings SetHelp(this AzureReposPolicyListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings ResetHelp(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings SetOutput(this AzureReposPolicyListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings ResetOutput(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings SetQuery(this AzureReposPolicyListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings ResetQuery(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings SetVerbose(this AzureReposPolicyListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyListSettings ResetVerbose(this AzureReposPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyShowSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyShowSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings SetId(this AzureReposPolicyShowSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyShowSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings ResetId(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings SetDetect(this AzureReposPolicyShowSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings ResetDetect(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings EnableDetect(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings DisableDetect(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyShowSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings ToggleDetect(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyShowSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings SetOrg(this AzureReposPolicyShowSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyShowSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings ResetOrg(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyShowSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings SetProject(this AzureReposPolicyShowSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyShowSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings ResetProject(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings SetSubscription(this AzureReposPolicyShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings ResetSubscription(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings SetDebug(this AzureReposPolicyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings ResetDebug(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings SetHelp(this AzureReposPolicyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings ResetHelp(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings SetOutput(this AzureReposPolicyShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings ResetOutput(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings SetQuery(this AzureReposPolicyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings ResetQuery(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings SetVerbose(this AzureReposPolicyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyShowSettings ResetVerbose(this AzureReposPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyUpdateSettingsExtensions
    {
        #region Config
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyUpdateSettings.Config"/></em></p>
        ///   <p>Local file path for configuration file. Please use / backslash when typing in directory path.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings SetConfig(this AzureReposPolicyUpdateSettings toolSettings, string config)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Config = config;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyUpdateSettings.Config"/></em></p>
        ///   <p>Local file path for configuration file. Please use / backslash when typing in directory path.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings ResetConfig(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Config = null;
            return toolSettings;
        }
        #endregion
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings SetId(this AzureReposPolicyUpdateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings ResetId(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings SetDetect(this AzureReposPolicyUpdateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings ResetDetect(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings EnableDetect(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings DisableDetect(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings ToggleDetect(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings SetOrg(this AzureReposPolicyUpdateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings ResetOrg(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings SetProject(this AzureReposPolicyUpdateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings ResetProject(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings SetSubscription(this AzureReposPolicyUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings ResetSubscription(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings SetDebug(this AzureReposPolicyUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings ResetDebug(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings SetHelp(this AzureReposPolicyUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings ResetHelp(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings SetOutput(this AzureReposPolicyUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings ResetOutput(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings SetQuery(this AzureReposPolicyUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings ResetQuery(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings SetVerbose(this AzureReposPolicyUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyUpdateSettings ResetVerbose(this AzureReposPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrReviewerAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrReviewerAddSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerAddSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings SetId(this AzureReposPrReviewerAddSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerAddSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings ResetId(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Reviewers
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerAddSettings.Reviewers"/></em></p>
        ///   <p>Users or groups to include as reviewers on a pull request. Space separated.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings SetReviewers(this AzureReposPrReviewerAddSettings toolSettings, string reviewers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reviewers = reviewers;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerAddSettings.Reviewers"/></em></p>
        ///   <p>Users or groups to include as reviewers on a pull request. Space separated.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings ResetReviewers(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reviewers = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerAddSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings SetDetect(this AzureReposPrReviewerAddSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerAddSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings ResetDetect(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrReviewerAddSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings EnableDetect(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrReviewerAddSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings DisableDetect(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrReviewerAddSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings ToggleDetect(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerAddSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings SetOrg(this AzureReposPrReviewerAddSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerAddSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings ResetOrg(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings SetSubscription(this AzureReposPrReviewerAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings ResetSubscription(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings SetDebug(this AzureReposPrReviewerAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings ResetDebug(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings SetHelp(this AzureReposPrReviewerAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings ResetHelp(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings SetOutput(this AzureReposPrReviewerAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings ResetOutput(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings SetQuery(this AzureReposPrReviewerAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings ResetQuery(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings SetVerbose(this AzureReposPrReviewerAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerAddSettings ResetVerbose(this AzureReposPrReviewerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrReviewerListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrReviewerListSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerListSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings SetId(this AzureReposPrReviewerListSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerListSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings ResetId(this AzureReposPrReviewerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings SetDetect(this AzureReposPrReviewerListSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings ResetDetect(this AzureReposPrReviewerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrReviewerListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings EnableDetect(this AzureReposPrReviewerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrReviewerListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings DisableDetect(this AzureReposPrReviewerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrReviewerListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings ToggleDetect(this AzureReposPrReviewerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings SetOrg(this AzureReposPrReviewerListSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings ResetOrg(this AzureReposPrReviewerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings SetSubscription(this AzureReposPrReviewerListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings ResetSubscription(this AzureReposPrReviewerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings SetDebug(this AzureReposPrReviewerListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings ResetDebug(this AzureReposPrReviewerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings SetHelp(this AzureReposPrReviewerListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings ResetHelp(this AzureReposPrReviewerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings SetOutput(this AzureReposPrReviewerListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings ResetOutput(this AzureReposPrReviewerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings SetQuery(this AzureReposPrReviewerListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings ResetQuery(this AzureReposPrReviewerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings SetVerbose(this AzureReposPrReviewerListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerListSettings ResetVerbose(this AzureReposPrReviewerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrReviewerRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrReviewerRemoveSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerRemoveSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings SetId(this AzureReposPrReviewerRemoveSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerRemoveSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings ResetId(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Reviewers
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerRemoveSettings.Reviewers"/></em></p>
        ///   <p>Users or groups to remove as reviewers on a pull request. Space separated.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings SetReviewers(this AzureReposPrReviewerRemoveSettings toolSettings, string reviewers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reviewers = reviewers;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerRemoveSettings.Reviewers"/></em></p>
        ///   <p>Users or groups to remove as reviewers on a pull request. Space separated.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings ResetReviewers(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reviewers = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerRemoveSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings SetDetect(this AzureReposPrReviewerRemoveSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerRemoveSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings ResetDetect(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrReviewerRemoveSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings EnableDetect(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrReviewerRemoveSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings DisableDetect(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrReviewerRemoveSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings ToggleDetect(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerRemoveSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings SetOrg(this AzureReposPrReviewerRemoveSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerRemoveSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings ResetOrg(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings SetSubscription(this AzureReposPrReviewerRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings ResetSubscription(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings SetDebug(this AzureReposPrReviewerRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings ResetDebug(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings SetHelp(this AzureReposPrReviewerRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings ResetHelp(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings SetOutput(this AzureReposPrReviewerRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings ResetOutput(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings SetQuery(this AzureReposPrReviewerRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings ResetQuery(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrReviewerRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings SetVerbose(this AzureReposPrReviewerRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrReviewerRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrReviewerRemoveSettings ResetVerbose(this AzureReposPrReviewerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrWorkItemAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrWorkItemAddSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemAddSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings SetId(this AzureReposPrWorkItemAddSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemAddSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings ResetId(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region WorkItems
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemAddSettings.WorkItems"/></em></p>
        ///   <p>IDs of the work items to link. Space separated.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings SetWorkItems(this AzureReposPrWorkItemAddSettings toolSettings, string workItems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkItems = workItems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemAddSettings.WorkItems"/></em></p>
        ///   <p>IDs of the work items to link. Space separated.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings ResetWorkItems(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkItems = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemAddSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings SetDetect(this AzureReposPrWorkItemAddSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemAddSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings ResetDetect(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrWorkItemAddSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings EnableDetect(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrWorkItemAddSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings DisableDetect(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrWorkItemAddSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings ToggleDetect(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemAddSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings SetOrg(this AzureReposPrWorkItemAddSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemAddSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings ResetOrg(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings SetSubscription(this AzureReposPrWorkItemAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings ResetSubscription(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings SetDebug(this AzureReposPrWorkItemAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings ResetDebug(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings SetHelp(this AzureReposPrWorkItemAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings ResetHelp(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings SetOutput(this AzureReposPrWorkItemAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings ResetOutput(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings SetQuery(this AzureReposPrWorkItemAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings ResetQuery(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings SetVerbose(this AzureReposPrWorkItemAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemAddSettings ResetVerbose(this AzureReposPrWorkItemAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrWorkItemListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrWorkItemListSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemListSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings SetId(this AzureReposPrWorkItemListSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemListSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings ResetId(this AzureReposPrWorkItemListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings SetDetect(this AzureReposPrWorkItemListSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings ResetDetect(this AzureReposPrWorkItemListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrWorkItemListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings EnableDetect(this AzureReposPrWorkItemListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrWorkItemListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings DisableDetect(this AzureReposPrWorkItemListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrWorkItemListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings ToggleDetect(this AzureReposPrWorkItemListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings SetOrg(this AzureReposPrWorkItemListSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings ResetOrg(this AzureReposPrWorkItemListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings SetSubscription(this AzureReposPrWorkItemListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings ResetSubscription(this AzureReposPrWorkItemListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings SetDebug(this AzureReposPrWorkItemListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings ResetDebug(this AzureReposPrWorkItemListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings SetHelp(this AzureReposPrWorkItemListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings ResetHelp(this AzureReposPrWorkItemListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings SetOutput(this AzureReposPrWorkItemListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings ResetOutput(this AzureReposPrWorkItemListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings SetQuery(this AzureReposPrWorkItemListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings ResetQuery(this AzureReposPrWorkItemListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings SetVerbose(this AzureReposPrWorkItemListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemListSettings ResetVerbose(this AzureReposPrWorkItemListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrWorkItemRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrWorkItemRemoveSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemRemoveSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings SetId(this AzureReposPrWorkItemRemoveSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemRemoveSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings ResetId(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region WorkItems
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemRemoveSettings.WorkItems"/></em></p>
        ///   <p>IDs of the work items to unlink. Space separated.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings SetWorkItems(this AzureReposPrWorkItemRemoveSettings toolSettings, string workItems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkItems = workItems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemRemoveSettings.WorkItems"/></em></p>
        ///   <p>IDs of the work items to unlink. Space separated.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings ResetWorkItems(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkItems = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemRemoveSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings SetDetect(this AzureReposPrWorkItemRemoveSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemRemoveSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings ResetDetect(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrWorkItemRemoveSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings EnableDetect(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrWorkItemRemoveSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings DisableDetect(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrWorkItemRemoveSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings ToggleDetect(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemRemoveSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings SetOrg(this AzureReposPrWorkItemRemoveSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemRemoveSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings ResetOrg(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings SetSubscription(this AzureReposPrWorkItemRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings ResetSubscription(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings SetDebug(this AzureReposPrWorkItemRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings ResetDebug(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings SetHelp(this AzureReposPrWorkItemRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings ResetHelp(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings SetOutput(this AzureReposPrWorkItemRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings ResetOutput(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings SetQuery(this AzureReposPrWorkItemRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings ResetQuery(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrWorkItemRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings SetVerbose(this AzureReposPrWorkItemRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrWorkItemRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrWorkItemRemoveSettings ResetVerbose(this AzureReposPrWorkItemRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrPolicyListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrPolicyListSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyListSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings SetId(this AzureReposPrPolicyListSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyListSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings ResetId(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings SetDetect(this AzureReposPrPolicyListSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings ResetDetect(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrPolicyListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings EnableDetect(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrPolicyListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings DisableDetect(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrPolicyListSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings ToggleDetect(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings SetOrg(this AzureReposPrPolicyListSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyListSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings ResetOrg(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Skip
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyListSettings.Skip"/></em></p>
        ///   <p>Number of policies to skip.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings SetSkip(this AzureReposPrPolicyListSettings toolSettings, int? skip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Skip = skip;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyListSettings.Skip"/></em></p>
        ///   <p>Number of policies to skip.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings ResetSkip(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Skip = null;
            return toolSettings;
        }
        #endregion
        #region Top
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyListSettings.Top"/></em></p>
        ///   <p>Maximum number of policies to list.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings SetTop(this AzureReposPrPolicyListSettings toolSettings, int? top)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = top;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyListSettings.Top"/></em></p>
        ///   <p>Maximum number of policies to list.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings ResetTop(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings SetSubscription(this AzureReposPrPolicyListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings ResetSubscription(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings SetDebug(this AzureReposPrPolicyListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings ResetDebug(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings SetHelp(this AzureReposPrPolicyListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings ResetHelp(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings SetOutput(this AzureReposPrPolicyListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings ResetOutput(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings SetQuery(this AzureReposPrPolicyListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings ResetQuery(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings SetVerbose(this AzureReposPrPolicyListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyListSettings ResetVerbose(this AzureReposPrPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPrPolicyQueueSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPrPolicyQueueSettingsExtensions
    {
        #region EvaluationId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyQueueSettings.EvaluationId"/></em></p>
        ///   <p>ID of the policy evaluation to queue.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings SetEvaluationId(this AzureReposPrPolicyQueueSettings toolSettings, string evaluationId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EvaluationId = evaluationId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyQueueSettings.EvaluationId"/></em></p>
        ///   <p>ID of the policy evaluation to queue.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings ResetEvaluationId(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EvaluationId = null;
            return toolSettings;
        }
        #endregion
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyQueueSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings SetId(this AzureReposPrPolicyQueueSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyQueueSettings.Id"/></em></p>
        ///   <p>ID of the pull request.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings ResetId(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyQueueSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings SetDetect(this AzureReposPrPolicyQueueSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyQueueSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings ResetDetect(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPrPolicyQueueSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings EnableDetect(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPrPolicyQueueSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings DisableDetect(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPrPolicyQueueSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings ToggleDetect(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyQueueSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings SetOrg(this AzureReposPrPolicyQueueSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyQueueSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings ResetOrg(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyQueueSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings SetSubscription(this AzureReposPrPolicyQueueSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyQueueSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings ResetSubscription(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyQueueSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings SetDebug(this AzureReposPrPolicyQueueSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyQueueSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings ResetDebug(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyQueueSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings SetHelp(this AzureReposPrPolicyQueueSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyQueueSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings ResetHelp(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyQueueSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings SetOutput(this AzureReposPrPolicyQueueSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyQueueSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings ResetOutput(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyQueueSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings SetQuery(this AzureReposPrPolicyQueueSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyQueueSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings ResetQuery(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPrPolicyQueueSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings SetVerbose(this AzureReposPrPolicyQueueSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPrPolicyQueueSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPrPolicyQueueSettings ResetVerbose(this AzureReposPrPolicyQueueSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyWorkItemLinkingCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyWorkItemLinkingCreateSettingsExtensions
    {
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetBlocking(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetBlocking(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings EnableBlocking(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings DisableBlocking(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ToggleBlocking(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetBranch(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetBranch(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetEnabled(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetEnabled(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings EnableEnabled(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings DisableEnabled(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ToggleEnabled(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetRepositoryId(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetRepositoryId(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region BranchMatchType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetBranchMatchType(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, ReposPolicyWorkItemLinkingBranchMatchType branchMatchType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = branchMatchType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetBranchMatchType(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetDetect(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetDetect(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings EnableDetect(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings DisableDetect(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ToggleDetect(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetOrg(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetOrg(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetProject(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetProject(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetSubscription(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetSubscription(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetDebug(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetDebug(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetHelp(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetHelp(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetOutput(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetOutput(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetQuery(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetQuery(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings SetVerbose(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingCreateSettings ResetVerbose(this AzureReposPolicyWorkItemLinkingCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyWorkItemLinkingUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyWorkItemLinkingUpdateSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetId(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetId(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetBlocking(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetBlocking(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings EnableBlocking(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings DisableBlocking(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ToggleBlocking(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetBranch(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetBranch(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region BranchMatchType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetBranchMatchType(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, ReposPolicyWorkItemLinkingBranchMatchType branchMatchType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = branchMatchType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetBranchMatchType(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetDetect(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetDetect(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings EnableDetect(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings DisableDetect(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ToggleDetect(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetEnabled(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetEnabled(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings EnableEnabled(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings DisableEnabled(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ToggleEnabled(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetOrg(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetOrg(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetProject(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetProject(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetRepositoryId(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetRepositoryId(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetSubscription(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetSubscription(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetDebug(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetDebug(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetHelp(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetHelp(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetOutput(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetOutput(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetQuery(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetQuery(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings SetVerbose(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyWorkItemLinkingUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyWorkItemLinkingUpdateSettings ResetVerbose(this AzureReposPolicyWorkItemLinkingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyCaseEnforcementCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyCaseEnforcementCreateSettingsExtensions
    {
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings SetBlocking(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ResetBlocking(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings EnableBlocking(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings DisableBlocking(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ToggleBlocking(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings SetEnabled(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ResetEnabled(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings EnableEnabled(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings DisableEnabled(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ToggleEnabled(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings SetRepositoryId(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ResetRepositoryId(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings SetDetect(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ResetDetect(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings EnableDetect(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings DisableDetect(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ToggleDetect(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings SetOrg(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ResetOrg(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings SetProject(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ResetProject(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings SetSubscription(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ResetSubscription(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings SetDebug(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ResetDebug(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings SetHelp(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ResetHelp(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings SetOutput(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ResetOutput(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings SetQuery(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ResetQuery(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings SetVerbose(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementCreateSettings ResetVerbose(this AzureReposPolicyCaseEnforcementCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyCaseEnforcementUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyCaseEnforcementUpdateSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetId(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetId(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetBlocking(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetBlocking(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings EnableBlocking(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings DisableBlocking(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ToggleBlocking(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetDetect(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetDetect(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings EnableDetect(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings DisableDetect(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ToggleDetect(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetEnabled(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetEnabled(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings EnableEnabled(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings DisableEnabled(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ToggleEnabled(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetOrg(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetOrg(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetProject(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetProject(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetRepositoryId(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetRepositoryId(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetSubscription(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetSubscription(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetDebug(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetDebug(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetHelp(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetHelp(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetOutput(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetOutput(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetQuery(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetQuery(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings SetVerbose(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCaseEnforcementUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCaseEnforcementUpdateSettings ResetVerbose(this AzureReposPolicyCaseEnforcementUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyApproverCountCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyApproverCountCreateSettingsExtensions
    {
        #region AllowDownvotes
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.AllowDownvotes"/></em></p>
        ///   <p>Whether to allow downvotes or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetAllowDownvotes(this AzureReposPolicyApproverCountCreateSettings toolSettings, bool? allowDownvotes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowDownvotes = allowDownvotes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.AllowDownvotes"/></em></p>
        ///   <p>Whether to allow downvotes or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetAllowDownvotes(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowDownvotes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyApproverCountCreateSettings.AllowDownvotes"/></em></p>
        ///   <p>Whether to allow downvotes or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings EnableAllowDownvotes(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowDownvotes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyApproverCountCreateSettings.AllowDownvotes"/></em></p>
        ///   <p>Whether to allow downvotes or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings DisableAllowDownvotes(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowDownvotes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyApproverCountCreateSettings.AllowDownvotes"/></em></p>
        ///   <p>Whether to allow downvotes or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ToggleAllowDownvotes(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowDownvotes = !toolSettings.AllowDownvotes;
            return toolSettings;
        }
        #endregion
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetBlocking(this AzureReposPolicyApproverCountCreateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetBlocking(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyApproverCountCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings EnableBlocking(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyApproverCountCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings DisableBlocking(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyApproverCountCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ToggleBlocking(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetBranch(this AzureReposPolicyApproverCountCreateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetBranch(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region CreatorVoteCounts
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.CreatorVoteCounts"/></em></p>
        ///   <p>Whether the creator's vote counts or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetCreatorVoteCounts(this AzureReposPolicyApproverCountCreateSettings toolSettings, bool? creatorVoteCounts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreatorVoteCounts = creatorVoteCounts;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.CreatorVoteCounts"/></em></p>
        ///   <p>Whether the creator's vote counts or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetCreatorVoteCounts(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreatorVoteCounts = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyApproverCountCreateSettings.CreatorVoteCounts"/></em></p>
        ///   <p>Whether the creator's vote counts or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings EnableCreatorVoteCounts(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreatorVoteCounts = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyApproverCountCreateSettings.CreatorVoteCounts"/></em></p>
        ///   <p>Whether the creator's vote counts or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings DisableCreatorVoteCounts(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreatorVoteCounts = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyApproverCountCreateSettings.CreatorVoteCounts"/></em></p>
        ///   <p>Whether the creator's vote counts or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ToggleCreatorVoteCounts(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreatorVoteCounts = !toolSettings.CreatorVoteCounts;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetEnabled(this AzureReposPolicyApproverCountCreateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetEnabled(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyApproverCountCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings EnableEnabled(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyApproverCountCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings DisableEnabled(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyApproverCountCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ToggleEnabled(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region MinimumApproverCount
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.MinimumApproverCount"/></em></p>
        ///   <p>Minimum number of approvers required. For example: 2.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetMinimumApproverCount(this AzureReposPolicyApproverCountCreateSettings toolSettings, int? minimumApproverCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MinimumApproverCount = minimumApproverCount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.MinimumApproverCount"/></em></p>
        ///   <p>Minimum number of approvers required. For example: 2.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetMinimumApproverCount(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MinimumApproverCount = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetRepositoryId(this AzureReposPolicyApproverCountCreateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetRepositoryId(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region ResetOnSourcePush
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.ResetOnSourcePush"/></em></p>
        ///   <p>Whether to reset source on push.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetResetOnSourcePush(this AzureReposPolicyApproverCountCreateSettings toolSettings, bool? resetOnSourcePush)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResetOnSourcePush = resetOnSourcePush;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.ResetOnSourcePush"/></em></p>
        ///   <p>Whether to reset source on push.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetResetOnSourcePush(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResetOnSourcePush = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyApproverCountCreateSettings.ResetOnSourcePush"/></em></p>
        ///   <p>Whether to reset source on push.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings EnableResetOnSourcePush(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResetOnSourcePush = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyApproverCountCreateSettings.ResetOnSourcePush"/></em></p>
        ///   <p>Whether to reset source on push.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings DisableResetOnSourcePush(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResetOnSourcePush = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyApproverCountCreateSettings.ResetOnSourcePush"/></em></p>
        ///   <p>Whether to reset source on push.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ToggleResetOnSourcePush(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResetOnSourcePush = !toolSettings.ResetOnSourcePush;
            return toolSettings;
        }
        #endregion
        #region BranchMatchType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetBranchMatchType(this AzureReposPolicyApproverCountCreateSettings toolSettings, ReposPolicyWorkItemLinkingBranchMatchType branchMatchType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = branchMatchType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetBranchMatchType(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetDetect(this AzureReposPolicyApproverCountCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetDetect(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyApproverCountCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings EnableDetect(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyApproverCountCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings DisableDetect(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyApproverCountCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ToggleDetect(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetOrg(this AzureReposPolicyApproverCountCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetOrg(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetProject(this AzureReposPolicyApproverCountCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetProject(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetSubscription(this AzureReposPolicyApproverCountCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetSubscription(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetDebug(this AzureReposPolicyApproverCountCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetDebug(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetHelp(this AzureReposPolicyApproverCountCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetHelp(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetOutput(this AzureReposPolicyApproverCountCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetOutput(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetQuery(this AzureReposPolicyApproverCountCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetQuery(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings SetVerbose(this AzureReposPolicyApproverCountCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountCreateSettings ResetVerbose(this AzureReposPolicyApproverCountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyApproverCountUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyApproverCountUpdateSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetId(this AzureReposPolicyApproverCountUpdateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetId(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region AllowDownvotes
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.AllowDownvotes"/></em></p>
        ///   <p>Whether to allow downvotes or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetAllowDownvotes(this AzureReposPolicyApproverCountUpdateSettings toolSettings, bool? allowDownvotes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowDownvotes = allowDownvotes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.AllowDownvotes"/></em></p>
        ///   <p>Whether to allow downvotes or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetAllowDownvotes(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowDownvotes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyApproverCountUpdateSettings.AllowDownvotes"/></em></p>
        ///   <p>Whether to allow downvotes or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings EnableAllowDownvotes(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowDownvotes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyApproverCountUpdateSettings.AllowDownvotes"/></em></p>
        ///   <p>Whether to allow downvotes or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings DisableAllowDownvotes(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowDownvotes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyApproverCountUpdateSettings.AllowDownvotes"/></em></p>
        ///   <p>Whether to allow downvotes or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ToggleAllowDownvotes(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowDownvotes = !toolSettings.AllowDownvotes;
            return toolSettings;
        }
        #endregion
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetBlocking(this AzureReposPolicyApproverCountUpdateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetBlocking(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyApproverCountUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings EnableBlocking(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyApproverCountUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings DisableBlocking(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyApproverCountUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ToggleBlocking(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetBranch(this AzureReposPolicyApproverCountUpdateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetBranch(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region BranchMatchType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetBranchMatchType(this AzureReposPolicyApproverCountUpdateSettings toolSettings, ReposPolicyWorkItemLinkingBranchMatchType branchMatchType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = branchMatchType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetBranchMatchType(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = null;
            return toolSettings;
        }
        #endregion
        #region CreatorVoteCounts
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.CreatorVoteCounts"/></em></p>
        ///   <p>Whether the creator's vote counts or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetCreatorVoteCounts(this AzureReposPolicyApproverCountUpdateSettings toolSettings, bool? creatorVoteCounts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreatorVoteCounts = creatorVoteCounts;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.CreatorVoteCounts"/></em></p>
        ///   <p>Whether the creator's vote counts or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetCreatorVoteCounts(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreatorVoteCounts = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyApproverCountUpdateSettings.CreatorVoteCounts"/></em></p>
        ///   <p>Whether the creator's vote counts or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings EnableCreatorVoteCounts(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreatorVoteCounts = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyApproverCountUpdateSettings.CreatorVoteCounts"/></em></p>
        ///   <p>Whether the creator's vote counts or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings DisableCreatorVoteCounts(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreatorVoteCounts = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyApproverCountUpdateSettings.CreatorVoteCounts"/></em></p>
        ///   <p>Whether the creator's vote counts or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ToggleCreatorVoteCounts(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreatorVoteCounts = !toolSettings.CreatorVoteCounts;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetDetect(this AzureReposPolicyApproverCountUpdateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetDetect(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyApproverCountUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings EnableDetect(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyApproverCountUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings DisableDetect(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyApproverCountUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ToggleDetect(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetEnabled(this AzureReposPolicyApproverCountUpdateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetEnabled(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyApproverCountUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings EnableEnabled(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyApproverCountUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings DisableEnabled(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyApproverCountUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ToggleEnabled(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region MinimumApproverCount
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.MinimumApproverCount"/></em></p>
        ///   <p>Minimum number of approvers required. For example: 2.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetMinimumApproverCount(this AzureReposPolicyApproverCountUpdateSettings toolSettings, int? minimumApproverCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MinimumApproverCount = minimumApproverCount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.MinimumApproverCount"/></em></p>
        ///   <p>Minimum number of approvers required. For example: 2.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetMinimumApproverCount(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MinimumApproverCount = null;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetOrg(this AzureReposPolicyApproverCountUpdateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetOrg(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetProject(this AzureReposPolicyApproverCountUpdateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetProject(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetRepositoryId(this AzureReposPolicyApproverCountUpdateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetRepositoryId(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region ResetOnSourcePush
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.ResetOnSourcePush"/></em></p>
        ///   <p>Whether to reset source on push.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetResetOnSourcePush(this AzureReposPolicyApproverCountUpdateSettings toolSettings, bool? resetOnSourcePush)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResetOnSourcePush = resetOnSourcePush;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.ResetOnSourcePush"/></em></p>
        ///   <p>Whether to reset source on push.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetResetOnSourcePush(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResetOnSourcePush = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyApproverCountUpdateSettings.ResetOnSourcePush"/></em></p>
        ///   <p>Whether to reset source on push.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings EnableResetOnSourcePush(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResetOnSourcePush = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyApproverCountUpdateSettings.ResetOnSourcePush"/></em></p>
        ///   <p>Whether to reset source on push.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings DisableResetOnSourcePush(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResetOnSourcePush = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyApproverCountUpdateSettings.ResetOnSourcePush"/></em></p>
        ///   <p>Whether to reset source on push.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ToggleResetOnSourcePush(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResetOnSourcePush = !toolSettings.ResetOnSourcePush;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetSubscription(this AzureReposPolicyApproverCountUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetSubscription(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetDebug(this AzureReposPolicyApproverCountUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetDebug(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetHelp(this AzureReposPolicyApproverCountUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetHelp(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetOutput(this AzureReposPolicyApproverCountUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetOutput(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetQuery(this AzureReposPolicyApproverCountUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetQuery(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyApproverCountUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings SetVerbose(this AzureReposPolicyApproverCountUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyApproverCountUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyApproverCountUpdateSettings ResetVerbose(this AzureReposPolicyApproverCountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyFileSizeCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyFileSizeCreateSettingsExtensions
    {
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetBlocking(this AzureReposPolicyFileSizeCreateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetBlocking(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyFileSizeCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings EnableBlocking(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyFileSizeCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings DisableBlocking(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyFileSizeCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ToggleBlocking(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetEnabled(this AzureReposPolicyFileSizeCreateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetEnabled(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyFileSizeCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings EnableEnabled(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyFileSizeCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings DisableEnabled(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyFileSizeCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ToggleEnabled(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region MaximumGitBlobSize
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.MaximumGitBlobSize"/></em></p>
        ///   <p>Maximum git blob size in bytes. For example, to specify a 10byte limit, --maximum-git-blob-size 10.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetMaximumGitBlobSize(this AzureReposPolicyFileSizeCreateSettings toolSettings, string maximumGitBlobSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaximumGitBlobSize = maximumGitBlobSize;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.MaximumGitBlobSize"/></em></p>
        ///   <p>Maximum git blob size in bytes. For example, to specify a 10byte limit, --maximum-git-blob-size 10.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetMaximumGitBlobSize(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaximumGitBlobSize = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetRepositoryId(this AzureReposPolicyFileSizeCreateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetRepositoryId(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region UseUncompressedSize
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.UseUncompressedSize"/></em></p>
        ///   <p>Whether to use uncompressed size.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetUseUncompressedSize(this AzureReposPolicyFileSizeCreateSettings toolSettings, bool? useUncompressedSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseUncompressedSize = useUncompressedSize;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.UseUncompressedSize"/></em></p>
        ///   <p>Whether to use uncompressed size.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetUseUncompressedSize(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseUncompressedSize = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyFileSizeCreateSettings.UseUncompressedSize"/></em></p>
        ///   <p>Whether to use uncompressed size.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings EnableUseUncompressedSize(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseUncompressedSize = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyFileSizeCreateSettings.UseUncompressedSize"/></em></p>
        ///   <p>Whether to use uncompressed size.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings DisableUseUncompressedSize(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseUncompressedSize = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyFileSizeCreateSettings.UseUncompressedSize"/></em></p>
        ///   <p>Whether to use uncompressed size.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ToggleUseUncompressedSize(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseUncompressedSize = !toolSettings.UseUncompressedSize;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetDetect(this AzureReposPolicyFileSizeCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetDetect(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyFileSizeCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings EnableDetect(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyFileSizeCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings DisableDetect(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyFileSizeCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ToggleDetect(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetOrg(this AzureReposPolicyFileSizeCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetOrg(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetProject(this AzureReposPolicyFileSizeCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetProject(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetSubscription(this AzureReposPolicyFileSizeCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetSubscription(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetDebug(this AzureReposPolicyFileSizeCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetDebug(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetHelp(this AzureReposPolicyFileSizeCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetHelp(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetOutput(this AzureReposPolicyFileSizeCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetOutput(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetQuery(this AzureReposPolicyFileSizeCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetQuery(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings SetVerbose(this AzureReposPolicyFileSizeCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeCreateSettings ResetVerbose(this AzureReposPolicyFileSizeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyFileSizeUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyFileSizeUpdateSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetId(this AzureReposPolicyFileSizeUpdateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetId(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetBlocking(this AzureReposPolicyFileSizeUpdateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetBlocking(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyFileSizeUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings EnableBlocking(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyFileSizeUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings DisableBlocking(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyFileSizeUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ToggleBlocking(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetDetect(this AzureReposPolicyFileSizeUpdateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetDetect(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyFileSizeUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings EnableDetect(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyFileSizeUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings DisableDetect(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyFileSizeUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ToggleDetect(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetEnabled(this AzureReposPolicyFileSizeUpdateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetEnabled(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyFileSizeUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings EnableEnabled(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyFileSizeUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings DisableEnabled(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyFileSizeUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ToggleEnabled(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region MaximumGitBlobSize
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.MaximumGitBlobSize"/></em></p>
        ///   <p>Maximum git blob size in bytes. For example, to specify a 10byte limit, --maximum-git-blob-size 10.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetMaximumGitBlobSize(this AzureReposPolicyFileSizeUpdateSettings toolSettings, string maximumGitBlobSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaximumGitBlobSize = maximumGitBlobSize;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.MaximumGitBlobSize"/></em></p>
        ///   <p>Maximum git blob size in bytes. For example, to specify a 10byte limit, --maximum-git-blob-size 10.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetMaximumGitBlobSize(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaximumGitBlobSize = null;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetOrg(this AzureReposPolicyFileSizeUpdateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetOrg(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetProject(this AzureReposPolicyFileSizeUpdateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetProject(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetRepositoryId(this AzureReposPolicyFileSizeUpdateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetRepositoryId(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region UseUncompressedSize
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.UseUncompressedSize"/></em></p>
        ///   <p>Whether to use uncompressed size.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetUseUncompressedSize(this AzureReposPolicyFileSizeUpdateSettings toolSettings, bool? useUncompressedSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseUncompressedSize = useUncompressedSize;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.UseUncompressedSize"/></em></p>
        ///   <p>Whether to use uncompressed size.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetUseUncompressedSize(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseUncompressedSize = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyFileSizeUpdateSettings.UseUncompressedSize"/></em></p>
        ///   <p>Whether to use uncompressed size.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings EnableUseUncompressedSize(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseUncompressedSize = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyFileSizeUpdateSettings.UseUncompressedSize"/></em></p>
        ///   <p>Whether to use uncompressed size.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings DisableUseUncompressedSize(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseUncompressedSize = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyFileSizeUpdateSettings.UseUncompressedSize"/></em></p>
        ///   <p>Whether to use uncompressed size.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ToggleUseUncompressedSize(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseUncompressedSize = !toolSettings.UseUncompressedSize;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetSubscription(this AzureReposPolicyFileSizeUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetSubscription(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetDebug(this AzureReposPolicyFileSizeUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetDebug(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetHelp(this AzureReposPolicyFileSizeUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetHelp(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetOutput(this AzureReposPolicyFileSizeUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetOutput(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetQuery(this AzureReposPolicyFileSizeUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetQuery(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyFileSizeUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings SetVerbose(this AzureReposPolicyFileSizeUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyFileSizeUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyFileSizeUpdateSettings ResetVerbose(this AzureReposPolicyFileSizeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyRequiredReviewerCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyRequiredReviewerCreateSettingsExtensions
    {
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetBlocking(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetBlocking(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings EnableBlocking(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings DisableBlocking(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ToggleBlocking(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetBranch(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetBranch(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetEnabled(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetEnabled(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings EnableEnabled(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings DisableEnabled(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ToggleEnabled(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region Message
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Message"/></em></p>
        ///   <p>Message.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetMessage(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, string message)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = message;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Message"/></em></p>
        ///   <p>Message.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetMessage(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetRepositoryId(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetRepositoryId(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region RequiredReviewerIds
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.RequiredReviewerIds"/></em></p>
        ///   <p>Required reviewers email addresses separated by ';'. For example: john@contoso.com;alice@contoso.com.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetRequiredReviewerIds(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, string requiredReviewerIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredReviewerIds = requiredReviewerIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.RequiredReviewerIds"/></em></p>
        ///   <p>Required reviewers email addresses separated by ';'. For example: john@contoso.com;alice@contoso.com.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetRequiredReviewerIds(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredReviewerIds = null;
            return toolSettings;
        }
        #endregion
        #region BranchMatchType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetBranchMatchType(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, ReposPolicyWorkItemLinkingBranchMatchType branchMatchType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = branchMatchType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetBranchMatchType(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetDetect(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetDetect(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings EnableDetect(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings DisableDetect(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ToggleDetect(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetOrg(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetOrg(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region PathFilter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.PathFilter"/></em></p>
        ///   <p>Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths separated by ';'. Example: /WebApp/Models/Data.cs, /WebApp/\* or \*.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetPathFilter(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, string pathFilter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PathFilter = pathFilter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.PathFilter"/></em></p>
        ///   <p>Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths separated by ';'. Example: /WebApp/Models/Data.cs, /WebApp/\* or \*.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetPathFilter(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PathFilter = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetProject(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetProject(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetSubscription(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetSubscription(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetDebug(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetDebug(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetHelp(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetHelp(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetOutput(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetOutput(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetQuery(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetQuery(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings SetVerbose(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerCreateSettings ResetVerbose(this AzureReposPolicyRequiredReviewerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyRequiredReviewerUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyRequiredReviewerUpdateSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetId(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetId(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetBlocking(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetBlocking(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings EnableBlocking(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings DisableBlocking(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ToggleBlocking(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetBranch(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetBranch(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region BranchMatchType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetBranchMatchType(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, ReposPolicyWorkItemLinkingBranchMatchType branchMatchType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = branchMatchType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetBranchMatchType(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetDetect(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetDetect(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings EnableDetect(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings DisableDetect(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ToggleDetect(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetEnabled(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetEnabled(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings EnableEnabled(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings DisableEnabled(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ToggleEnabled(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region Message
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Message"/></em></p>
        ///   <p>Message.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetMessage(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string message)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = message;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Message"/></em></p>
        ///   <p>Message.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetMessage(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = null;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetOrg(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetOrg(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region PathFilter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.PathFilter"/></em></p>
        ///   <p>Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths separated by ';'. Example: /WebApp/Models/Data.cs, /WebApp/\* or \*.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetPathFilter(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string pathFilter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PathFilter = pathFilter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.PathFilter"/></em></p>
        ///   <p>Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths separated by ';'. Example: /WebApp/Models/Data.cs, /WebApp/\* or \*.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetPathFilter(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PathFilter = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetProject(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetProject(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetRepositoryId(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetRepositoryId(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region RequiredReviewerIds
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.RequiredReviewerIds"/></em></p>
        ///   <p>Required reviewers email addresses separated by ';'. For example: john@contoso.com;alice@contoso.com.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetRequiredReviewerIds(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string requiredReviewerIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredReviewerIds = requiredReviewerIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.RequiredReviewerIds"/></em></p>
        ///   <p>Required reviewers email addresses separated by ';'. For example: john@contoso.com;alice@contoso.com.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetRequiredReviewerIds(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredReviewerIds = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetSubscription(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetSubscription(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetDebug(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetDebug(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetHelp(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetHelp(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetOutput(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetOutput(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetQuery(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetQuery(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings SetVerbose(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyRequiredReviewerUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyRequiredReviewerUpdateSettings ResetVerbose(this AzureReposPolicyRequiredReviewerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyCommentRequiredCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyCommentRequiredCreateSettingsExtensions
    {
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetBlocking(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetBlocking(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCommentRequiredCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings EnableBlocking(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCommentRequiredCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings DisableBlocking(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCommentRequiredCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ToggleBlocking(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetBranch(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetBranch(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetEnabled(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetEnabled(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCommentRequiredCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings EnableEnabled(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCommentRequiredCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings DisableEnabled(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCommentRequiredCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ToggleEnabled(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetRepositoryId(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetRepositoryId(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region BranchMatchType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetBranchMatchType(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, ReposPolicyWorkItemLinkingBranchMatchType branchMatchType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = branchMatchType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetBranchMatchType(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetDetect(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetDetect(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCommentRequiredCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings EnableDetect(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCommentRequiredCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings DisableDetect(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCommentRequiredCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ToggleDetect(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetOrg(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetOrg(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetProject(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetProject(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetSubscription(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetSubscription(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetDebug(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetDebug(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetHelp(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetHelp(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetOutput(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetOutput(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetQuery(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetQuery(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings SetVerbose(this AzureReposPolicyCommentRequiredCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredCreateSettings ResetVerbose(this AzureReposPolicyCommentRequiredCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyCommentRequiredUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyCommentRequiredUpdateSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetId(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetId(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetBlocking(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetBlocking(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings EnableBlocking(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings DisableBlocking(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ToggleBlocking(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetBranch(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetBranch(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region BranchMatchType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetBranchMatchType(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, ReposPolicyWorkItemLinkingBranchMatchType branchMatchType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = branchMatchType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetBranchMatchType(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetDetect(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetDetect(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings EnableDetect(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings DisableDetect(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ToggleDetect(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetEnabled(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetEnabled(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings EnableEnabled(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings DisableEnabled(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ToggleEnabled(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetOrg(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetOrg(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetProject(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetProject(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetRepositoryId(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetRepositoryId(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetSubscription(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetSubscription(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetDebug(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetDebug(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetHelp(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetHelp(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetOutput(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetOutput(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetQuery(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetQuery(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings SetVerbose(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyCommentRequiredUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyCommentRequiredUpdateSettings ResetVerbose(this AzureReposPolicyCommentRequiredUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyMergeStrategyCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyMergeStrategyCreateSettingsExtensions
    {
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetBlocking(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetBlocking(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyMergeStrategyCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings EnableBlocking(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyMergeStrategyCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings DisableBlocking(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyMergeStrategyCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ToggleBlocking(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetBranch(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetBranch(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetEnabled(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetEnabled(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyMergeStrategyCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings EnableEnabled(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyMergeStrategyCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings DisableEnabled(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyMergeStrategyCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ToggleEnabled(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetRepositoryId(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetRepositoryId(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region UseSquashMerge
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.UseSquashMerge"/></em></p>
        ///   <p>Whether to squash merge always.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetUseSquashMerge(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, bool? useSquashMerge)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSquashMerge = useSquashMerge;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.UseSquashMerge"/></em></p>
        ///   <p>Whether to squash merge always.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetUseSquashMerge(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSquashMerge = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyMergeStrategyCreateSettings.UseSquashMerge"/></em></p>
        ///   <p>Whether to squash merge always.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings EnableUseSquashMerge(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSquashMerge = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyMergeStrategyCreateSettings.UseSquashMerge"/></em></p>
        ///   <p>Whether to squash merge always.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings DisableUseSquashMerge(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSquashMerge = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyMergeStrategyCreateSettings.UseSquashMerge"/></em></p>
        ///   <p>Whether to squash merge always.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ToggleUseSquashMerge(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSquashMerge = !toolSettings.UseSquashMerge;
            return toolSettings;
        }
        #endregion
        #region BranchMatchType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetBranchMatchType(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, ReposPolicyWorkItemLinkingBranchMatchType branchMatchType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = branchMatchType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetBranchMatchType(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetDetect(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetDetect(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyMergeStrategyCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings EnableDetect(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyMergeStrategyCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings DisableDetect(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyMergeStrategyCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ToggleDetect(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetOrg(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetOrg(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetProject(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetProject(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetSubscription(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetSubscription(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetDebug(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetDebug(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetHelp(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetHelp(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetOutput(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetOutput(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetQuery(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetQuery(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings SetVerbose(this AzureReposPolicyMergeStrategyCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyCreateSettings ResetVerbose(this AzureReposPolicyMergeStrategyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyMergeStrategyUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyMergeStrategyUpdateSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetId(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetId(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetBlocking(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetBlocking(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings EnableBlocking(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings DisableBlocking(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ToggleBlocking(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetBranch(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetBranch(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region BranchMatchType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetBranchMatchType(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, ReposPolicyWorkItemLinkingBranchMatchType branchMatchType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = branchMatchType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetBranchMatchType(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetDetect(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetDetect(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings EnableDetect(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings DisableDetect(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ToggleDetect(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetEnabled(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetEnabled(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings EnableEnabled(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings DisableEnabled(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ToggleEnabled(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetOrg(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetOrg(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetProject(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetProject(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetRepositoryId(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetRepositoryId(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region UseSquashMerge
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.UseSquashMerge"/></em></p>
        ///   <p>Whether to squash merge always.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetUseSquashMerge(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, bool? useSquashMerge)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSquashMerge = useSquashMerge;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.UseSquashMerge"/></em></p>
        ///   <p>Whether to squash merge always.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetUseSquashMerge(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSquashMerge = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyMergeStrategyUpdateSettings.UseSquashMerge"/></em></p>
        ///   <p>Whether to squash merge always.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings EnableUseSquashMerge(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSquashMerge = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyMergeStrategyUpdateSettings.UseSquashMerge"/></em></p>
        ///   <p>Whether to squash merge always.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings DisableUseSquashMerge(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSquashMerge = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyMergeStrategyUpdateSettings.UseSquashMerge"/></em></p>
        ///   <p>Whether to squash merge always.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ToggleUseSquashMerge(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSquashMerge = !toolSettings.UseSquashMerge;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetSubscription(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetSubscription(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetDebug(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetDebug(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetHelp(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetHelp(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetOutput(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetOutput(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetQuery(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetQuery(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings SetVerbose(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyMergeStrategyUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyMergeStrategyUpdateSettings ResetVerbose(this AzureReposPolicyMergeStrategyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyBuildCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyBuildCreateSettingsExtensions
    {
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetBlocking(this AzureReposPolicyBuildCreateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetBlocking(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyBuildCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings EnableBlocking(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyBuildCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings DisableBlocking(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyBuildCreateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ToggleBlocking(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetBranch(this AzureReposPolicyBuildCreateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetBranch(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region BuildDefinitionId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.BuildDefinitionId"/></em></p>
        ///   <p>Build Definition Id.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetBuildDefinitionId(this AzureReposPolicyBuildCreateSettings toolSettings, string buildDefinitionId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildDefinitionId = buildDefinitionId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.BuildDefinitionId"/></em></p>
        ///   <p>Build Definition Id.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetBuildDefinitionId(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildDefinitionId = null;
            return toolSettings;
        }
        #endregion
        #region DisplayName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.DisplayName"/></em></p>
        ///   <p>Display name for this build policy to identify the policy. For example: 'Manual queue policy'.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetDisplayName(this AzureReposPolicyBuildCreateSettings toolSettings, string displayName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayName = displayName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.DisplayName"/></em></p>
        ///   <p>Display name for this build policy to identify the policy. For example: 'Manual queue policy'.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetDisplayName(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayName = null;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetEnabled(this AzureReposPolicyBuildCreateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetEnabled(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyBuildCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings EnableEnabled(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyBuildCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings DisableEnabled(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyBuildCreateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ToggleEnabled(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region ManualQueueOnly
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.ManualQueueOnly"/></em></p>
        ///   <p>Whether to allow only manual queue of builds.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetManualQueueOnly(this AzureReposPolicyBuildCreateSettings toolSettings, bool? manualQueueOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManualQueueOnly = manualQueueOnly;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.ManualQueueOnly"/></em></p>
        ///   <p>Whether to allow only manual queue of builds.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetManualQueueOnly(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManualQueueOnly = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyBuildCreateSettings.ManualQueueOnly"/></em></p>
        ///   <p>Whether to allow only manual queue of builds.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings EnableManualQueueOnly(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManualQueueOnly = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyBuildCreateSettings.ManualQueueOnly"/></em></p>
        ///   <p>Whether to allow only manual queue of builds.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings DisableManualQueueOnly(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManualQueueOnly = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyBuildCreateSettings.ManualQueueOnly"/></em></p>
        ///   <p>Whether to allow only manual queue of builds.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ToggleManualQueueOnly(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManualQueueOnly = !toolSettings.ManualQueueOnly;
            return toolSettings;
        }
        #endregion
        #region QueueOnSourceUpdateOnly
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.QueueOnSourceUpdateOnly"/></em></p>
        ///   <p>Queue Only on source update.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetQueueOnSourceUpdateOnly(this AzureReposPolicyBuildCreateSettings toolSettings, bool? queueOnSourceUpdateOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueOnSourceUpdateOnly = queueOnSourceUpdateOnly;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.QueueOnSourceUpdateOnly"/></em></p>
        ///   <p>Queue Only on source update.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetQueueOnSourceUpdateOnly(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueOnSourceUpdateOnly = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyBuildCreateSettings.QueueOnSourceUpdateOnly"/></em></p>
        ///   <p>Queue Only on source update.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings EnableQueueOnSourceUpdateOnly(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueOnSourceUpdateOnly = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyBuildCreateSettings.QueueOnSourceUpdateOnly"/></em></p>
        ///   <p>Queue Only on source update.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings DisableQueueOnSourceUpdateOnly(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueOnSourceUpdateOnly = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyBuildCreateSettings.QueueOnSourceUpdateOnly"/></em></p>
        ///   <p>Queue Only on source update.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ToggleQueueOnSourceUpdateOnly(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueOnSourceUpdateOnly = !toolSettings.QueueOnSourceUpdateOnly;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetRepositoryId(this AzureReposPolicyBuildCreateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetRepositoryId(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region ValidDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.ValidDuration"/></em></p>
        ///   <p>Policy validity duration (in minutes).</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetValidDuration(this AzureReposPolicyBuildCreateSettings toolSettings, string validDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidDuration = validDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.ValidDuration"/></em></p>
        ///   <p>Policy validity duration (in minutes).</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetValidDuration(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidDuration = null;
            return toolSettings;
        }
        #endregion
        #region BranchMatchType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetBranchMatchType(this AzureReposPolicyBuildCreateSettings toolSettings, ReposPolicyWorkItemLinkingBranchMatchType branchMatchType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = branchMatchType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetBranchMatchType(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetDetect(this AzureReposPolicyBuildCreateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetDetect(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyBuildCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings EnableDetect(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyBuildCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings DisableDetect(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyBuildCreateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ToggleDetect(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetOrg(this AzureReposPolicyBuildCreateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetOrg(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region PathFilter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.PathFilter"/></em></p>
        ///   <p>Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths separated by ';'. Example: /WebApp/Models/Data.cs, /WebApp/\* or \*.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetPathFilter(this AzureReposPolicyBuildCreateSettings toolSettings, string pathFilter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PathFilter = pathFilter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.PathFilter"/></em></p>
        ///   <p>Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths separated by ';'. Example: /WebApp/Models/Data.cs, /WebApp/\* or \*.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetPathFilter(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PathFilter = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetProject(this AzureReposPolicyBuildCreateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetProject(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetSubscription(this AzureReposPolicyBuildCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetSubscription(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetDebug(this AzureReposPolicyBuildCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetDebug(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetHelp(this AzureReposPolicyBuildCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetHelp(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetOutput(this AzureReposPolicyBuildCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetOutput(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetQuery(this AzureReposPolicyBuildCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetQuery(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings SetVerbose(this AzureReposPolicyBuildCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildCreateSettings ResetVerbose(this AzureReposPolicyBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureReposPolicyBuildUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureReposPolicyBuildUpdateSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetId(this AzureReposPolicyBuildUpdateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Id"/></em></p>
        ///   <p>ID of the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetId(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Blocking
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetBlocking(this AzureReposPolicyBuildUpdateSettings toolSettings, bool? blocking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = blocking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetBlocking(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyBuildUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings EnableBlocking(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyBuildUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings DisableBlocking(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyBuildUpdateSettings.Blocking"/></em></p>
        ///   <p>Whether the policy should be blocking or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ToggleBlocking(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Blocking = !toolSettings.Blocking;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetBranch(this AzureReposPolicyBuildUpdateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Branch"/></em></p>
        ///   <p>Branch on which this policy should be applied. For example: master.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetBranch(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region BranchMatchType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetBranchMatchType(this AzureReposPolicyBuildUpdateSettings toolSettings, ReposPolicyWorkItemLinkingBranchMatchType branchMatchType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = branchMatchType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.BranchMatchType"/></em></p>
        ///   <p>Determines how the branch argument is used to apply a policy. If value is 'exact', the policy will be applied on a branch which has an exact match on the --branch argument. If value is 'prefix' the policy is applied across all branch folders that match the prefix provided by the --branch argument.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetBranchMatchType(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BranchMatchType = null;
            return toolSettings;
        }
        #endregion
        #region BuildDefinitionId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.BuildDefinitionId"/></em></p>
        ///   <p>Build Definition Id.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetBuildDefinitionId(this AzureReposPolicyBuildUpdateSettings toolSettings, string buildDefinitionId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildDefinitionId = buildDefinitionId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.BuildDefinitionId"/></em></p>
        ///   <p>Build Definition Id.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetBuildDefinitionId(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildDefinitionId = null;
            return toolSettings;
        }
        #endregion
        #region Detect
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetDetect(this AzureReposPolicyBuildUpdateSettings toolSettings, bool? detect)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = detect;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetDetect(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyBuildUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings EnableDetect(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyBuildUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings DisableDetect(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyBuildUpdateSettings.Detect"/></em></p>
        ///   <p>Automatically detect organization.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ToggleDetect(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detect = !toolSettings.Detect;
            return toolSettings;
        }
        #endregion
        #region DisplayName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.DisplayName"/></em></p>
        ///   <p>Display name for this build policy to identify the policy. For example: 'Manual queue policy'.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetDisplayName(this AzureReposPolicyBuildUpdateSettings toolSettings, string displayName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayName = displayName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.DisplayName"/></em></p>
        ///   <p>Display name for this build policy to identify the policy. For example: 'Manual queue policy'.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetDisplayName(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayName = null;
            return toolSettings;
        }
        #endregion
        #region Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetEnabled(this AzureReposPolicyBuildUpdateSettings toolSettings, bool? enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetEnabled(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyBuildUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings EnableEnabled(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyBuildUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings DisableEnabled(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyBuildUpdateSettings.Enabled"/></em></p>
        ///   <p>Whether the policy is enabled or not.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ToggleEnabled(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enabled = !toolSettings.Enabled;
            return toolSettings;
        }
        #endregion
        #region ManualQueueOnly
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.ManualQueueOnly"/></em></p>
        ///   <p>Whether to allow only manual queue of builds.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetManualQueueOnly(this AzureReposPolicyBuildUpdateSettings toolSettings, bool? manualQueueOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManualQueueOnly = manualQueueOnly;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.ManualQueueOnly"/></em></p>
        ///   <p>Whether to allow only manual queue of builds.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetManualQueueOnly(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManualQueueOnly = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyBuildUpdateSettings.ManualQueueOnly"/></em></p>
        ///   <p>Whether to allow only manual queue of builds.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings EnableManualQueueOnly(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManualQueueOnly = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyBuildUpdateSettings.ManualQueueOnly"/></em></p>
        ///   <p>Whether to allow only manual queue of builds.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings DisableManualQueueOnly(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManualQueueOnly = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyBuildUpdateSettings.ManualQueueOnly"/></em></p>
        ///   <p>Whether to allow only manual queue of builds.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ToggleManualQueueOnly(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManualQueueOnly = !toolSettings.ManualQueueOnly;
            return toolSettings;
        }
        #endregion
        #region Org
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetOrg(this AzureReposPolicyBuildUpdateSettings toolSettings, string org)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = org;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Org"/></em></p>
        ///   <p>Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example: <a href="https://dev.azure.com/MyOrganizationName/">https://dev.azure.com/MyOrganizationName/</a>.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetOrg(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Org = null;
            return toolSettings;
        }
        #endregion
        #region PathFilter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.PathFilter"/></em></p>
        ///   <p>Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths separated by ';'. Example: /WebApp/Models/Data.cs, /WebApp/\* or \*.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetPathFilter(this AzureReposPolicyBuildUpdateSettings toolSettings, string pathFilter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PathFilter = pathFilter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.PathFilter"/></em></p>
        ///   <p>Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths separated by ';'. Example: /WebApp/Models/Data.cs, /WebApp/\* or \*.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetPathFilter(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PathFilter = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetProject(this AzureReposPolicyBuildUpdateSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Project"/></em></p>
        ///   <p>Name or ID of the project. You can configure the default project using az devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetProject(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region QueueOnSourceUpdateOnly
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.QueueOnSourceUpdateOnly"/></em></p>
        ///   <p>Queue Only on source update.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetQueueOnSourceUpdateOnly(this AzureReposPolicyBuildUpdateSettings toolSettings, bool? queueOnSourceUpdateOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueOnSourceUpdateOnly = queueOnSourceUpdateOnly;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.QueueOnSourceUpdateOnly"/></em></p>
        ///   <p>Queue Only on source update.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetQueueOnSourceUpdateOnly(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueOnSourceUpdateOnly = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureReposPolicyBuildUpdateSettings.QueueOnSourceUpdateOnly"/></em></p>
        ///   <p>Queue Only on source update.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings EnableQueueOnSourceUpdateOnly(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueOnSourceUpdateOnly = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureReposPolicyBuildUpdateSettings.QueueOnSourceUpdateOnly"/></em></p>
        ///   <p>Queue Only on source update.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings DisableQueueOnSourceUpdateOnly(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueOnSourceUpdateOnly = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureReposPolicyBuildUpdateSettings.QueueOnSourceUpdateOnly"/></em></p>
        ///   <p>Queue Only on source update.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ToggleQueueOnSourceUpdateOnly(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueOnSourceUpdateOnly = !toolSettings.QueueOnSourceUpdateOnly;
            return toolSettings;
        }
        #endregion
        #region RepositoryId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetRepositoryId(this AzureReposPolicyBuildUpdateSettings toolSettings, string repositoryId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = repositoryId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.RepositoryId"/></em></p>
        ///   <p>Id of the repository on which to apply the policy.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetRepositoryId(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryId = null;
            return toolSettings;
        }
        #endregion
        #region ValidDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.ValidDuration"/></em></p>
        ///   <p>Policy validity duration (in minutes).</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetValidDuration(this AzureReposPolicyBuildUpdateSettings toolSettings, string validDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidDuration = validDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.ValidDuration"/></em></p>
        ///   <p>Policy validity duration (in minutes).</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetValidDuration(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidDuration = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetSubscription(this AzureReposPolicyBuildUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetSubscription(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetDebug(this AzureReposPolicyBuildUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetDebug(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetHelp(this AzureReposPolicyBuildUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetHelp(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetOutput(this AzureReposPolicyBuildUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetOutput(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetQuery(this AzureReposPolicyBuildUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetQuery(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureReposPolicyBuildUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings SetVerbose(this AzureReposPolicyBuildUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureReposPolicyBuildUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureReposPolicyBuildUpdateSettings ResetVerbose(this AzureReposPolicyBuildUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region ReposPrListStatus
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<ReposPrListStatus>))]
    public partial class ReposPrListStatus : Enumeration
    {
        public static ReposPrListStatus abandoned = new ReposPrListStatus { Value = "abandoned" };
        public static ReposPrListStatus active = new ReposPrListStatus { Value = "active" };
        public static ReposPrListStatus all = new ReposPrListStatus { Value = "all" };
        public static ReposPrListStatus completed = new ReposPrListStatus { Value = "completed" };
    }
    #endregion
    #region ReposPrUpdateStatus
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<ReposPrUpdateStatus>))]
    public partial class ReposPrUpdateStatus : Enumeration
    {
        public static ReposPrUpdateStatus abandoned = new ReposPrUpdateStatus { Value = "abandoned" };
        public static ReposPrUpdateStatus active = new ReposPrUpdateStatus { Value = "active" };
        public static ReposPrUpdateStatus completed = new ReposPrUpdateStatus { Value = "completed" };
    }
    #endregion
    #region ReposPrSetVoteVote
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<ReposPrSetVoteVote>))]
    public partial class ReposPrSetVoteVote : Enumeration
    {
        public static ReposPrSetVoteVote approve = new ReposPrSetVoteVote { Value = "approve" };
        public static ReposPrSetVoteVote approve_with_suggestions = new ReposPrSetVoteVote { Value = "approve-with-suggestions" };
        public static ReposPrSetVoteVote reject = new ReposPrSetVoteVote { Value = "reject" };
        public static ReposPrSetVoteVote reset = new ReposPrSetVoteVote { Value = "reset" };
        public static ReposPrSetVoteVote wait_for_author = new ReposPrSetVoteVote { Value = "wait-for-author" };
    }
    #endregion
    #region ReposPolicyWorkItemLinkingBranchMatchType
    /// <summary>
    ///   Used within <see cref="AzureReposTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<ReposPolicyWorkItemLinkingBranchMatchType>))]
    public partial class ReposPolicyWorkItemLinkingBranchMatchType : Enumeration
    {
        public static ReposPolicyWorkItemLinkingBranchMatchType exact = new ReposPolicyWorkItemLinkingBranchMatchType { Value = "exact" };
        public static ReposPolicyWorkItemLinkingBranchMatchType prefix = new ReposPolicyWorkItemLinkingBranchMatchType { Value = "prefix" };
    }
    #endregion
}
