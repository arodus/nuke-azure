// Copyright 2018 Maintainers of NUKE.
// Distributed under the MIT License.
// https://github.com/nuke-build/nuke/blob/master/LICENSE

// Generated with Nuke.CodeGeneration, Version: 0.7.0 [CommitSha: 9d3d3d7e].
// Generated from https://github.com/nuke-build/azure/blob/master/src/Nuke.Azure/specifications/AzureStorage.json.

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Azure
{
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageTasks
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public static string AzureStoragePath => ToolPathResolver.GetPathExecutable("az");
        /// <summary><p>Manage Azure Cloud Storage resources.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorage(string arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool logOutput = true, Func<string, string> outputFilter = null)
        {
            var process = ProcessTasks.StartProcess(AzureStoragePath, arguments, workingDirectory, environmentVariables, timeout, logOutput, null, outputFilter);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorage(Configure<AzureStorageSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueueCreate(Configure<AzureStorageQueueCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueueCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueueDelete(Configure<AzureStorageQueueDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueueDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueueExists(Configure<AzureStorageQueueExistsSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueueExistsSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueueGenerateSas(Configure<AzureStorageQueueGenerateSasSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueueGenerateSasSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueueList(Configure<AzureStorageQueueListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueueListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueueStats(Configure<AzureStorageQueueStatsSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueueStatsSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageCorsAdd(Configure<AzureStorageCorsAddSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageCorsAddSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageCorsClear(Configure<AzureStorageCorsClearSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageCorsClearSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageCorsList(Configure<AzureStorageCorsListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageCorsListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobDelete(Configure<AzureStorageBlobDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobDeleteBatch(Configure<AzureStorageBlobDeleteBatchSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobDeleteBatchSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobDownload(Configure<AzureStorageBlobDownloadSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobDownloadSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobDownloadBatch(Configure<AzureStorageBlobDownloadBatchSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobDownloadBatchSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobExists(Configure<AzureStorageBlobExistsSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobExistsSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobGenerateSas(Configure<AzureStorageBlobGenerateSasSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobGenerateSasSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobList(Configure<AzureStorageBlobListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobSetTier(Configure<AzureStorageBlobSetTierSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobSetTierSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobShow(Configure<AzureStorageBlobShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobSnapshot(Configure<AzureStorageBlobSnapshotSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobSnapshotSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobUndelete(Configure<AzureStorageBlobUndeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobUndeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobUpdate(Configure<AzureStorageBlobUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobUpload(Configure<AzureStorageBlobUploadSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobUploadSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobUploadBatch(Configure<AzureStorageBlobUploadBatchSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobUploadBatchSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobUrl(Configure<AzureStorageBlobUrlSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobUrlSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileDelete(Configure<AzureStorageFileDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileDeleteBatch(Configure<AzureStorageFileDeleteBatchSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileDeleteBatchSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileDownload(Configure<AzureStorageFileDownloadSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileDownloadSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileDownloadBatch(Configure<AzureStorageFileDownloadBatchSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileDownloadBatchSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileExists(Configure<AzureStorageFileExistsSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileExistsSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileGenerateSas(Configure<AzureStorageFileGenerateSasSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileGenerateSasSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileList(Configure<AzureStorageFileListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileResize(Configure<AzureStorageFileResizeSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileResizeSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileShow(Configure<AzureStorageFileShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileUpdate(Configure<AzureStorageFileUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileUpload(Configure<AzureStorageFileUploadSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileUploadSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileUploadBatch(Configure<AzureStorageFileUploadBatchSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileUploadBatchSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileUrl(Configure<AzureStorageFileUrlSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileUrlSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageMessageClear(Configure<AzureStorageMessageClearSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageMessageClearSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageMessageDelete(Configure<AzureStorageMessageDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageMessageDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageMessageGet(Configure<AzureStorageMessageGetSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageMessageGetSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageMessagePeek(Configure<AzureStorageMessagePeekSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageMessagePeekSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageMessagePut(Configure<AzureStorageMessagePutSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageMessagePutSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageMessageUpdate(Configure<AzureStorageMessageUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageMessageUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountCheckName(Configure<AzureStorageAccountCheckNameSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountCheckNameSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountCreate(Configure<AzureStorageAccountCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountDelete(Configure<AzureStorageAccountDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountGenerateSas(Configure<AzureStorageAccountGenerateSasSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountGenerateSasSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountList(Configure<AzureStorageAccountListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountShow(Configure<AzureStorageAccountShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountShowConnectionString(Configure<AzureStorageAccountShowConnectionStringSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountShowConnectionStringSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountShowUsage(Configure<AzureStorageAccountShowUsageSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountShowUsageSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountUpdate(Configure<AzureStorageAccountUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageShareCreate(Configure<AzureStorageShareCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageShareCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageShareDelete(Configure<AzureStorageShareDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageShareDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageShareExists(Configure<AzureStorageShareExistsSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageShareExistsSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageShareGenerateSas(Configure<AzureStorageShareGenerateSasSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageShareGenerateSasSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageShareList(Configure<AzureStorageShareListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageShareListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageShareShow(Configure<AzureStorageShareShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageShareShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageShareSnapshot(Configure<AzureStorageShareSnapshotSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageShareSnapshotSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageShareStats(Configure<AzureStorageShareStatsSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageShareStatsSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageShareUpdate(Configure<AzureStorageShareUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageShareUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageShareUrl(Configure<AzureStorageShareUrlSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageShareUrlSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageDirectoryCreate(Configure<AzureStorageDirectoryCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageDirectoryCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageDirectoryDelete(Configure<AzureStorageDirectoryDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageDirectoryDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageDirectoryExists(Configure<AzureStorageDirectoryExistsSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageDirectoryExistsSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageDirectoryList(Configure<AzureStorageDirectoryListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageDirectoryListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageDirectoryShow(Configure<AzureStorageDirectoryShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageDirectoryShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageEntityDelete(Configure<AzureStorageEntityDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageEntityDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageEntityInsert(Configure<AzureStorageEntityInsertSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageEntityInsertSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageEntityMerge(Configure<AzureStorageEntityMergeSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageEntityMergeSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageEntityQuery(Configure<AzureStorageEntityQuerySettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageEntityQuerySettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageEntityReplace(Configure<AzureStorageEntityReplaceSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageEntityReplaceSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageEntityShow(Configure<AzureStorageEntityShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageEntityShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageLoggingShow(Configure<AzureStorageLoggingShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageLoggingShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageLoggingUpdate(Configure<AzureStorageLoggingUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageLoggingUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageTableCreate(Configure<AzureStorageTableCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageTableCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageTableDelete(Configure<AzureStorageTableDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageTableDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageTableExists(Configure<AzureStorageTableExistsSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageTableExistsSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageTableGenerateSas(Configure<AzureStorageTableGenerateSasSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageTableGenerateSasSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageTableList(Configure<AzureStorageTableListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageTableListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageTableStats(Configure<AzureStorageTableStatsSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageTableStatsSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerCreate(Configure<AzureStorageContainerCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerDelete(Configure<AzureStorageContainerDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerExists(Configure<AzureStorageContainerExistsSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerExistsSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerGenerateSas(Configure<AzureStorageContainerGenerateSasSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerGenerateSasSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerList(Configure<AzureStorageContainerListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerSetPermission(Configure<AzureStorageContainerSetPermissionSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerSetPermissionSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerShow(Configure<AzureStorageContainerShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerShowPermission(Configure<AzureStorageContainerShowPermissionSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerShowPermissionSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageMetricsShow(Configure<AzureStorageMetricsShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageMetricsShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageMetricsUpdate(Configure<AzureStorageMetricsUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageMetricsUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileMetadataShow(Configure<AzureStorageFileMetadataShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileMetadataShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileMetadataUpdate(Configure<AzureStorageFileMetadataUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileMetadataUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileCopyCancel(Configure<AzureStorageFileCopyCancelSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileCopyCancelSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileCopyStart(Configure<AzureStorageFileCopyStartSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileCopyStartSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageFileCopyStartBatch(Configure<AzureStorageFileCopyStartBatchSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageFileCopyStartBatchSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerLegalHoldClear(Configure<AzureStorageContainerLegalHoldClearSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerLegalHoldClearSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerLegalHoldSet(Configure<AzureStorageContainerLegalHoldSetSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerLegalHoldSetSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerLegalHoldShow(Configure<AzureStorageContainerLegalHoldShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerLegalHoldShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerLeaseAcquire(Configure<AzureStorageContainerLeaseAcquireSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerLeaseAcquireSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerLeaseBreak(Configure<AzureStorageContainerLeaseBreakSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerLeaseBreakSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerLeaseChange(Configure<AzureStorageContainerLeaseChangeSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerLeaseChangeSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerLeaseRelease(Configure<AzureStorageContainerLeaseReleaseSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerLeaseReleaseSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerLeaseRenew(Configure<AzureStorageContainerLeaseRenewSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerLeaseRenewSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerMetadataShow(Configure<AzureStorageContainerMetadataShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerMetadataShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerMetadataUpdate(Configure<AzureStorageContainerMetadataUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerMetadataUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerImmutabilityPolicyCreate(Configure<AzureStorageContainerImmutabilityPolicyCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerImmutabilityPolicyCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerImmutabilityPolicyDelete(Configure<AzureStorageContainerImmutabilityPolicyDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerImmutabilityPolicyDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerImmutabilityPolicyExtend(Configure<AzureStorageContainerImmutabilityPolicyExtendSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerImmutabilityPolicyExtendSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerImmutabilityPolicyLock(Configure<AzureStorageContainerImmutabilityPolicyLockSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerImmutabilityPolicyLockSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerImmutabilityPolicyShow(Configure<AzureStorageContainerImmutabilityPolicyShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerImmutabilityPolicyShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerPolicyCreate(Configure<AzureStorageContainerPolicyCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerPolicyCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerPolicyDelete(Configure<AzureStorageContainerPolicyDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerPolicyDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerPolicyList(Configure<AzureStorageContainerPolicyListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerPolicyListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerPolicyShow(Configure<AzureStorageContainerPolicyShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerPolicyShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageContainerPolicyUpdate(Configure<AzureStorageContainerPolicyUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageContainerPolicyUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageShareMetadataShow(Configure<AzureStorageShareMetadataShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageShareMetadataShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageShareMetadataUpdate(Configure<AzureStorageShareMetadataUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageShareMetadataUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageSharePolicyCreate(Configure<AzureStorageSharePolicyCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageSharePolicyCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageSharePolicyDelete(Configure<AzureStorageSharePolicyDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageSharePolicyDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageSharePolicyList(Configure<AzureStorageSharePolicyListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageSharePolicyListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageSharePolicyShow(Configure<AzureStorageSharePolicyShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageSharePolicyShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageSharePolicyUpdate(Configure<AzureStorageSharePolicyUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageSharePolicyUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageDirectoryMetadataShow(Configure<AzureStorageDirectoryMetadataShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageDirectoryMetadataShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageDirectoryMetadataUpdate(Configure<AzureStorageDirectoryMetadataUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageDirectoryMetadataUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountKeysList(Configure<AzureStorageAccountKeysListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountKeysListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountKeysRenew(Configure<AzureStorageAccountKeysRenewSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountKeysRenewSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountNetworkRuleAdd(Configure<AzureStorageAccountNetworkRuleAddSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountNetworkRuleAddSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountNetworkRuleList(Configure<AzureStorageAccountNetworkRuleListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountNetworkRuleListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageAccountNetworkRuleRemove(Configure<AzureStorageAccountNetworkRuleRemoveSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageAccountNetworkRuleRemoveSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueueMetadataShow(Configure<AzureStorageQueueMetadataShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueueMetadataShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueueMetadataUpdate(Configure<AzureStorageQueueMetadataUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueueMetadataUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueuePolicyCreate(Configure<AzureStorageQueuePolicyCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueuePolicyCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueuePolicyDelete(Configure<AzureStorageQueuePolicyDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueuePolicyDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueuePolicyList(Configure<AzureStorageQueuePolicyListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueuePolicyListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueuePolicyShow(Configure<AzureStorageQueuePolicyShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueuePolicyShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageQueuePolicyUpdate(Configure<AzureStorageQueuePolicyUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageQueuePolicyUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageTablePolicyCreate(Configure<AzureStorageTablePolicyCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageTablePolicyCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageTablePolicyDelete(Configure<AzureStorageTablePolicyDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageTablePolicyDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageTablePolicyList(Configure<AzureStorageTablePolicyListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageTablePolicyListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageTablePolicyShow(Configure<AzureStorageTablePolicyShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageTablePolicyShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageTablePolicyUpdate(Configure<AzureStorageTablePolicyUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageTablePolicyUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobLeaseAcquire(Configure<AzureStorageBlobLeaseAcquireSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobLeaseAcquireSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobLeaseBreak(Configure<AzureStorageBlobLeaseBreakSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobLeaseBreakSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobLeaseChange(Configure<AzureStorageBlobLeaseChangeSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobLeaseChangeSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobLeaseRelease(Configure<AzureStorageBlobLeaseReleaseSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobLeaseReleaseSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobLeaseRenew(Configure<AzureStorageBlobLeaseRenewSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobLeaseRenewSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobMetadataShow(Configure<AzureStorageBlobMetadataShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobMetadataShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobMetadataUpdate(Configure<AzureStorageBlobMetadataUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobMetadataUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobCopyCancel(Configure<AzureStorageBlobCopyCancelSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobCopyCancelSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobCopyStart(Configure<AzureStorageBlobCopyStartSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobCopyStartSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobCopyStartBatch(Configure<AzureStorageBlobCopyStartBatchSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobCopyStartBatchSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobServicePropertiesShow(Configure<AzureStorageBlobServicePropertiesShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobServicePropertiesShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobIncrementalCopyCancel(Configure<AzureStorageBlobIncrementalCopyCancelSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobIncrementalCopyCancelSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobIncrementalCopyStart(Configure<AzureStorageBlobIncrementalCopyStartSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobIncrementalCopyStartSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobServicePropertiesDeletePolicyShow(Configure<AzureStorageBlobServicePropertiesDeletePolicyShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobServicePropertiesDeletePolicyShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Cloud Storage resources.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/storage?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureStorageBlobServicePropertiesDeletePolicyUpdate(Configure<AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
    }
    #region AzureStorageSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage")
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueueCreateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueueCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The queue name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Specifies whether to throw an exception if the queue already exists.</p></summary>
        public virtual bool? FailOnExist { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue create")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--fail-on-exist", FailOnExist)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueueDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueueDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The queue name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Specifies whether to throw an exception if the queue doesn't exist.</p></summary>
        public virtual bool? FailNotExist { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue delete")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--fail-not-exist", FailNotExist)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueueExistsSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueueExistsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The queue name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue exists")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueueGenerateSasSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueueGenerateSasSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The queue name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        public virtual string HttpsOnly { get; internal set; }
        /// <summary><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        public virtual string Ip { get; internal set; }
        /// <summary><p>The permissions the SAS grants. Allowed values: (a)dd (p)rocess (r)ead (u)pdate. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>The name of a stored access policy within the share's ACL.</p></summary>
        public virtual string PolicyName { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue generate-sas")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--expiry {value}", Expiry)
              .Add("--https-only {value}", HttpsOnly)
              .Add("--ip {value}", Ip)
              .Add("--permissions {value}", Permissions)
              .Add("--policy-name {value}", PolicyName)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueueListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueueListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Specifies that container metadata be returned in the response.</p></summary>
        public virtual string IncludeMetadata { get; internal set; }
        /// <summary><p>An opaque continuation token. This value can be retrieved from the next_marker field of a previous generator object if num_results was specified and that generator has finished enumerating results. If specified, this generator will begin returning results from the point where the previous generator stopped.</p></summary>
        public virtual string Marker { get; internal set; }
        /// <summary><p>The maximum number of queues to return.</p></summary>
        public virtual int? NumResults { get; internal set; }
        /// <summary><p>Filters the results to return only queues with names that begin with the specified prefix.</p></summary>
        public virtual string Prefix { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue list")
              .Add("--auth-mode {value}", AuthMode)
              .Add("--include-metadata {value}", IncludeMetadata)
              .Add("--marker {value}", Marker)
              .Add("--num-results {value}", NumResults)
              .Add("--prefix {value}", Prefix)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueueStatsSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueueStatsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue stats")
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageCorsAddSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageCorsAddSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Space-separated list of HTTP methods allowed to be executed by the origin.</p></summary>
        public virtual IReadOnlyList<StorageCorsAddMethods> Methods => MethodsInternal.AsReadOnly();
        internal List<StorageCorsAddMethods> MethodsInternal { get; set; } = new List<StorageCorsAddMethods>();
        /// <summary><p>Space-separated list of origin domains that will be allowed via CORS, or '*' to allow all domains.</p></summary>
        public virtual IReadOnlyList<string> Origins => OriginsInternal.AsReadOnly();
        internal List<string> OriginsInternal { get; set; } = new List<string>();
        /// <summary><p>The storage service(s) to add rules to. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.</p></summary>
        public virtual string Services { get; internal set; }
        /// <summary><p>Space-separated list of response headers allowed to be part of the cross-origin request.</p></summary>
        public virtual IReadOnlyList<string> AllowedHeaders => AllowedHeadersInternal.AsReadOnly();
        internal List<string> AllowedHeadersInternal { get; set; } = new List<string>();
        /// <summary><p>Space-separated list of response headers to expose to CORS clients.</p></summary>
        public virtual IReadOnlyList<string> ExposedHeaders => ExposedHeadersInternal.AsReadOnly();
        internal List<string> ExposedHeadersInternal { get; set; } = new List<string>();
        /// <summary><p>The maximum number of seconds the client/browser should cache a preflight response.</p></summary>
        public virtual int? MaxAge { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage cors add")
              .Add("--methods {value}", Methods, separator: ' ')
              .Add("--origins {value}", Origins, separator: ' ')
              .Add("--services {value}", Services)
              .Add("--allowed-headers {value}", AllowedHeaders, separator: ' ')
              .Add("--exposed-headers {value}", ExposedHeaders, separator: ' ')
              .Add("--max-age {value}", MaxAge)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageCorsClearSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageCorsClearSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage service(s) to remove rules from. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.</p></summary>
        public virtual string Services { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage cors clear")
              .Add("--services {value}", Services)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageCorsListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageCorsListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage service(s) to list rules for. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.</p></summary>
        public virtual string Services { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage cors list")
              .Add("--services {value}", Services)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Required if the blob has associated snapshots.</p></summary>
        public virtual StorageBlobDeleteSnapshots DeleteSnapshots { get; internal set; }
        /// <summary><p>Required if the blob has an active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to delete.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob delete")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--delete-snapshots {value}", DeleteSnapshots)
              .Add("--lease-id {value}", LeaseId)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobDeleteBatchSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobDeleteBatchSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The blob container from where the files will be deleted.</p></summary>
        public virtual string Source { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Required if the blob has associated snapshots.</p></summary>
        public virtual StorageBlobDeleteSnapshots DeleteSnapshots { get; internal set; }
        /// <summary><p>Show the summary of the operations to be taken instead of actually deleting the file(s).</p></summary>
        public virtual bool? Dryrun { get; internal set; }
        /// <summary><p>Required if the blob has an active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>The pattern used for globbing files or blobs in the source. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        public virtual string Pattern { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*).</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob delete-batch")
              .Add("--source {value}", Source)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--delete-snapshots {value}", DeleteSnapshots)
              .Add("--dryrun", Dryrun)
              .Add("--lease-id {value}", LeaseId)
              .Add("--pattern {value}", Pattern)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobDownloadSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobDownloadSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Path of file to write out to.</p></summary>
        public virtual string File { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>End of byte range to use for downloading a section of the blob. If end_range is given, start_range must be provided. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of blob.</p></summary>
        public virtual string EndRange { get; internal set; }
        /// <summary><p>Required if the blob has an active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>If set to 2 or greater, an initial get will be done for the first self.MAX_SINGLE_GET_SIZE bytes of the blob. If this is the entire blob, the method returns at this point. If it is not, it will download the remaining data parallel using the number of threads equal to max_connections. Each chunk will be of size self.MAX_CHUNK_GET_SIZE. If set to 1, a single large get request will be done. This is not generally recommended but available if very few threads should be used, network requests are very expensive, or a non-seekable stream prevents parallel download. This may also be useful if many blobs are expected to be empty as an extra request is required for empty blobs if max_connections is greater than 1.</p></summary>
        public virtual string MaxConnections { get; internal set; }
        /// <summary><p>Include this flag to disable progress reporting for the command.</p></summary>
        public virtual bool? NoProgress { get; internal set; }
        /// <summary><p>Mode to use when opening the file. Note that specifying append only open_mode prevents parallel download. So, max_connections must be set to 1 if this open_mode is used.</p></summary>
        public virtual string OpenMode { get; internal set; }
        /// <summary><p>The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>The socket timeout(secs), used by the service to regulate data flow.</p></summary>
        public virtual string SocketTimeout { get; internal set; }
        /// <summary><p>Start of byte range to use for downloading a section of the blob. If no end_range is given, all bytes after the start_range will be downloaded. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of blob.</p></summary>
        public virtual string StartRange { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>If set to true, validates an MD5 hash for each retrieved portion of the blob. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that the service will only return transactional MD5s for chunks 4MB or less so the first get request will be of size self.MAX_CHUNK_GET_SIZE instead of self.MAX_SINGLE_GET_SIZE. If self.MAX_CHUNK_GET_SIZE was set to greater than 4MB an error will be thrown. As computing the MD5 takes processing time and more requests will need to be done due to the reduced chunk size there may be some increase in latency.</p></summary>
        public virtual string ValidateContent { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob download")
              .Add("--container-name {value}", ContainerName)
              .Add("--file {value}", File)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--end-range {value}", EndRange)
              .Add("--lease-id {value}", LeaseId)
              .Add("--max-connections {value}", MaxConnections)
              .Add("--no-progress", NoProgress)
              .Add("--open-mode {value}", OpenMode)
              .Add("--snapshot {value}", Snapshot)
              .Add("--socket-timeout {value}", SocketTimeout)
              .Add("--start-range {value}", StartRange)
              .Add("--timeout {value}", Timeout)
              .Add("--validate-content {value}", ValidateContent)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobDownloadBatchSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobDownloadBatchSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The existing destination folder for this download operation.</p></summary>
        public virtual string Destination { get; internal set; }
        /// <summary><p>The blob container from where the files will be downloaded.</p></summary>
        public virtual string Source { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Show the summary of the operations to be taken instead of actually downloading the file(s).</p></summary>
        public virtual bool? Dryrun { get; internal set; }
        /// <summary><p>Maximum number of parallel connections to use when the blob size exceeds 64MB.</p></summary>
        public virtual int? MaxConnections { get; internal set; }
        /// <summary><p>Include this flag to disable progress reporting for the command.</p></summary>
        public virtual bool? NoProgress { get; internal set; }
        /// <summary><p>The pattern used for globbing files or blobs in the source. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        public virtual string Pattern { get; internal set; }
        /// <summary><p>The socket timeout(secs), used by the service to regulate data flow.</p></summary>
        public virtual string SocketTimeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob download-batch")
              .Add("--destination {value}", Destination)
              .Add("--source {value}", Source)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--dryrun", Dryrun)
              .Add("--max-connections {value}", MaxConnections)
              .Add("--no-progress", NoProgress)
              .Add("--pattern {value}", Pattern)
              .Add("--socket-timeout {value}", SocketTimeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobExistsSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobExistsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>The snapshot parameter is an opaque DateTime value that, when present, specifies the snapshot.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob exists")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobGenerateSasSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobGenerateSasSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Response header value for Cache-Control when resource is accessed using this shared access signature.</p></summary>
        public virtual string CacheControl { get; internal set; }
        /// <summary><p>Response header value for Content-Disposition when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentDisposition { get; internal set; }
        /// <summary><p>Response header value for Content-Encoding when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentEncoding { get; internal set; }
        /// <summary><p>Response header value for Content-Language when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentLanguage { get; internal set; }
        /// <summary><p>Response header value for Content-Type when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentType { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        public virtual string HttpsOnly { get; internal set; }
        /// <summary><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        public virtual string Ip { get; internal set; }
        /// <summary><p>The permissions the SAS grants. Allowed values: (a)dd (c)reate (d)elete (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>The name of a stored access policy within the container's ACL.</p></summary>
        public virtual string PolicyName { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob generate-sas")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--cache-control {value}", CacheControl)
              .Add("--content-disposition {value}", ContentDisposition)
              .Add("--content-encoding {value}", ContentEncoding)
              .Add("--content-language {value}", ContentLanguage)
              .Add("--content-type {value}", ContentType)
              .Add("--expiry {value}", Expiry)
              .Add("--https-only {value}", HttpsOnly)
              .Add("--ip {value}", Ip)
              .Add("--permissions {value}", Permissions)
              .Add("--policy-name {value}", PolicyName)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>When the request includes this parameter, the operation returns a BlobPrefix element in the result list that acts as a placeholder for all blobs whose names begin with the same substring up to the appearance of the delimiter character. The delimiter may be a single character or a string.</p></summary>
        public virtual string Delimiter { get; internal set; }
        /// <summary><p>Specifies additional datasets to include: (c)opy-info, (m)etadata, (s)napshots, (d)eleted-soft. Can be combined.</p></summary>
        public virtual string Include { get; internal set; }
        /// <summary><p>Specifies the maximum number of blobs to return. If this parameter is not provided, all blobs will be returned.</p></summary>
        public virtual int? NumResults { get; internal set; }
        /// <summary><p>Filters the results to return only blobs whose names begin with the specified prefix.</p></summary>
        public virtual string Prefix { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob list")
              .Add("--container-name {value}", ContainerName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--delimiter {value}", Delimiter)
              .Add("--include {value}", Include)
              .Add("--num-results {value}", NumResults)
              .Add("--prefix {value}", Prefix)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobSetTierSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobSetTierSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The tier value to set the blob to.</p></summary>
        public virtual string Tier { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>The timeout parameter is expressed in seconds. This method may make multiple calls to the Azure service and the timeout will apply to each call individually.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>The blob type.</p></summary>
        public virtual StorageBlobSetTierType Type { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob set-tier")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--tier {value}", Tier)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--type {value}", Type)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Required if the blob has an active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob show")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobSnapshotSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobSnapshotSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Required if the blob has an active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob snapshot")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobUndeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobUndeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob undelete")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>The cache control string.</p></summary>
        public virtual string ContentCacheControl { get; internal set; }
        /// <summary><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        public virtual string ContentDisposition { get; internal set; }
        /// <summary><p>The content encoding type.</p></summary>
        public virtual string ContentEncoding { get; internal set; }
        /// <summary><p>The content language.</p></summary>
        public virtual string ContentLanguage { get; internal set; }
        /// <summary><p>The content's MD5 hash.</p></summary>
        public virtual string ContentMd5 { get; internal set; }
        /// <summary><p>The content MIME type.</p></summary>
        public virtual string ContentType { get; internal set; }
        /// <summary><p>Required if the blob has an active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob update")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--content-cache-control {value}", ContentCacheControl)
              .Add("--content-disposition {value}", ContentDisposition)
              .Add("--content-encoding {value}", ContentEncoding)
              .Add("--content-language {value}", ContentLanguage)
              .Add("--content-md5 {value}", ContentMd5)
              .Add("--content-type {value}", ContentType)
              .Add("--lease-id {value}", LeaseId)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobUploadSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobUploadSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Path of the file to upload as the blob content.</p></summary>
        public virtual string File { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>The cache control string.</p></summary>
        public virtual string ContentCacheControl { get; internal set; }
        /// <summary><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        public virtual string ContentDisposition { get; internal set; }
        /// <summary><p>The content encoding type.</p></summary>
        public virtual string ContentEncoding { get; internal set; }
        /// <summary><p>The content language.</p></summary>
        public virtual string ContentLanguage { get; internal set; }
        /// <summary><p>The content's MD5 hash.</p></summary>
        public virtual string ContentMd5 { get; internal set; }
        /// <summary><p>The content MIME type.</p></summary>
        public virtual string ContentType { get; internal set; }
        /// <summary><p>Required if the blob has an active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Maximum number of parallel connections to use when the blob size exceeds 64MB.</p></summary>
        public virtual int? MaxConnections { get; internal set; }
        /// <summary><p>The max length in bytes permitted for an append blob.</p></summary>
        public virtual string MaxsizeCondition { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Include this flag to disable progress reporting for the command.</p></summary>
        public virtual bool? NoProgress { get; internal set; }
        /// <summary><p>The socket timeout(secs), used by the service to regulate data flow.</p></summary>
        public virtual string SocketTimeout { get; internal set; }
        /// <summary><p>A page blob tier value to set the blob to. The tier correlates to the size of the blob and number of allowed IOPS. This is only applicable to page blobs on premium storage accounts.</p></summary>
        public virtual StorageBlobUploadTier Tier { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Defaults to 'page' for *.vhd files, or 'block' otherwise.</p></summary>
        public virtual StorageBlobType Type { get; internal set; }
        /// <summary><p>Specifies that an MD5 hash shall be calculated for each chunk of the blob and verified by the service when the chunk has arrived.</p></summary>
        public virtual string ValidateContent { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob upload")
              .Add("--container-name {value}", ContainerName)
              .Add("--file {value}", File)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--content-cache-control {value}", ContentCacheControl)
              .Add("--content-disposition {value}", ContentDisposition)
              .Add("--content-encoding {value}", ContentEncoding)
              .Add("--content-language {value}", ContentLanguage)
              .Add("--content-md5 {value}", ContentMd5)
              .Add("--content-type {value}", ContentType)
              .Add("--lease-id {value}", LeaseId)
              .Add("--max-connections {value}", MaxConnections)
              .Add("--maxsize-condition {value}", MaxsizeCondition)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--no-progress", NoProgress)
              .Add("--socket-timeout {value}", SocketTimeout)
              .Add("--tier {value}", Tier)
              .Add("--timeout {value}", Timeout)
              .Add("--type {value}", Type)
              .Add("--validate-content {value}", ValidateContent)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobUploadBatchSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobUploadBatchSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The blob container where the files will be uploaded.</p></summary>
        public virtual string Destination { get; internal set; }
        /// <summary><p>The directory where the files to be uploaded are located.</p></summary>
        public virtual string Source { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>The destination path that will be appended to the blob name.</p></summary>
        public virtual string DestinationPath { get; internal set; }
        /// <summary><p>Show the summary of the operations to be taken instead of actually uploading the file(s).</p></summary>
        public virtual bool? Dryrun { get; internal set; }
        /// <summary><p>Required if the blob has an active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Maximum number of parallel connections to use when the blob size exceeds 64MB.</p></summary>
        public virtual int? MaxConnections { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Include this flag to disable progress reporting for the command.</p></summary>
        public virtual bool? NoProgress { get; internal set; }
        /// <summary><p>The pattern used for globbing files or blobs in the source. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        public virtual string Pattern { get; internal set; }
        /// <summary><p>The socket timeout(secs), used by the service to regulate data flow.</p></summary>
        public virtual string SocketTimeout { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Defaults to 'page' for *.vhd files, or 'block' otherwise. The setting will override blob types for every file.</p></summary>
        public virtual StorageBlobType Type { get; internal set; }
        /// <summary><p>The cache control string.</p></summary>
        public virtual string ContentCacheControl { get; internal set; }
        /// <summary><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        public virtual string ContentDisposition { get; internal set; }
        /// <summary><p>The content encoding type.</p></summary>
        public virtual string ContentEncoding { get; internal set; }
        /// <summary><p>The content language.</p></summary>
        public virtual string ContentLanguage { get; internal set; }
        /// <summary><p>The content's MD5 hash.</p></summary>
        public virtual string ContentMd5 { get; internal set; }
        /// <summary><p>The content MIME type.</p></summary>
        public virtual string ContentType { get; internal set; }
        /// <summary><p>The max length in bytes permitted for an append blob.</p></summary>
        public virtual string MaxsizeCondition { get; internal set; }
        /// <summary><p>Specifies that an MD5 hash shall be calculated for each chunk of the blob and verified by the service when the chunk has arrived.</p></summary>
        public virtual string ValidateContent { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*).</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob upload-batch")
              .Add("--destination {value}", Destination)
              .Add("--source {value}", Source)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--destination-path {value}", DestinationPath)
              .Add("--dryrun", Dryrun)
              .Add("--lease-id {value}", LeaseId)
              .Add("--max-connections {value}", MaxConnections)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--no-progress", NoProgress)
              .Add("--pattern {value}", Pattern)
              .Add("--socket-timeout {value}", SocketTimeout)
              .Add("--timeout {value}", Timeout)
              .Add("--type {value}", Type)
              .Add("--content-cache-control {value}", ContentCacheControl)
              .Add("--content-disposition {value}", ContentDisposition)
              .Add("--content-encoding {value}", ContentEncoding)
              .Add("--content-language {value}", ContentLanguage)
              .Add("--content-md5 {value}", ContentMd5)
              .Add("--content-type {value}", ContentType)
              .Add("--maxsize-condition {value}", MaxsizeCondition)
              .Add("--validate-content {value}", ValidateContent)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobUrlSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobUrlSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Protocol to use.</p></summary>
        public virtual StorageBlobProtocol Protocol { get; internal set; }
        /// <summary><p>An string value that uniquely identifies the snapshot. The value ofthis query parameter indicates the snapshot version.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob url")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--protocol {value}", Protocol)
              .Add("--snapshot {value}", Snapshot)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The path to the file within the file share.</p></summary>
        public virtual string Path { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file delete")
              .Add("--path {value}", Path)
              .Add("--share-name {value}", ShareName)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileDeleteBatchSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileDeleteBatchSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The source of the file delete operation. The source can be the file share URL or the share name.</p></summary>
        public virtual string Source { get; internal set; }
        /// <summary><p>List the files and blobs to be deleted. No actual data deletion will occur.</p></summary>
        public virtual string Dryrun { get; internal set; }
        /// <summary><p>The pattern used for file globbing. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        public virtual string Pattern { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file delete-batch")
              .Add("--source {value}", Source)
              .Add("--dryrun {value}", Dryrun)
              .Add("--pattern {value}", Pattern)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileDownloadSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileDownloadSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The path to the file within the file share.</p></summary>
        public virtual string Path { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Path of the file to write to. The source filename will be used if not specified.</p></summary>
        public virtual string Dest { get; internal set; }
        /// <summary><p>End of byte range to use for downloading a section of the file. If end_range is given, start_range must be provided. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of file.</p></summary>
        public virtual string EndRange { get; internal set; }
        /// <summary><p>If set to 2 or greater, an initial get will be done for the first self.MAX_SINGLE_GET_SIZE bytes of the file. If this is the entire file, the method returns at this point. If it is not, it will download the remaining data parallel using the number of threads equal to max_connections. Each chunk will be of size self.MAX_CHUNK_GET_SIZE. If set to 1, a single large get request will be done. This is not generally recommended but available if very few threads should be used, network requests are very expensive, or a non-seekable stream prevents parallel download. This may also be valuable if the file is being concurrently modified to enforce atomicity or if many files are expected to be empty as an extra request is required for empty files if max_connections is greater than 1.</p></summary>
        public virtual string MaxConnections { get; internal set; }
        /// <summary><p>Include this flag to disable progress reporting for the command.</p></summary>
        public virtual bool? NoProgress { get; internal set; }
        /// <summary><p>Mode to use when opening the file. Note that specifying append only open_mode prevents parallel download. So, max_connections must be set to 1 if this open_mode is used.</p></summary>
        public virtual string OpenMode { get; internal set; }
        /// <summary><p>A string that represents the snapshot version, if applicable.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Start of byte range to use for downloading a section of the file. If no end_range is given, all bytes after the start_range will be downloaded. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of file.</p></summary>
        public virtual string StartRange { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>If set to true, validates an MD5 hash for each retrieved portion of the file. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that the service will only return transactional MD5s for chunks 4MB or less so the first get request will be of size self.MAX_CHUNK_GET_SIZE instead of self.MAX_SINGLE_GET_SIZE. If self.MAX_CHUNK_GET_SIZE was set to greater than 4MB an error will be thrown. As computing the MD5 takes processing time and more requests will need to be done due to the reduced chunk size there may be some increase in latency.</p></summary>
        public virtual string ValidateContent { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file download")
              .Add("--path {value}", Path)
              .Add("--share-name {value}", ShareName)
              .Add("--dest {value}", Dest)
              .Add("--end-range {value}", EndRange)
              .Add("--max-connections {value}", MaxConnections)
              .Add("--no-progress", NoProgress)
              .Add("--open-mode {value}", OpenMode)
              .Add("--snapshot {value}", Snapshot)
              .Add("--start-range {value}", StartRange)
              .Add("--timeout {value}", Timeout)
              .Add("--validate-content {value}", ValidateContent)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileDownloadBatchSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileDownloadBatchSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The local directory where the files are downloaded to. This directory must already exist.</p></summary>
        public virtual string Destination { get; internal set; }
        /// <summary><p>The source of the file download operation. The source can be the file share URL or the share name.</p></summary>
        public virtual string Source { get; internal set; }
        /// <summary><p>List the files and blobs to be downloaded. No actual data transfer will occur.</p></summary>
        public virtual string Dryrun { get; internal set; }
        /// <summary><p>Include this flag to disable progress reporting for the command.</p></summary>
        public virtual bool? NoProgress { get; internal set; }
        /// <summary><p>The pattern used for file globbing. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        public virtual string Pattern { get; internal set; }
        /// <summary><p>If set, calculates an MD5 hash for each range of the file for validation.</p></summary>
        public virtual string ValidateContent { get; internal set; }
        /// <summary><p>The maximum number of parallel connections to use. Default value is 1.</p></summary>
        public virtual int? MaxConnections { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file download-batch")
              .Add("--destination {value}", Destination)
              .Add("--source {value}", Source)
              .Add("--dryrun {value}", Dryrun)
              .Add("--no-progress", NoProgress)
              .Add("--pattern {value}", Pattern)
              .Add("--validate-content {value}", ValidateContent)
              .Add("--max-connections {value}", MaxConnections)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileExistsSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileExistsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The path to the file within the file share.</p></summary>
        public virtual string Path { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>A string that represents the snapshot version, if applicable.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file exists")
              .Add("--path {value}", Path)
              .Add("--share-name {value}", ShareName)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileGenerateSasSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileGenerateSasSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The path to the file within the file share.</p></summary>
        public virtual string Path { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Response header value for Cache-Control when resource is accessed using this shared access signature.</p></summary>
        public virtual string CacheControl { get; internal set; }
        /// <summary><p>Response header value for Content-Disposition when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentDisposition { get; internal set; }
        /// <summary><p>Response header value for Content-Encoding when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentEncoding { get; internal set; }
        /// <summary><p>Response header value for Content-Language when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentLanguage { get; internal set; }
        /// <summary><p>Response header value for Content-Type when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentType { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        public virtual string HttpsOnly { get; internal set; }
        /// <summary><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        public virtual string Ip { get; internal set; }
        /// <summary><p>The permissions the SAS grants. Allowed values: (c)reate (d)elete (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>The name of a stored access policy within the container's ACL.</p></summary>
        public virtual string PolicyName { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file generate-sas")
              .Add("--path {value}", Path)
              .Add("--share-name {value}", ShareName)
              .Add("--cache-control {value}", CacheControl)
              .Add("--content-disposition {value}", ContentDisposition)
              .Add("--content-encoding {value}", ContentEncoding)
              .Add("--content-language {value}", ContentLanguage)
              .Add("--content-type {value}", ContentType)
              .Add("--expiry {value}", Expiry)
              .Add("--https-only {value}", HttpsOnly)
              .Add("--ip {value}", Ip)
              .Add("--permissions {value}", Permissions)
              .Add("--policy-name {value}", PolicyName)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>List only files in the given share.</p></summary>
        public virtual string ExcludeDir { get; internal set; }
        /// <summary><p>The directory path within the file share.</p></summary>
        public virtual string Path { get; internal set; }
        /// <summary><p>A string that represents the snapshot version, if applicable.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file list")
              .Add("--share-name {value}", ShareName)
              .Add("--exclude-dir {value}", ExcludeDir)
              .Add("--path {value}", Path)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileResizeSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileResizeSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The path to the file within the file share.</p></summary>
        public virtual string Path { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>The length to resize the file to.</p></summary>
        public virtual string Size { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file resize")
              .Add("--path {value}", Path)
              .Add("--share-name {value}", ShareName)
              .Add("--size {value}", Size)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The path to the file within the file share.</p></summary>
        public virtual string Path { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>A string that represents the snapshot version, if applicable.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file show")
              .Add("--path {value}", Path)
              .Add("--share-name {value}", ShareName)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The path to the file within the file share.</p></summary>
        public virtual string Path { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>The cache control string.</p></summary>
        public virtual string ContentCacheControl { get; internal set; }
        /// <summary><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        public virtual string ContentDisposition { get; internal set; }
        /// <summary><p>The content encoding type.</p></summary>
        public virtual string ContentEncoding { get; internal set; }
        /// <summary><p>The content language.</p></summary>
        public virtual string ContentLanguage { get; internal set; }
        /// <summary><p>The content's MD5 hash.</p></summary>
        public virtual string ContentMd5 { get; internal set; }
        /// <summary><p>The content MIME type.</p></summary>
        public virtual string ContentType { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file update")
              .Add("--path {value}", Path)
              .Add("--share-name {value}", ShareName)
              .Add("--content-cache-control {value}", ContentCacheControl)
              .Add("--content-disposition {value}", ContentDisposition)
              .Add("--content-encoding {value}", ContentEncoding)
              .Add("--content-language {value}", ContentLanguage)
              .Add("--content-md5 {value}", ContentMd5)
              .Add("--content-type {value}", ContentType)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileUploadSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileUploadSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Path of the local file to upload as the file content.</p></summary>
        public virtual string Source { get; internal set; }
        /// <summary><p>The cache control string.</p></summary>
        public virtual string ContentCacheControl { get; internal set; }
        /// <summary><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        public virtual string ContentDisposition { get; internal set; }
        /// <summary><p>The content encoding type.</p></summary>
        public virtual string ContentEncoding { get; internal set; }
        /// <summary><p>The content language.</p></summary>
        public virtual string ContentLanguage { get; internal set; }
        /// <summary><p>The content's MD5 hash.</p></summary>
        public virtual string ContentMd5 { get; internal set; }
        /// <summary><p>The content MIME type.</p></summary>
        public virtual string ContentType { get; internal set; }
        /// <summary><p>Maximum number of parallel connections to use.</p></summary>
        public virtual int? MaxConnections { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Include this flag to disable progress reporting for the command.</p></summary>
        public virtual bool? NoProgress { get; internal set; }
        /// <summary><p>The path to the file within the file share. If the file name is omitted, the source file name will be used.</p></summary>
        public virtual string Path { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>If true, calculates an MD5 hash for each range of the file. The storage service checks the hash of the content that has arrived with the hash that was sent. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that this MD5 hash is not stored with the file.</p></summary>
        public virtual bool? ValidateContent { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file upload")
              .Add("--share-name {value}", ShareName)
              .Add("--source {value}", Source)
              .Add("--content-cache-control {value}", ContentCacheControl)
              .Add("--content-disposition {value}", ContentDisposition)
              .Add("--content-encoding {value}", ContentEncoding)
              .Add("--content-language {value}", ContentLanguage)
              .Add("--content-md5 {value}", ContentMd5)
              .Add("--content-type {value}", ContentType)
              .Add("--max-connections {value}", MaxConnections)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--no-progress", NoProgress)
              .Add("--path {value}", Path)
              .Add("--timeout {value}", Timeout)
              .Add("--validate-content", ValidateContent)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileUploadBatchSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileUploadBatchSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The destination of the upload operation.</p></summary>
        public virtual string Destination { get; internal set; }
        /// <summary><p>The directory to upload files from.</p></summary>
        public virtual string Source { get; internal set; }
        /// <summary><p>The directory where the source data is copied to. If omitted, data is copied to the root directory.</p></summary>
        public virtual string DestinationPath { get; internal set; }
        /// <summary><p>List the files and blobs to be uploaded. No actual data transfer will occur.</p></summary>
        public virtual string Dryrun { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Include this flag to disable progress reporting for the command.</p></summary>
        public virtual bool? NoProgress { get; internal set; }
        /// <summary><p>The pattern used for file globbing. The supported patterns are '*', '?', '[seq', and '[!seq]'.</p></summary>
        public virtual string Pattern { get; internal set; }
        /// <summary><p>If set, calculates an MD5 hash for each range of the file for validation.</p></summary>
        public virtual string ValidateContent { get; internal set; }
        /// <summary><p>The cache control string.</p></summary>
        public virtual string ContentCacheControl { get; internal set; }
        /// <summary><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        public virtual string ContentDisposition { get; internal set; }
        /// <summary><p>The content encoding type.</p></summary>
        public virtual string ContentEncoding { get; internal set; }
        /// <summary><p>The content language.</p></summary>
        public virtual string ContentLanguage { get; internal set; }
        /// <summary><p>The content's MD5 hash.</p></summary>
        public virtual string ContentMd5 { get; internal set; }
        /// <summary><p>The content MIME type.</p></summary>
        public virtual string ContentType { get; internal set; }
        /// <summary><p>The maximum number of parallel connections to use. Default value is 1.</p></summary>
        public virtual int? MaxConnections { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file upload-batch")
              .Add("--destination {value}", Destination)
              .Add("--source {value}", Source)
              .Add("--destination-path {value}", DestinationPath)
              .Add("--dryrun {value}", Dryrun)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--no-progress", NoProgress)
              .Add("--pattern {value}", Pattern)
              .Add("--validate-content {value}", ValidateContent)
              .Add("--content-cache-control {value}", ContentCacheControl)
              .Add("--content-disposition {value}", ContentDisposition)
              .Add("--content-encoding {value}", ContentEncoding)
              .Add("--content-language {value}", ContentLanguage)
              .Add("--content-md5 {value}", ContentMd5)
              .Add("--content-type {value}", ContentType)
              .Add("--max-connections {value}", MaxConnections)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileUrlSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileUrlSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The path to the file within the file share.</p></summary>
        public virtual string Path { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Protocol to use.</p></summary>
        public virtual StorageBlobProtocol Protocol { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file url")
              .Add("--path {value}", Path)
              .Add("--share-name {value}", ShareName)
              .Add("--protocol {value}", Protocol)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageMessageClearSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageMessageClearSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The queue name.</p></summary>
        public virtual string QueueName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage message clear")
              .Add("--queue-name {value}", QueueName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageMessageDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageMessageDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The message id identifying the message to delete.</p></summary>
        public virtual string Id { get; internal set; }
        /// <summary><p>A valid pop receipt value returned from an earlier call to the get_messages() or update_message().</p></summary>
        public virtual string PopReceipt { get; internal set; }
        /// <summary><p>The queue name.</p></summary>
        public virtual string QueueName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage message delete")
              .Add("--id {value}", Id)
              .Add("--pop-receipt {value}", PopReceipt)
              .Add("--queue-name {value}", QueueName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageMessageGetSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageMessageGetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The queue name.</p></summary>
        public virtual string QueueName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>A nonzero integer value that specifies the number of messages to retrieve from the queue, up to a maximum of 32. If fewer are visible, the visible messages are returned. By default, a single message is retrieved from the queue with this operation.</p></summary>
        public virtual string NumMessages { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 1 second, and cannot be larger than 7 days. The visibility timeout of a message can be set to a value later than the expiry time.</p></summary>
        public virtual string VisibilityTimeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage message get")
              .Add("--queue-name {value}", QueueName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--num-messages {value}", NumMessages)
              .Add("--timeout {value}", Timeout)
              .Add("--visibility-timeout {value}", VisibilityTimeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageMessagePeekSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageMessagePeekSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The queue name.</p></summary>
        public virtual string QueueName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>A nonzero integer value that specifies the number of messages to peek from the queue, up to a maximum of 32. By default, a single message is peeked from the queue with this operation.</p></summary>
        public virtual string NumMessages { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage message peek")
              .Add("--queue-name {value}", QueueName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--num-messages {value}", NumMessages)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageMessagePutSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageMessagePutSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Message content, up to 64KB in size.</p></summary>
        public virtual string Content { get; internal set; }
        /// <summary><p>The queue name.</p></summary>
        public virtual string QueueName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Specifies the time-to-live interval for the message, in seconds. The time-to-live may be any positive number or -1 for infinity. If this parameter is omitted, the default time-to-live is 7 days.</p></summary>
        public virtual string TimeToLive { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>If not specified, the default value is 0. Specifies the new visibility timeout value, in seconds, relative to server time. The value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. visibility_timeout should be set to a value smaller than the time-to-live value.</p></summary>
        public virtual string VisibilityTimeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage message put")
              .Add("--content {value}", Content)
              .Add("--queue-name {value}", QueueName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--time-to-live {value}", TimeToLive)
              .Add("--timeout {value}", Timeout)
              .Add("--visibility-timeout {value}", VisibilityTimeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageMessageUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageMessageUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The message id identifying the message to update.</p></summary>
        public virtual string Id { get; internal set; }
        /// <summary><p>A valid pop receipt value returned from an earlier call to the get_messages() or update_message() operation.</p></summary>
        public virtual string PopReceipt { get; internal set; }
        /// <summary><p>The queue name.</p></summary>
        public virtual string QueueName { get; internal set; }
        /// <summary><p>Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. A message can be updated until it has been deleted or has expired.</p></summary>
        public virtual string VisibilityTimeout { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Message content, up to 64KB in size.</p></summary>
        public virtual string Content { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage message update")
              .Add("--id {value}", Id)
              .Add("--pop-receipt {value}", PopReceipt)
              .Add("--queue-name {value}", QueueName)
              .Add("--visibility-timeout {value}", VisibilityTimeout)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--content {value}", Content)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountCheckNameSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountCheckNameSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage account name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account check-name")
              .Add("--name {value}", Name)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountCreateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage account name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The access tier used for billing StandardBlob accounts. Cannot be set for StandardLRS, StandardGRS, StandardRAGRS, or PremiumLRS account types. It is required for StandardBlob accounts during creation.</p></summary>
        public virtual StorageAccountAccessTier AccessTier { get; internal set; }
        /// <summary><p>Generate and assign a new Storage Account Identity for this storage account for use with key management services like Azure KeyVault.</p></summary>
        public virtual string AssignIdentity { get; internal set; }
        /// <summary><p>User domain assigned to the storage account. Name is the CNAME source.</p></summary>
        public virtual string CustomDomain { get; internal set; }
        /// <summary><p>Specifies which service(s) to encrypt.</p></summary>
        public virtual StorageAccountEncryptionServices EncryptionServices { get; internal set; }
        /// <summary><p>Allows https traffic only to storage service.</p></summary>
        public virtual bool? HttpsOnly { get; internal set; }
        /// <summary><p>Indicates the type of storage account.</p></summary>
        public virtual StorageAccountCreateKind Kind { get; internal set; }
        /// <summary><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        public virtual string Location { get; internal set; }
        /// <summary><p>The storage account SKU.</p></summary>
        public virtual StorageAccountSku Sku { get; internal set; }
        /// <summary><p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>Bypass traffic for space-separated uses.</p></summary>
        public virtual StorageAccountBypass Bypass { get; internal set; }
        /// <summary><p>Default action to apply when no rule matches.</p></summary>
        public virtual StorageAccountDefaultAction DefaultAction { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--access-tier {value}", AccessTier)
              .Add("--assign-identity {value}", AssignIdentity)
              .Add("--custom-domain {value}", CustomDomain)
              .Add("--encryption-services {value}", EncryptionServices)
              .Add("--https-only", HttpsOnly)
              .Add("--kind {value}", Kind)
              .Add("--location {value}", Location)
              .Add("--sku {value}", Sku)
              .Add("--tags {value}", Tags)
              .Add("--bypass {value}", Bypass)
              .Add("--default-action {value}", DefaultAction)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage account name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account delete")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--yes {value}", Yes)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountGenerateSasSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountGenerateSasSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid.</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>The permissions the SAS grants. Allowed values: (a)dd (c)reate (d)elete (l)ist (p)rocess (r)ead (u)pdate (w)rite. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>The resource types the SAS is applicable for. Allowed values: (s)ervice (c)ontainer (o)bject. Can be combined.</p></summary>
        public virtual string ResourceTypes { get; internal set; }
        /// <summary><p>The storage services the SAS is applicable for. Allowed values: (b)lob (f)ile (q)ueue (t)able. Can be combined.</p></summary>
        public virtual string Services { get; internal set; }
        /// <summary><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        public virtual string HttpsOnly { get; internal set; }
        /// <summary><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        public virtual string Ip { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Defaults to the time of the request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Must be used in conjunction with either storage account key or a SAS token. Environment Variable: AZURE_STORAGE_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account generate-sas")
              .Add("--expiry {value}", Expiry)
              .Add("--permissions {value}", Permissions)
              .Add("--resource-types {value}", ResourceTypes)
              .Add("--services {value}", Services)
              .Add("--https-only {value}", HttpsOnly)
              .Add("--ip {value}", Ip)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage account name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountShowConnectionStringSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountShowConnectionStringSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage account name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Custom endpoint for blobs.</p></summary>
        public virtual string BlobEndpoint { get; internal set; }
        /// <summary><p>Custom endpoint for files.</p></summary>
        public virtual string FileEndpoint { get; internal set; }
        /// <summary><p>The key to use.</p></summary>
        public virtual StorageAccountKey Key { get; internal set; }
        /// <summary><p>The default endpoint protocol.</p></summary>
        public virtual StorageBlobProtocol Protocol { get; internal set; }
        /// <summary><p>Custom endpoint for queues.</p></summary>
        public virtual string QueueEndpoint { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The SAS token to be used in the connection-string.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Custom endpoint for tables.</p></summary>
        public virtual string TableEndpoint { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account show-connection-string")
              .Add("--name {value}", Name)
              .Add("--blob-endpoint {value}", BlobEndpoint)
              .Add("--file-endpoint {value}", FileEndpoint)
              .Add("--key {value}", Key)
              .Add("--protocol {value}", Protocol)
              .Add("--queue-endpoint {value}", QueueEndpoint)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--sas-token {value}", SasToken)
              .Add("--table-endpoint {value}", TableEndpoint)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountShowUsageSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountShowUsageSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        public virtual string Location { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account show-usage")
              .Add("--location {value}", Location)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage account name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The access tier used for billing StandardBlob accounts. Cannot be set for StandardLRS, StandardGRS, StandardRAGRS, or PremiumLRS account types. It is required for StandardBlob accounts during creation.</p></summary>
        public virtual StorageAccountAccessTier AccessTier { get; internal set; }
        /// <summary><p>Generate and assign a new Storage Account Identity for this storage account for use with key management services like Azure KeyVault.</p></summary>
        public virtual string AssignIdentity { get; internal set; }
        /// <summary><p>User domain assigned to the storage account. Name is the CNAME source. Use "" to clear existing value.</p></summary>
        public virtual string CustomDomain { get; internal set; }
        /// <summary><p>Specifies which service(s) to encrypt.</p></summary>
        public virtual StorageAccountEncryptionServices EncryptionServices { get; internal set; }
        /// <summary><p>Allows https traffic only to storage service.</p></summary>
        public virtual bool? HttpsOnly { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The storage account SKU.</p></summary>
        public virtual StorageAccountSku Sku { get; internal set; }
        /// <summary><p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>Specify whether to use indirect CNAME validation.</p></summary>
        public virtual bool? UseSubdomain { get; internal set; }
        /// <summary><p>The name of the KeyVault key.</p></summary>
        public virtual string EncryptionKeyName { get; internal set; }
        /// <summary><p>The default encryption service.</p></summary>
        public virtual StorageAccountUpdateEncryptionKeySource EncryptionKeySource { get; internal set; }
        /// <summary><p>The Uri of the KeyVault.</p></summary>
        public virtual string EncryptionKeyVault { get; internal set; }
        /// <summary><p>The version of the KeyVault key.</p></summary>
        public virtual string EncryptionKeyVersion { get; internal set; }
        /// <summary><p>Bypass traffic for space-separated uses.</p></summary>
        public virtual StorageAccountBypass Bypass { get; internal set; }
        /// <summary><p>Default action to apply when no rule matches.</p></summary>
        public virtual StorageAccountDefaultAction DefaultAction { get; internal set; }
        /// <summary><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        public virtual string Add { get; internal set; }
        /// <summary><p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p></summary>
        public virtual string ForceString { get; internal set; }
        /// <summary><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        public virtual string Remove { get; internal set; }
        /// <summary><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        public virtual string Set { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account update")
              .Add("--name {value}", Name)
              .Add("--access-tier {value}", AccessTier)
              .Add("--assign-identity {value}", AssignIdentity)
              .Add("--custom-domain {value}", CustomDomain)
              .Add("--encryption-services {value}", EncryptionServices)
              .Add("--https-only", HttpsOnly)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--sku {value}", Sku)
              .Add("--tags {value}", Tags)
              .Add("--use-subdomain", UseSubdomain)
              .Add("--encryption-key-name {value}", EncryptionKeyName)
              .Add("--encryption-key-source {value}", EncryptionKeySource)
              .Add("--encryption-key-vault {value}", EncryptionKeyVault)
              .Add("--encryption-key-version {value}", EncryptionKeyVersion)
              .Add("--bypass {value}", Bypass)
              .Add("--default-action {value}", DefaultAction)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageShareCreateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageShareCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Specify whether to throw an exception when the share exists. False by default.</p></summary>
        public virtual string FailOnExist { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120).</p></summary>
        public virtual string Quota { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share create")
              .Add("--name {value}", Name)
              .Add("--fail-on-exist {value}", FailOnExist)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--quota {value}", Quota)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageShareDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageShareDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Specify the deletion strategy when the share has snapshots.</p></summary>
        public virtual StorageShareDeleteDeleteSnapshots DeleteSnapshots { get; internal set; }
        /// <summary><p>Specify whether to throw an exception when the share doesn't exist. False by default.</p></summary>
        public virtual string FailNotExist { get; internal set; }
        /// <summary><p>A string that represents the snapshot version, if applicable. Specify this argument to delete a specific snapshot only. delete_snapshots must be None if this is specified.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share delete")
              .Add("--name {value}", Name)
              .Add("--delete-snapshots {value}", DeleteSnapshots)
              .Add("--fail-not-exist {value}", FailNotExist)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageShareExistsSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageShareExistsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>A string that represents the snapshot version, if applicable.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share exists")
              .Add("--name {value}", Name)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageShareGenerateSasSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageShareGenerateSasSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Response header value for Cache-Control when resource is accessed using this shared access signature.</p></summary>
        public virtual string CacheControl { get; internal set; }
        /// <summary><p>Response header value for Content-Disposition when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentDisposition { get; internal set; }
        /// <summary><p>Response header value for Content-Encoding when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentEncoding { get; internal set; }
        /// <summary><p>Response header value for Content-Language when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentLanguage { get; internal set; }
        /// <summary><p>Response header value for Content-Type when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentType { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        public virtual string HttpsOnly { get; internal set; }
        /// <summary><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        public virtual string Ip { get; internal set; }
        /// <summary><p>The permissions the SAS grants. Allowed values: (d)elete (l)ist (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>The name of a stored access policy within the share's ACL.</p></summary>
        public virtual string PolicyName { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share generate-sas")
              .Add("--name {value}", Name)
              .Add("--cache-control {value}", CacheControl)
              .Add("--content-disposition {value}", ContentDisposition)
              .Add("--content-encoding {value}", ContentEncoding)
              .Add("--content-language {value}", ContentLanguage)
              .Add("--content-type {value}", ContentType)
              .Add("--expiry {value}", Expiry)
              .Add("--https-only {value}", HttpsOnly)
              .Add("--ip {value}", Ip)
              .Add("--permissions {value}", Permissions)
              .Add("--policy-name {value}", PolicyName)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageShareListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageShareListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Specifies that share metadata be returned in the response.</p></summary>
        public virtual string IncludeMetadata { get; internal set; }
        /// <summary><p>Specifies that share snapshots be returned in the response.</p></summary>
        public virtual string IncludeSnapshots { get; internal set; }
        /// <summary><p>Specifies the maximum number of shares to return.</p></summary>
        public virtual int? NumResults { get; internal set; }
        /// <summary><p>Filters the results to return only shares whose names begin with the specified prefix.</p></summary>
        public virtual string Prefix { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share list")
              .Add("--include-metadata {value}", IncludeMetadata)
              .Add("--include-snapshots {value}", IncludeSnapshots)
              .Add("--num-results {value}", NumResults)
              .Add("--prefix {value}", Prefix)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageShareShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageShareShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>A string that represents the snapshot version, if applicable.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share show")
              .Add("--name {value}", Name)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageShareSnapshotSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageShareSnapshotSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120).</p></summary>
        public virtual string Quota { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share snapshot")
              .Add("--name {value}", Name)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--quota {value}", Quota)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageShareStatsSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageShareStatsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share stats")
              .Add("--name {value}", Name)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageShareUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageShareUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5 TB (5120 GB).</p></summary>
        public virtual string Quota { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share update")
              .Add("--name {value}", Name)
              .Add("--quota {value}", Quota)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageShareUrlSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageShareUrlSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Protocol to use.</p></summary>
        public virtual StorageBlobProtocol Protocol { get; internal set; }
        /// <summary><p>Output UNC network path.</p></summary>
        public virtual string Unc { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share url")
              .Add("--name {value}", Name)
              .Add("--protocol {value}", Protocol)
              .Add("--unc {value}", Unc)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageDirectoryCreateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageDirectoryCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The directory name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Specify whether to throw an exception when the directory exists. False by default.</p></summary>
        public virtual string FailOnExist { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage directory create")
              .Add("--name {value}", Name)
              .Add("--share-name {value}", ShareName)
              .Add("--fail-on-exist {value}", FailOnExist)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageDirectoryDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageDirectoryDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The directory name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Specify whether to throw an exception when the directory doesn't exist.</p></summary>
        public virtual string FailNotExist { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage directory delete")
              .Add("--name {value}", Name)
              .Add("--share-name {value}", ShareName)
              .Add("--fail-not-exist {value}", FailNotExist)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageDirectoryExistsSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageDirectoryExistsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The directory name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>A string that represents the snapshot version, if applicable.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage directory exists")
              .Add("--name {value}", Name)
              .Add("--share-name {value}", ShareName)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageDirectoryListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageDirectoryListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>The directory name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage directory list")
              .Add("--share-name {value}", ShareName)
              .Add("--name {value}", Name)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageDirectoryShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageDirectoryShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The directory name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>A string that represents the snapshot version, if applicable.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage directory show")
              .Add("--name {value}", Name)
              .Add("--share-name {value}", ShareName)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageEntityDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageEntityDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The PartitionKey of the entity.</p></summary>
        public virtual string PartitionKey { get; internal set; }
        /// <summary><p>The RowKey of the entity.</p></summary>
        public virtual string RowKey { get; internal set; }
        /// <summary><p>The name of the table containing the entity to delete.</p></summary>
        public virtual string TableName { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>The client may specify the ETag for the entity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The delete operation will be performed only if the ETag sent by the client matches the value maintained by the server, indicating that the entity has not been modified since it was retrieved by the client. To force an unconditional delete, set If-Match to the wildcard character (*).</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage entity delete")
              .Add("--partition-key {value}", PartitionKey)
              .Add("--row-key {value}", RowKey)
              .Add("--table-name {value}", TableName)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageEntityInsertSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageEntityInsertSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Space-separated list of key=value pairs. Must contain a PartitionKey and a RowKey.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Entity => EntityInternal.AsReadOnly();
        internal Dictionary<string, object> EntityInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The name of the table to insert the entity into.</p></summary>
        public virtual string TableName { get; internal set; }
        /// <summary><p>Behavior when an entity already exists for the specified PartitionKey and RowKey.</p></summary>
        public virtual StorageEntityInsertIfExists IfExists { get; internal set; }
        /// <summary><p>The server timeout, expressed in seconds.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage entity insert")
              .Add("--entity {value}", Entity, "{key}={value}", separator: ' ')
              .Add("--table-name {value}", TableName)
              .Add("--if-exists {value}", IfExists)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageEntityMergeSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageEntityMergeSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The entity to merge. Could be a dict or an entity object. Must contain a PartitionKey and a RowKey.</p></summary>
        public virtual string Entity { get; internal set; }
        /// <summary><p>The name of the table containing the entity to merge.</p></summary>
        public virtual string TableName { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>The client may specify the ETag for the entity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The merge operation will be performed only if the ETag sent by the client matches the value maintained by the server, indicating that the entity has not been modified since it was retrieved by the client. To force an unconditional merge, set If-Match to the wildcard character (*).</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage entity merge")
              .Add("--entity {value}", Entity)
              .Add("--table-name {value}", TableName)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageEntityQuerySettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageEntityQuerySettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of the table to query.</p></summary>
        public virtual string TableName { get; internal set; }
        /// <summary><p>Specifies how much metadata to include in the response payload.</p></summary>
        public virtual StorageEntityQueryAccept Accept { get; internal set; }
        /// <summary><p>Returns only entities that satisfy the specified filter. Note that no more than 15 discrete comparisons are permitted within a $filter string. See <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx">http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx</a> for more information on constructing filters.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>Space-separated list of key=value pairs. Must contain a nextpartitionkey and a nextrowkey.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Marker => MarkerInternal.AsReadOnly();
        internal Dictionary<string, object> MarkerInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The maximum number of entities to return.</p></summary>
        public virtual int? NumResults { get; internal set; }
        /// <summary><p>Space-separated list of properties to return for each entity.</p></summary>
        public virtual IReadOnlyList<string> Select => SelectInternal.AsReadOnly();
        internal List<string> SelectInternal { get; set; } = new List<string>();
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage entity query")
              .Add("--table-name {value}", TableName)
              .Add("--accept {value}", Accept)
              .Add("--filter {value}", Filter)
              .Add("--marker {value}", Marker, "{key}={value}", separator: ' ')
              .Add("--num-results {value}", NumResults)
              .Add("--select {value}", Select, separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageEntityReplaceSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageEntityReplaceSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The entity to update. Could be a dict or an entity object. Must contain a PartitionKey and a RowKey.</p></summary>
        public virtual string Entity { get; internal set; }
        /// <summary><p>The name of the table containing the entity to update.</p></summary>
        public virtual string TableName { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>The client may specify the ETag for the entity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The update operation will be performed only if the ETag sent by the client matches the value maintained by the server, indicating that the entity has not been modified since it was retrieved by the client. To force an unconditional update, set If-Match to the wildcard character (*).</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage entity replace")
              .Add("--entity {value}", Entity)
              .Add("--table-name {value}", TableName)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageEntityShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageEntityShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The PartitionKey of the entity.</p></summary>
        public virtual string PartitionKey { get; internal set; }
        /// <summary><p>The RowKey of the entity.</p></summary>
        public virtual string RowKey { get; internal set; }
        /// <summary><p>The name of the table to get the entity from.</p></summary>
        public virtual string TableName { get; internal set; }
        /// <summary><p>Specifies the accepted content type of the response payload. See TablePayloadFormat for possible values.</p></summary>
        public virtual string Accept { get; internal set; }
        /// <summary><p>Space-separated list of properties to return for each entity.</p></summary>
        public virtual IReadOnlyList<string> Select => SelectInternal.AsReadOnly();
        internal List<string> SelectInternal { get; set; } = new List<string>();
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage entity show")
              .Add("--partition-key {value}", PartitionKey)
              .Add("--row-key {value}", RowKey)
              .Add("--table-name {value}", TableName)
              .Add("--accept {value}", Accept)
              .Add("--select {value}", Select, separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageLoggingShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageLoggingShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage services from which to retrieve logging info: (b)lob (q)ueue (t)able. Can be combined.</p></summary>
        public virtual string Services { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage logging show")
              .Add("--services {value}", Services)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageLoggingUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageLoggingUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The operations for which to enable logging: (r)ead (w)rite (d)elete. Can be combined.</p></summary>
        public virtual string Log { get; internal set; }
        /// <summary><p>Number of days for which to retain logs. 0 to disable.</p></summary>
        public virtual int? Retention { get; internal set; }
        /// <summary><p>The storage service(s) for which to update logging info: (b)lob (q)ueue (t)able. Can be combined.</p></summary>
        public virtual string Services { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage logging update")
              .Add("--log {value}", Log)
              .Add("--retention {value}", Retention)
              .Add("--services {value}", Services)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageTableCreateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageTableCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of the table to create. The table name may contain only alphanumeric characters and cannot begin with a numeric character. It is case-insensitive and must be from 3 to 63 characters long.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Throw an exception if the table already exists.</p></summary>
        public virtual string FailOnExist { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage table create")
              .Add("--name {value}", Name)
              .Add("--fail-on-exist {value}", FailOnExist)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageTableDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageTableDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of the table to delete.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Specifies whether to throw an exception if the table doesn't exist.</p></summary>
        public virtual bool? FailNotExist { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage table delete")
              .Add("--name {value}", Name)
              .Add("--fail-not-exist", FailNotExist)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageTableExistsSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageTableExistsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of table to check for existence.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage table exists")
              .Add("--name {value}", Name)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageTableGenerateSasSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageTableGenerateSasSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of the table to create a SAS token for.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The maximum partition key accessible with this shared access signature. endpk must accompany endrk. Key values are inclusive. If omitted, there is no upper bound on the table entities that can be accessed.</p></summary>
        public virtual string EndPk { get; internal set; }
        /// <summary><p>The maximum row key accessible with this shared access signature. endpk must accompany endrk. Key values are inclusive. If omitted, there is no upper bound on the table entities that can be accessed.</p></summary>
        public virtual string EndRk { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        public virtual string HttpsOnly { get; internal set; }
        /// <summary><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        public virtual string Ip { get; internal set; }
        /// <summary><p>The permissions the SAS grants. Allowed values: (r)ead/query (a)dd (u)pdate (d)elete. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>The name of a stored access policy within the table's ACL.</p></summary>
        public virtual string PolicyName { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>The minimum partition key accessible with this shared access signature. startpk must accompany startrk. Key values are inclusive. If omitted, there is no lower bound on the table entities that can be accessed.</p></summary>
        public virtual string StartPk { get; internal set; }
        /// <summary><p>The minimum row key accessible with this shared access signature. startpk must accompany startrk. Key values are inclusive. If omitted, there is no lower bound on the table entities that can be accessed.</p></summary>
        public virtual string StartRk { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage table generate-sas")
              .Add("--name {value}", Name)
              .Add("--end-pk {value}", EndPk)
              .Add("--end-rk {value}", EndRk)
              .Add("--expiry {value}", Expiry)
              .Add("--https-only {value}", HttpsOnly)
              .Add("--ip {value}", Ip)
              .Add("--permissions {value}", Permissions)
              .Add("--policy-name {value}", PolicyName)
              .Add("--start {value}", Start)
              .Add("--start-pk {value}", StartPk)
              .Add("--start-rk {value}", StartRk)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageTableListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageTableListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>An opaque continuation object. This value can be retrieved from the next_marker field of a previous generator object if num_results was specified and that generator has finished enumerating results. If specified, this generator will begin returning results from the point where the previous generator stopped.</p></summary>
        public virtual string Marker { get; internal set; }
        /// <summary><p>The maximum number of tables to return.</p></summary>
        public virtual int? NumResults { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage table list")
              .Add("--marker {value}", Marker)
              .Add("--num-results {value}", NumResults)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageTableStatsSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageTableStatsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage table stats")
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerCreateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Throw an exception if the container already exists.</p></summary>
        public virtual string FailOnExist { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Specifies whether data in the container may be accessed publically. By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.</p></summary>
        public virtual bool? PublicAccess { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container create")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--fail-on-exist {value}", FailOnExist)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--public-access", PublicAccess)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Bypasses upcoming service behavior that will block a container from being deleted if it has a immutability-policy. Specifying this will ignore arguments aside from those used to identify the container ("--name", "--account-name").</p></summary>
        public virtual string BypassImmutabilityPolicy { get; internal set; }
        /// <summary><p>Throw an exception if the container does not exist.</p></summary>
        public virtual string FailNotExist { get; internal set; }
        /// <summary><p>If specified, delete_container only succeeds if the container's lease is active and matches this ID. Required if the container has an active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container delete")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--bypass-immutability-policy {value}", BypassImmutabilityPolicy)
              .Add("--fail-not-exist {value}", FailNotExist)
              .Add("--lease-id {value}", LeaseId)
              .Add("--timeout {value}", Timeout)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerExistsSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerExistsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container exists")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerGenerateSasSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerGenerateSasSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Response header value for Cache-Control when resource is accessed using this shared access signature.</p></summary>
        public virtual string CacheControl { get; internal set; }
        /// <summary><p>Response header value for Content-Disposition when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentDisposition { get; internal set; }
        /// <summary><p>Response header value for Content-Encoding when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentEncoding { get; internal set; }
        /// <summary><p>Response header value for Content-Language when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentLanguage { get; internal set; }
        /// <summary><p>Response header value for Content-Type when resource is accessed using this shared access signature.</p></summary>
        public virtual string ContentType { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        public virtual string HttpsOnly { get; internal set; }
        /// <summary><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        public virtual string Ip { get; internal set; }
        /// <summary><p>The permissions the SAS grants. Allowed values: (d)elete (l)ist (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>The name of a stored access policy within the container's ACL.</p></summary>
        public virtual string PolicyName { get; internal set; }
        /// <summary><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container generate-sas")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--cache-control {value}", CacheControl)
              .Add("--content-disposition {value}", ContentDisposition)
              .Add("--content-encoding {value}", ContentEncoding)
              .Add("--content-language {value}", ContentLanguage)
              .Add("--content-type {value}", ContentType)
              .Add("--expiry {value}", Expiry)
              .Add("--https-only {value}", HttpsOnly)
              .Add("--ip {value}", Ip)
              .Add("--permissions {value}", Permissions)
              .Add("--policy-name {value}", PolicyName)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Specifies that container metadata be returned in the response.</p></summary>
        public virtual string IncludeMetadata { get; internal set; }
        /// <summary><p>Specifies the maximum number of containers to return.</p></summary>
        public virtual int? NumResults { get; internal set; }
        /// <summary><p>Filters the results to return only containers whose names begin with the specified prefix.</p></summary>
        public virtual string Prefix { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container list")
              .Add("--auth-mode {value}", AuthMode)
              .Add("--include-metadata {value}", IncludeMetadata)
              .Add("--num-results {value}", NumResults)
              .Add("--prefix {value}", Prefix)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerSetPermissionSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerSetPermissionSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>If specified, set_container_acl only succeeds if the container's lease is active and matches this ID.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Specifies whether data in the container may be accessed publically. By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.</p></summary>
        public virtual bool? PublicAccess { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container set-permission")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--public-access", PublicAccess)
              .Add("--timeout {value}", Timeout)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>If specified, get_container_properties only succeeds if the container's lease is active and matches this ID.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container show")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerShowPermissionSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerShowPermissionSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>If specified, get_container_acl only succeeds if the container's lease is active and matches this ID.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container show-permission")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageMetricsShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageMetricsShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Filter the set of metrics to retrieve by time interval.</p></summary>
        public virtual StorageMetricsShowInterval Interval { get; internal set; }
        /// <summary><p>The storage services from which to retrieve metrics info: (b)lob (q)ueue (t)able. Can be combined.</p></summary>
        public virtual string Services { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage metrics show")
              .Add("--interval {value}", Interval)
              .Add("--services {value}", Services)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageMetricsUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageMetricsUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Number of days for which to retain metrics. 0 to disable. Applies to both hour and minute metrics if both are specified.</p></summary>
        public virtual int? Retention { get; internal set; }
        /// <summary><p>The storage services from which to retrieve metrics info: (b)lob (q)ueue (t)able. Can be combined.</p></summary>
        public virtual string Services { get; internal set; }
        /// <summary><p>Specify whether to include API in metrics. Applies to both hour and minute metrics if both are specified. Must be specified if hour or minute metrics are enabled and being updated.</p></summary>
        public virtual bool? Api { get; internal set; }
        /// <summary><p>Update the hourly metrics.</p></summary>
        public virtual bool? Hour { get; internal set; }
        /// <summary><p>Update the by-minute metrics.</p></summary>
        public virtual bool? Minute { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage metrics update")
              .Add("--retention {value}", Retention)
              .Add("--services {value}", Services)
              .Add("--api", Api)
              .Add("--hour", Hour)
              .Add("--minute", Minute)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileMetadataShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileMetadataShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The path to the file within the file share.</p></summary>
        public virtual string Path { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>A string that represents the snapshot version, if applicable.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file metadata show")
              .Add("--path {value}", Path)
              .Add("--share-name {value}", ShareName)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileMetadataUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileMetadataUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The path to the file within the file share.</p></summary>
        public virtual string Path { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file metadata update")
              .Add("--path {value}", Path)
              .Add("--share-name {value}", ShareName)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileCopyCancelSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileCopyCancelSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Copy identifier provided in the copy.id of the original copy_file operation.</p></summary>
        public virtual string CopyId { get; internal set; }
        /// <summary><p>The path to the file within the file share.</p></summary>
        public virtual string DestinationPath { get; internal set; }
        /// <summary><p>Name of the destination share. The share must exist.</p></summary>
        public virtual string DestinationShare { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file copy cancel")
              .Add("--copy-id {value}", CopyId)
              .Add("--destination-path {value}", DestinationPath)
              .Add("--destination-share {value}", DestinationShare)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileCopyStartSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileCopyStartSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The path to the file within the file share.</p></summary>
        public virtual string DestinationPath { get; internal set; }
        /// <summary><p>Name of the destination share. The share must exist.</p></summary>
        public virtual string DestinationShare { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>The storage account key of the source blob.</p></summary>
        public virtual string SourceAccountKey { get; internal set; }
        /// <summary><p>The storage account name of the source blob.</p></summary>
        public virtual string SourceAccountName { get; internal set; }
        /// <summary><p>The blob name for the source storage account.</p></summary>
        public virtual string SourceBlob { get; internal set; }
        /// <summary><p>The container name for the source storage account.</p></summary>
        public virtual string SourceContainer { get; internal set; }
        /// <summary><p>The file path for the source storage account.</p></summary>
        public virtual string SourcePath { get; internal set; }
        /// <summary><p>The shared access signature for the source storage account.</p></summary>
        public virtual string SourceSas { get; internal set; }
        /// <summary><p>The share name for the source storage account.</p></summary>
        public virtual string SourceShare { get; internal set; }
        /// <summary><p>The blob snapshot for the source storage account.</p></summary>
        public virtual string SourceSnapshot { get; internal set; }
        /// <summary><p>A URL of up to 2 KB in length that specifies an Azure file or blob. The value should be URL-encoded as it would appear in a request URI. If the source is in another account, the source must either be public or must be authenticated via a shared access signature. If the source is public, no authentication is required. Examples: <a href="https://myaccount.file.core.windows.net/myshare/mydir/myfile">https://myaccount.file.core.windows.net/myshare/mydir/myfile</a> <a href="https://otheraccount.file.core.windows.net/myshare/mydir/myfile?sastoken">https://otheraccount.file.core.windows.net/myshare/mydir/myfile?sastoken</a>.</p></summary>
        public virtual string SourceUri { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file copy start")
              .Add("--destination-path {value}", DestinationPath)
              .Add("--destination-share {value}", DestinationShare)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--source-account-key {value}", SourceAccountKey)
              .Add("--source-account-name {value}", SourceAccountName)
              .Add("--source-blob {value}", SourceBlob)
              .Add("--source-container {value}", SourceContainer)
              .Add("--source-path {value}", SourcePath)
              .Add("--source-sas {value}", SourceSas)
              .Add("--source-share {value}", SourceShare)
              .Add("--source-snapshot {value}", SourceSnapshot)
              .Add("--source-uri {value}", SourceUri)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageFileCopyStartBatchSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageFileCopyStartBatchSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The directory where the source data is copied to. If omitted, data is copied to the root directory.</p></summary>
        public virtual string DestinationPath { get; internal set; }
        /// <summary><p>The file share where the source data is copied to.</p></summary>
        public virtual string DestinationShare { get; internal set; }
        /// <summary><p>List the files and blobs to be copied. No actual data transfer will occur.</p></summary>
        public virtual string Dryrun { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The pattern used for globbing files and blobs. The supported patterns are '*', '?', '[seq', and '[!seq]'.</p></summary>
        public virtual string Pattern { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>The account key for the source storage account. If omitted, the active login is used to determine the account key.</p></summary>
        public virtual string SourceAccountKey { get; internal set; }
        /// <summary><p>The source storage account to copy the data from. If omitted, the destination account is used.</p></summary>
        public virtual string SourceAccountName { get; internal set; }
        /// <summary><p>The source container blobs are copied from.</p></summary>
        public virtual string SourceContainer { get; internal set; }
        /// <summary><p>The shared access signature for the source storage account.</p></summary>
        public virtual string SourceSas { get; internal set; }
        /// <summary><p>The source share files are copied from.</p></summary>
        public virtual string SourceShare { get; internal set; }
        /// <summary><p>A URI that specifies a the source file share or blob container.</p></summary>
        public virtual string SourceUri { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage file copy start-batch")
              .Add("--destination-path {value}", DestinationPath)
              .Add("--destination-share {value}", DestinationShare)
              .Add("--dryrun {value}", Dryrun)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--pattern {value}", Pattern)
              .Add("--timeout {value}", Timeout)
              .Add("--source-account-key {value}", SourceAccountKey)
              .Add("--source-account-name {value}", SourceAccountName)
              .Add("--source-container {value}", SourceContainer)
              .Add("--source-sas {value}", SourceSas)
              .Add("--source-share {value}", SourceShare)
              .Add("--source-uri {value}", SourceUri)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerLegalHoldClearSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerLegalHoldClearSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container legal-hold clear")
              .Add("--account-name {value}", AccountName)
              .Add("--container-name {value}", ContainerName)
              .Add("--tags {value}", Tags)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerLegalHoldSetSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerLegalHoldSetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container legal-hold set")
              .Add("--account-name {value}", AccountName)
              .Add("--container-name {value}", ContainerName)
              .Add("--tags {value}", Tags)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerLegalHoldShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerLegalHoldShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container legal-hold show")
              .Add("--account-name {value}", AccountName)
              .Add("--container-name {value}", ContainerName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerLeaseAcquireSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerLeaseAcquireSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change. Default is -1 (infinite lease).</p></summary>
        public virtual string LeaseDuration { get; internal set; }
        /// <summary><p>Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.</p></summary>
        public virtual string ProposedLeaseId { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container lease acquire")
              .Add("--container-name {value}", ContainerName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-duration {value}", LeaseDuration)
              .Add("--proposed-lease-id {value}", ProposedLeaseId)
              .Add("--timeout {value}", Timeout)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerLeaseBreakSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerLeaseBreakSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>This is the proposed duration of seconds that the lease should continue before it is broken, between 0 and 60 seconds. This break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease will not be available before the break period has expired, but the lease may be held for longer than the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks immediately.</p></summary>
        public virtual string LeaseBreakPeriod { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container lease break")
              .Add("--container-name {value}", ContainerName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-break-period {value}", LeaseBreakPeriod)
              .Add("--timeout {value}", Timeout)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerLeaseChangeSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerLeaseChangeSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Lease ID for active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.</p></summary>
        public virtual string ProposedLeaseId { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container lease change")
              .Add("--container-name {value}", ContainerName)
              .Add("--lease-id {value}", LeaseId)
              .Add("--proposed-lease-id {value}", ProposedLeaseId)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerLeaseReleaseSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerLeaseReleaseSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Lease ID for active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container lease release")
              .Add("--container-name {value}", ContainerName)
              .Add("--lease-id {value}", LeaseId)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerLeaseRenewSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerLeaseRenewSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Lease ID for active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container lease renew")
              .Add("--container-name {value}", ContainerName)
              .Add("--lease-id {value}", LeaseId)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerMetadataShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerMetadataShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>If specified, get_container_metadata only succeeds if the container's lease is active and matches this ID.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container metadata show")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerMetadataUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerMetadataUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>If specified, set_container_metadata only succeeds if the container's lease is active and matches this ID.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container metadata update")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerImmutabilityPolicyCreateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerImmutabilityPolicyCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The immutability period for the blobs in the container since the policy creation, in days.</p></summary>
        public virtual string Period { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container immutability-policy create")
              .Add("--account-name {value}", AccountName)
              .Add("--container-name {value}", ContainerName)
              .Add("--period {value}", Period)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--if-match {value}", IfMatch)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerImmutabilityPolicyDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerImmutabilityPolicyDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container immutability-policy delete")
              .Add("--account-name {value}", AccountName)
              .Add("--container-name {value}", ContainerName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--if-match {value}", IfMatch)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerImmutabilityPolicyExtendSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerImmutabilityPolicyExtendSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The immutability period for the blobs in the container since the policy creation, in days.</p></summary>
        public virtual string Period { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container immutability-policy extend")
              .Add("--account-name {value}", AccountName)
              .Add("--container-name {value}", ContainerName)
              .Add("--period {value}", Period)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--if-match {value}", IfMatch)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerImmutabilityPolicyLockSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerImmutabilityPolicyLockSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container immutability-policy lock")
              .Add("--account-name {value}", AccountName)
              .Add("--container-name {value}", ContainerName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--if-match {value}", IfMatch)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerImmutabilityPolicyShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerImmutabilityPolicyShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container immutability-policy show")
              .Add("--account-name {value}", AccountName)
              .Add("--container-name {value}", ContainerName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--if-match {value}", IfMatch)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerPolicyCreateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerPolicyCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>The container lease ID.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container policy create")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--expiry {value}", Expiry)
              .Add("--lease-id {value}", LeaseId)
              .Add("--permissions {value}", Permissions)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerPolicyDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerPolicyDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>The container lease ID.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container policy delete")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerPolicyListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerPolicyListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>The container lease ID.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container policy list")
              .Add("--container-name {value}", ContainerName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerPolicyShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerPolicyShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>The container lease ID.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container policy show")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageContainerPolicyUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageContainerPolicyUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>The container lease ID.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage container policy update")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--expiry {value}", Expiry)
              .Add("--lease-id {value}", LeaseId)
              .Add("--permissions {value}", Permissions)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageShareMetadataShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageShareMetadataShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>A string that represents the snapshot version, if applicable.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share metadata show")
              .Add("--name {value}", Name)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageShareMetadataUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageShareMetadataUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share metadata update")
              .Add("--name {value}", Name)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageSharePolicyCreateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageSharePolicyCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share policy create")
              .Add("--name {value}", Name)
              .Add("--share-name {value}", ShareName)
              .Add("--expiry {value}", Expiry)
              .Add("--permissions {value}", Permissions)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageSharePolicyDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageSharePolicyDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share policy delete")
              .Add("--name {value}", Name)
              .Add("--share-name {value}", ShareName)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageSharePolicyListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageSharePolicyListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share policy list")
              .Add("--share-name {value}", ShareName)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageSharePolicyShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageSharePolicyShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share policy show")
              .Add("--name {value}", Name)
              .Add("--share-name {value}", ShareName)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageSharePolicyUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageSharePolicyUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage share policy update")
              .Add("--name {value}", Name)
              .Add("--share-name {value}", ShareName)
              .Add("--expiry {value}", Expiry)
              .Add("--permissions {value}", Permissions)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageDirectoryMetadataShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageDirectoryMetadataShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The directory name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>A string that represents the snapshot version, if applicable.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage directory metadata show")
              .Add("--name {value}", Name)
              .Add("--share-name {value}", ShareName)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageDirectoryMetadataUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageDirectoryMetadataUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The directory name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The file share name.</p></summary>
        public virtual string ShareName { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage directory metadata update")
              .Add("--name {value}", Name)
              .Add("--share-name {value}", ShareName)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountKeysListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountKeysListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage account name.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account keys list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountKeysRenewSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountKeysRenewSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage account name.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The key to regenerate.</p></summary>
        public virtual StorageAccountKey Key { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account keys renew")
              .Add("--account-name {value}", AccountName)
              .Add("--key {value}", Key)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountNetworkRuleAddSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountNetworkRuleAddSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage account name.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The action of virtual network rule.</p></summary>
        public virtual string Action { get; internal set; }
        /// <summary><p>IPv4 address or CIDR range.</p></summary>
        public virtual string IpAddress { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p></summary>
        public virtual string Subnet { get; internal set; }
        /// <summary><p>Name of a virtual network.</p></summary>
        public virtual string VnetName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account network-rule add")
              .Add("--account-name {value}", AccountName)
              .Add("--action {value}", Action)
              .Add("--ip-address {value}", IpAddress)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subnet {value}", Subnet)
              .Add("--vnet-name {value}", VnetName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountNetworkRuleListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountNetworkRuleListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage account name.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account network-rule list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageAccountNetworkRuleRemoveSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageAccountNetworkRuleRemoveSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The storage account name.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>IPv4 address or CIDR range.</p></summary>
        public virtual string IpAddress { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p></summary>
        public virtual string Subnet { get; internal set; }
        /// <summary><p>Name of a virtual network.</p></summary>
        public virtual string VnetName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage account network-rule remove")
              .Add("--account-name {value}", AccountName)
              .Add("--ip-address {value}", IpAddress)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subnet {value}", Subnet)
              .Add("--vnet-name {value}", VnetName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueueMetadataShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueueMetadataShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The queue name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue metadata show")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueueMetadataUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueueMetadataUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The queue name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue metadata update")
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueuePolicyCreateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueuePolicyCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The queue name.</p></summary>
        public virtual string QueueName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>Allowed values: (a)dd (p)rocess (r)ead (u)pdate. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue policy create")
              .Add("--name {value}", Name)
              .Add("--queue-name {value}", QueueName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--expiry {value}", Expiry)
              .Add("--permissions {value}", Permissions)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueuePolicyDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueuePolicyDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The queue name.</p></summary>
        public virtual string QueueName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue policy delete")
              .Add("--name {value}", Name)
              .Add("--queue-name {value}", QueueName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueuePolicyListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueuePolicyListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The queue name.</p></summary>
        public virtual string QueueName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue policy list")
              .Add("--queue-name {value}", QueueName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueuePolicyShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueuePolicyShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The queue name.</p></summary>
        public virtual string QueueName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue policy show")
              .Add("--name {value}", Name)
              .Add("--queue-name {value}", QueueName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageQueuePolicyUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageQueuePolicyUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The queue name.</p></summary>
        public virtual string QueueName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>Allowed values: (a)dd (p)rocess (r)ead (u)pdate. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage queue policy update")
              .Add("--name {value}", Name)
              .Add("--queue-name {value}", QueueName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--expiry {value}", Expiry)
              .Add("--permissions {value}", Permissions)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageTablePolicyCreateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageTablePolicyCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string TableName { get; internal set; }
        /// <summary><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>Allowed values: (r)ead/query (a)dd (u)pdate (d)elete. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage table policy create")
              .Add("--name {value}", Name)
              .Add("--table-name {value}", TableName)
              .Add("--expiry {value}", Expiry)
              .Add("--permissions {value}", Permissions)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageTablePolicyDeleteSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageTablePolicyDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string TableName { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage table policy delete")
              .Add("--name {value}", Name)
              .Add("--table-name {value}", TableName)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageTablePolicyListSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageTablePolicyListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string TableName { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage table policy list")
              .Add("--table-name {value}", TableName)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageTablePolicyShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageTablePolicyShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string TableName { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage table policy show")
              .Add("--name {value}", Name)
              .Add("--table-name {value}", TableName)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageTablePolicyUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageTablePolicyUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The stored access policy name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string TableName { get; internal set; }
        /// <summary><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        public virtual string Expiry { get; internal set; }
        /// <summary><p>Allowed values: (r)ead/query (a)dd (u)pdate (d)elete. Can be combined.</p></summary>
        public virtual string Permissions { get; internal set; }
        /// <summary><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        public virtual string Start { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage table policy update")
              .Add("--name {value}", Name)
              .Add("--table-name {value}", TableName)
              .Add("--expiry {value}", Expiry)
              .Add("--permissions {value}", Permissions)
              .Add("--start {value}", Start)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobLeaseAcquireSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobLeaseAcquireSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The blob name.</p></summary>
        public virtual string BlobName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change. Default is -1 (infinite lease).</p></summary>
        public virtual string LeaseDuration { get; internal set; }
        /// <summary><p>Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.</p></summary>
        public virtual string ProposedLeaseId { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob lease acquire")
              .Add("--blob-name {value}", BlobName)
              .Add("--container-name {value}", ContainerName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-duration {value}", LeaseDuration)
              .Add("--proposed-lease-id {value}", ProposedLeaseId)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobLeaseBreakSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobLeaseBreakSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The blob name.</p></summary>
        public virtual string BlobName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>For a break operation, this is the proposed duration of seconds that the lease should continue before it is broken, between 0 and 60 seconds. This break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease will not be available before the break period has expired, but the lease may be held for longer than the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks immediately.</p></summary>
        public virtual string LeaseBreakPeriod { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob lease break")
              .Add("--blob-name {value}", BlobName)
              .Add("--container-name {value}", ContainerName)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-break-period {value}", LeaseBreakPeriod)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobLeaseChangeSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobLeaseChangeSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The blob name.</p></summary>
        public virtual string BlobName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Required if the blob has an active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.</p></summary>
        public virtual string ProposedLeaseId { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob lease change")
              .Add("--blob-name {value}", BlobName)
              .Add("--container-name {value}", ContainerName)
              .Add("--lease-id {value}", LeaseId)
              .Add("--proposed-lease-id {value}", ProposedLeaseId)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobLeaseReleaseSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobLeaseReleaseSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The blob name.</p></summary>
        public virtual string BlobName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Lease ID for active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob lease release")
              .Add("--blob-name {value}", BlobName)
              .Add("--container-name {value}", ContainerName)
              .Add("--lease-id {value}", LeaseId)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobLeaseRenewSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobLeaseRenewSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The blob name.</p></summary>
        public virtual string BlobName { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Lease ID for active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob lease renew")
              .Add("--blob-name {value}", BlobName)
              .Add("--container-name {value}", ContainerName)
              .Add("--lease-id {value}", LeaseId)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobMetadataShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobMetadataShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Required if the blob has an active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>The snapshot parameter is an opaque value that, when present, specifies the blob snapshot to retrieve.</p></summary>
        public virtual string Snapshot { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob metadata show")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--snapshot {value}", Snapshot)
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobMetadataUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobMetadataUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Required if the blob has an active lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob metadata update")
              .Add("--container-name {value}", ContainerName)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobCopyCancelSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobCopyCancelSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Copy identifier provided in the copy.id of the original copy_blob operation.</p></summary>
        public virtual string CopyId { get; internal set; }
        /// <summary><p>Name of the destination blob. If the exists, it will be overwritten.</p></summary>
        public virtual string DestinationBlob { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string DestinationContainer { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Required if the destination blob has an active infinite lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob copy cancel")
              .Add("--copy-id {value}", CopyId)
              .Add("--destination-blob {value}", DestinationBlob)
              .Add("--destination-container {value}", DestinationContainer)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobCopyStartSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobCopyStartSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Name of the destination blob. If the exists, it will be overwritten.</p></summary>
        public virtual string DestinationBlob { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string DestinationContainer { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>The lease ID specified for this header must match the lease ID of the destination blob. If the request does not include the lease ID or it is not valid, the operation fails with status code 412 (Precondition Failed).</p></summary>
        public virtual string DestinationLeaseId { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>The storage account key of the source blob.</p></summary>
        public virtual string SourceAccountKey { get; internal set; }
        /// <summary><p>The storage account name of the source blob.</p></summary>
        public virtual string SourceAccountName { get; internal set; }
        /// <summary><p>The blob name for the source storage account.</p></summary>
        public virtual string SourceBlob { get; internal set; }
        /// <summary><p>The container name for the source storage account.</p></summary>
        public virtual string SourceContainer { get; internal set; }
        /// <summary><p>Specify this to perform the Copy Blob operation only if the lease ID given matches the active lease ID of the source blob.</p></summary>
        public virtual string SourceLeaseId { get; internal set; }
        /// <summary><p>The file path for the source storage account.</p></summary>
        public virtual string SourcePath { get; internal set; }
        /// <summary><p>The shared access signature for the source storage account.</p></summary>
        public virtual string SourceSas { get; internal set; }
        /// <summary><p>The share name for the source storage account.</p></summary>
        public virtual string SourceShare { get; internal set; }
        /// <summary><p>The blob snapshot for the source storage account.</p></summary>
        public virtual string SourceSnapshot { get; internal set; }
        /// <summary><p>A URL of up to 2 KB in length that specifies an Azure file or blob. The value should be URL-encoded as it would appear in a request URI. If the source is in another account, the source must either be public or must be authenticated via a shared access signature. If the source is public, no authentication is required. Examples: <a href="https://myaccount.blob.core.windows.net/mycontainer/myblob">https://myaccount.blob.core.windows.net/mycontainer/myblob</a> <a href="https://myaccount.blob.core.windows.net/mycontainer/myblob">https://myaccount.blob.core.windows.net/mycontainer/myblob</a>?snapshot=&lt;DateTime&gt; <a href="https://otheraccount.blob.core.windows.net/mycontainer/myblob?sastoken">https://otheraccount.blob.core.windows.net/mycontainer/myblob?sastoken</a>.</p></summary>
        public virtual string SourceUri { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value matches the ETag value for an existing destination blob. If the ETag for the destination blob does not match the ETag specified for If-Match, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        public virtual string DestinationIfMatch { get; internal set; }
        /// <summary><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has been modified since the specified date/time. If the destination blob has not been modified, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        public virtual string DestinationIfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value does not match the ETag value for the destination blob. Specify the wildcard character (*) to perform the operation only if the destination blob does not exist. If the specified condition isn't met, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        public virtual string DestinationIfNoneMatch { get; internal set; }
        /// <summary><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has not been modified since the specified date/time. If the destination blob has been modified, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        public virtual string DestinationIfUnmodifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this conditional header to copy the source blob only if its ETag matches the value specified. If the ETag values do not match, the Blob service returns status code 412 (Precondition Failed). This header cannot be specified if the source is an Azure File.</p></summary>
        public virtual string SourceIfMatch { get; internal set; }
        /// <summary><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the source blob has been modified since the specified date/time.</p></summary>
        public virtual string SourceIfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify this conditional header to copy the blob only if its ETag does not match the value specified. If the values are identical, the Blob service returns status code 412 (Precondition Failed). This header cannot be specified if the source is an Azure File.</p></summary>
        public virtual string SourceIfNoneMatch { get; internal set; }
        /// <summary><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the source blob has not been modified since the specified date/time.</p></summary>
        public virtual string SourceIfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob copy start")
              .Add("--destination-blob {value}", DestinationBlob)
              .Add("--destination-container {value}", DestinationContainer)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--destination-lease-id {value}", DestinationLeaseId)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--source-account-key {value}", SourceAccountKey)
              .Add("--source-account-name {value}", SourceAccountName)
              .Add("--source-blob {value}", SourceBlob)
              .Add("--source-container {value}", SourceContainer)
              .Add("--source-lease-id {value}", SourceLeaseId)
              .Add("--source-path {value}", SourcePath)
              .Add("--source-sas {value}", SourceSas)
              .Add("--source-share {value}", SourceShare)
              .Add("--source-snapshot {value}", SourceSnapshot)
              .Add("--source-uri {value}", SourceUri)
              .Add("--destination-if-match {value}", DestinationIfMatch)
              .Add("--destination-if-modified-since {value}", DestinationIfModifiedSince)
              .Add("--destination-if-none-match {value}", DestinationIfNoneMatch)
              .Add("--destination-if-unmodified-since {value}", DestinationIfUnmodifiedSince)
              .Add("--source-if-match {value}", SourceIfMatch)
              .Add("--source-if-modified-since {value}", SourceIfModifiedSince)
              .Add("--source-if-none-match {value}", SourceIfNoneMatch)
              .Add("--source-if-unmodified-since {value}", SourceIfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobCopyStartBatchSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobCopyStartBatchSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>The blob container where the selected source files or blobs will be copied to.</p></summary>
        public virtual string DestinationContainer { get; internal set; }
        /// <summary><p>The destination path that will be appended to the blob name.</p></summary>
        public virtual string DestinationPath { get; internal set; }
        /// <summary><p>List the files or blobs to be uploaded. No actual data transfer will occur.</p></summary>
        public virtual string Dryrun { get; internal set; }
        /// <summary><p>The pattern used for globbing files or blobs in the source. The supported patterns are '*', '?', '[seq', and '[!seq]'.</p></summary>
        public virtual string Pattern { get; internal set; }
        /// <summary><p>The account key for the source storage account.</p></summary>
        public virtual string SourceAccountKey { get; internal set; }
        /// <summary><p>The source storage account from which the files or blobs are copied to the destination. If omitted, the source account is used.</p></summary>
        public virtual string SourceAccountName { get; internal set; }
        /// <summary><p>The source container from which blobs are copied.</p></summary>
        public virtual string SourceContainer { get; internal set; }
        /// <summary><p>The shared access signature for the source storage account.</p></summary>
        public virtual string SourceSas { get; internal set; }
        /// <summary><p>The source share from which files are copied.</p></summary>
        public virtual string SourceShare { get; internal set; }
        /// <summary><p>A URI specifying a file share or blob container from which the files or blobs are copied.</p></summary>
        public virtual string SourceUri { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob copy start-batch")
              .Add("--auth-mode {value}", AuthMode)
              .Add("--destination-container {value}", DestinationContainer)
              .Add("--destination-path {value}", DestinationPath)
              .Add("--dryrun {value}", Dryrun)
              .Add("--pattern {value}", Pattern)
              .Add("--source-account-key {value}", SourceAccountKey)
              .Add("--source-account-name {value}", SourceAccountName)
              .Add("--source-container {value}", SourceContainer)
              .Add("--source-sas {value}", SourceSas)
              .Add("--source-share {value}", SourceShare)
              .Add("--source-uri {value}", SourceUri)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobServicePropertiesShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobServicePropertiesShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob service-properties show")
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobIncrementalCopyCancelSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobIncrementalCopyCancelSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The container name.</p></summary>
        public virtual string ContainerName { get; internal set; }
        /// <summary><p>Copy identifier provided in the copy.id of the original copy_blob operation.</p></summary>
        public virtual string CopyId { get; internal set; }
        /// <summary><p>The blob name.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Required if the destination blob has an active infinite lease.</p></summary>
        public virtual string LeaseId { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob incremental-copy cancel")
              .Add("--container-name {value}", ContainerName)
              .Add("--copy-id {value}", CopyId)
              .Add("--name {value}", Name)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--lease-id {value}", LeaseId)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobIncrementalCopyStartSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobIncrementalCopyStartSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>Name of the destination blob. If the exists, it will be overwritten.</p></summary>
        public virtual string DestinationBlob { get; internal set; }
        /// <summary><p>The container name.</p></summary>
        public virtual string DestinationContainer { get; internal set; }
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>The lease ID specified for this header must match the lease ID of the destination blob. If the request does not include the lease ID or it is not valid, the operation fails with status code 412 (Precondition Failed).</p></summary>
        public virtual string DestinationLeaseId { get; internal set; }
        /// <summary><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>The storage account key of the source blob.</p></summary>
        public virtual string SourceAccountKey { get; internal set; }
        /// <summary><p>The storage account name of the source blob.</p></summary>
        public virtual string SourceAccountName { get; internal set; }
        /// <summary><p>The blob name for the source storage account.</p></summary>
        public virtual string SourceBlob { get; internal set; }
        /// <summary><p>The container name for the source storage account.</p></summary>
        public virtual string SourceContainer { get; internal set; }
        /// <summary><p>Specify this to perform the Copy Blob operation only if the lease ID given matches the active lease ID of the source blob.</p></summary>
        public virtual string SourceLeaseId { get; internal set; }
        /// <summary><p>The shared access signature for the source storage account.</p></summary>
        public virtual string SourceSas { get; internal set; }
        /// <summary><p>The blob snapshot for the source storage account.</p></summary>
        public virtual string SourceSnapshot { get; internal set; }
        /// <summary><p>A URL of up to 2 KB in length that specifies an Azure page blob. The value should be URL-encoded as it would appear in a request URI. The copy source must be a snapshot and include a valid SAS token or be public. Example: <a href="https://myaccount.blob.core.windows.net/mycontainer/myblob">https://myaccount.blob.core.windows.net/mycontainer/myblob</a>?snapshot=&amp;lt;DateTime&amp;gt;&amp;amp;sastoken.</p></summary>
        public virtual string SourceUri { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value matches the ETag value for an existing destination blob. If the ETag for the destination blob does not match the ETag specified for If-Match, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        public virtual string DestinationIfMatch { get; internal set; }
        /// <summary><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has been modified since the specified date/time. If the destination blob has not been modified, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        public virtual string DestinationIfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value, or the wildcard character (*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value does not match the ETag value for the destination blob. Specify the wildcard character (*) to perform the operation only if the destination blob does not exist. If the specified condition isn't met, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        public virtual string DestinationIfNoneMatch { get; internal set; }
        /// <summary><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has not been modified since the specified ate/time. If the destination blob has been modified, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        public virtual string DestinationIfUnmodifiedSince { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob incremental-copy start")
              .Add("--destination-blob {value}", DestinationBlob)
              .Add("--destination-container {value}", DestinationContainer)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--destination-lease-id {value}", DestinationLeaseId)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--timeout {value}", Timeout)
              .Add("--source-account-key {value}", SourceAccountKey)
              .Add("--source-account-name {value}", SourceAccountName)
              .Add("--source-blob {value}", SourceBlob)
              .Add("--source-container {value}", SourceContainer)
              .Add("--source-lease-id {value}", SourceLeaseId)
              .Add("--source-sas {value}", SourceSas)
              .Add("--source-snapshot {value}", SourceSnapshot)
              .Add("--source-uri {value}", SourceUri)
              .Add("--destination-if-match {value}", DestinationIfMatch)
              .Add("--destination-if-modified-since {value}", DestinationIfModifiedSince)
              .Add("--destination-if-none-match {value}", DestinationIfNoneMatch)
              .Add("--destination-if-unmodified-since {value}", DestinationIfUnmodifiedSince)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobServicePropertiesDeletePolicyShowSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobServicePropertiesDeletePolicyShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        public virtual string Timeout { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob service-properties delete-policy show")
              .Add("--auth-mode {value}", AuthMode)
              .Add("--timeout {value}", Timeout)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureStorage executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureStorageTasks.AzureStoragePath;
        /// <summary><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        public virtual StorageQueueAuthMode AuthMode { get; internal set; }
        /// <summary><p>Number of days that soft-deleted blob will be retained. Must be in range [1,365].</p></summary>
        public virtual int? DaysRetained { get; internal set; }
        /// <summary><p>Enables/disables soft-delete.</p></summary>
        public virtual bool? Enable { get; internal set; }
        /// <summary><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        public virtual string ConnectionString { get; internal set; }
        /// <summary><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        public virtual string SasToken { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("storage blob service-properties delete-policy update")
              .Add("--auth-mode {value}", AuthMode)
              .Add("--days-retained {value}", DaysRetained)
              .Add("--enable", Enable)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--connection-string {value}", ConnectionString)
              .Add("--sas-token {value}", SasToken)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureStorageSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageSettingsExtensions
    {
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageSettings SetDebug(this AzureStorageSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageSettings ResetDebug(this AzureStorageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageSettings SetHelp(this AzureStorageSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageSettings ResetHelp(this AzureStorageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageSettings SetOutput(this AzureStorageSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageSettings ResetOutput(this AzureStorageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageSettings SetQuery(this AzureStorageSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageSettings ResetQuery(this AzureStorageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageSettings SetVerbose(this AzureStorageSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageSettings ResetVerbose(this AzureStorageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueueCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueueCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.Name"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetName(this AzureStorageQueueCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.Name"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetName(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetAuthMode(this AzureStorageQueueCreateSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetAuthMode(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region FailOnExist
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.FailOnExist"/>.</em></p><p>Specifies whether to throw an exception if the queue already exists.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetFailOnExist(this AzureStorageQueueCreateSettings toolSettings, bool? failOnExist)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = failOnExist;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.FailOnExist"/>.</em></p><p>Specifies whether to throw an exception if the queue already exists.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetFailOnExist(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageQueueCreateSettings.FailOnExist"/>.</em></p><p>Specifies whether to throw an exception if the queue already exists.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings EnableFailOnExist(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageQueueCreateSettings.FailOnExist"/>.</em></p><p>Specifies whether to throw an exception if the queue already exists.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings DisableFailOnExist(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageQueueCreateSettings.FailOnExist"/>.</em></p><p>Specifies whether to throw an exception if the queue already exists.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ToggleFailOnExist(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = !toolSettings.FailOnExist;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetMetadata(this AzureStorageQueueCreateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageQueueCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ClearMetadata(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageQueueCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings AddMetadatum(this AzureStorageQueueCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageQueueCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings RemoveMetadatum(this AzureStorageQueueCreateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageQueueCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetMetadatum(this AzureStorageQueueCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetTimeout(this AzureStorageQueueCreateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetTimeout(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetAccountKey(this AzureStorageQueueCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetAccountKey(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetAccountName(this AzureStorageQueueCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetAccountName(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetConnectionString(this AzureStorageQueueCreateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetConnectionString(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetSasToken(this AzureStorageQueueCreateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetSasToken(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetDebug(this AzureStorageQueueCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetDebug(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetHelp(this AzureStorageQueueCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetHelp(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetOutput(this AzureStorageQueueCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetOutput(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetQuery(this AzureStorageQueueCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetQuery(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueueCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings SetVerbose(this AzureStorageQueueCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueCreateSettings ResetVerbose(this AzureStorageQueueCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueueDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueueDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.Name"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetName(this AzureStorageQueueDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.Name"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetName(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetAuthMode(this AzureStorageQueueDeleteSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetAuthMode(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region FailNotExist
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.FailNotExist"/>.</em></p><p>Specifies whether to throw an exception if the queue doesn't exist.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetFailNotExist(this AzureStorageQueueDeleteSettings toolSettings, bool? failNotExist)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = failNotExist;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.FailNotExist"/>.</em></p><p>Specifies whether to throw an exception if the queue doesn't exist.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetFailNotExist(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageQueueDeleteSettings.FailNotExist"/>.</em></p><p>Specifies whether to throw an exception if the queue doesn't exist.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings EnableFailNotExist(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageQueueDeleteSettings.FailNotExist"/>.</em></p><p>Specifies whether to throw an exception if the queue doesn't exist.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings DisableFailNotExist(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageQueueDeleteSettings.FailNotExist"/>.</em></p><p>Specifies whether to throw an exception if the queue doesn't exist.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ToggleFailNotExist(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = !toolSettings.FailNotExist;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetTimeout(this AzureStorageQueueDeleteSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetTimeout(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetAccountKey(this AzureStorageQueueDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetAccountKey(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetAccountName(this AzureStorageQueueDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetAccountName(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetConnectionString(this AzureStorageQueueDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetConnectionString(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetSasToken(this AzureStorageQueueDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetSasToken(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetDebug(this AzureStorageQueueDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetDebug(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetHelp(this AzureStorageQueueDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetHelp(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetOutput(this AzureStorageQueueDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetOutput(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetQuery(this AzureStorageQueueDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetQuery(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueueDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings SetVerbose(this AzureStorageQueueDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueDeleteSettings ResetVerbose(this AzureStorageQueueDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueueExistsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueueExistsSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageQueueExistsSettings.Name"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings SetName(this AzureStorageQueueExistsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueExistsSettings.Name"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings ResetName(this AzureStorageQueueExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueueExistsSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings SetAuthMode(this AzureStorageQueueExistsSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueExistsSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings ResetAuthMode(this AzureStorageQueueExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageQueueExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings SetTimeout(this AzureStorageQueueExistsSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings ResetTimeout(this AzureStorageQueueExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueueExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings SetAccountKey(this AzureStorageQueueExistsSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings ResetAccountKey(this AzureStorageQueueExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueueExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings SetAccountName(this AzureStorageQueueExistsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings ResetAccountName(this AzureStorageQueueExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueueExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings SetConnectionString(this AzureStorageQueueExistsSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings ResetConnectionString(this AzureStorageQueueExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueueExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings SetSasToken(this AzureStorageQueueExistsSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings ResetSasToken(this AzureStorageQueueExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueueExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings SetDebug(this AzureStorageQueueExistsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings ResetDebug(this AzureStorageQueueExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueueExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings SetHelp(this AzureStorageQueueExistsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings ResetHelp(this AzureStorageQueueExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueueExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings SetOutput(this AzureStorageQueueExistsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings ResetOutput(this AzureStorageQueueExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueueExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings SetQuery(this AzureStorageQueueExistsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings ResetQuery(this AzureStorageQueueExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueueExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings SetVerbose(this AzureStorageQueueExistsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueExistsSettings ResetVerbose(this AzureStorageQueueExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueueGenerateSasSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueueGenerateSasSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.Name"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetName(this AzureStorageQueueGenerateSasSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.Name"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetName(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetAuthMode(this AzureStorageQueueGenerateSasSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetAuthMode(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetExpiry(this AzureStorageQueueGenerateSasSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetExpiry(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region HttpsOnly
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetHttpsOnly(this AzureStorageQueueGenerateSasSettings toolSettings, string httpsOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = httpsOnly;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetHttpsOnly(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = null;
            return toolSettings;
        }
        #endregion
        #region Ip
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetIp(this AzureStorageQueueGenerateSasSettings toolSettings, string ip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = ip;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetIp(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (a)dd (p)rocess (r)ead (u)pdate. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetPermissions(this AzureStorageQueueGenerateSasSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (a)dd (p)rocess (r)ead (u)pdate. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetPermissions(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region PolicyName
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.PolicyName"/>.</em></p><p>The name of a stored access policy within the share's ACL.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetPolicyName(this AzureStorageQueueGenerateSasSettings toolSettings, string policyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyName = policyName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.PolicyName"/>.</em></p><p>The name of a stored access policy within the share's ACL.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetPolicyName(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyName = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetStart(this AzureStorageQueueGenerateSasSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetStart(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetAccountKey(this AzureStorageQueueGenerateSasSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetAccountKey(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetAccountName(this AzureStorageQueueGenerateSasSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetAccountName(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetConnectionString(this AzureStorageQueueGenerateSasSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetConnectionString(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetSasToken(this AzureStorageQueueGenerateSasSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetSasToken(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetDebug(this AzureStorageQueueGenerateSasSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetDebug(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetHelp(this AzureStorageQueueGenerateSasSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetHelp(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetOutput(this AzureStorageQueueGenerateSasSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetOutput(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetQuery(this AzureStorageQueueGenerateSasSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetQuery(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueueGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings SetVerbose(this AzureStorageQueueGenerateSasSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueGenerateSasSettings ResetVerbose(this AzureStorageQueueGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueueListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueueListSettingsExtensions
    {
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetAuthMode(this AzureStorageQueueListSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetAuthMode(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region IncludeMetadata
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.IncludeMetadata"/>.</em></p><p>Specifies that container metadata be returned in the response.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetIncludeMetadata(this AzureStorageQueueListSettings toolSettings, string includeMetadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludeMetadata = includeMetadata;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.IncludeMetadata"/>.</em></p><p>Specifies that container metadata be returned in the response.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetIncludeMetadata(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludeMetadata = null;
            return toolSettings;
        }
        #endregion
        #region Marker
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.Marker"/>.</em></p><p>An opaque continuation token. This value can be retrieved from the next_marker field of a previous generator object if num_results was specified and that generator has finished enumerating results. If specified, this generator will begin returning results from the point where the previous generator stopped.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetMarker(this AzureStorageQueueListSettings toolSettings, string marker)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Marker = marker;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.Marker"/>.</em></p><p>An opaque continuation token. This value can be retrieved from the next_marker field of a previous generator object if num_results was specified and that generator has finished enumerating results. If specified, this generator will begin returning results from the point where the previous generator stopped.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetMarker(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Marker = null;
            return toolSettings;
        }
        #endregion
        #region NumResults
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.NumResults"/>.</em></p><p>The maximum number of queues to return.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetNumResults(this AzureStorageQueueListSettings toolSettings, int? numResults)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumResults = numResults;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.NumResults"/>.</em></p><p>The maximum number of queues to return.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetNumResults(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumResults = null;
            return toolSettings;
        }
        #endregion
        #region Prefix
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.Prefix"/>.</em></p><p>Filters the results to return only queues with names that begin with the specified prefix.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetPrefix(this AzureStorageQueueListSettings toolSettings, string prefix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prefix = prefix;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.Prefix"/>.</em></p><p>Filters the results to return only queues with names that begin with the specified prefix.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetPrefix(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prefix = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetTimeout(this AzureStorageQueueListSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetTimeout(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetAccountKey(this AzureStorageQueueListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetAccountKey(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetAccountName(this AzureStorageQueueListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetAccountName(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetConnectionString(this AzureStorageQueueListSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetConnectionString(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetSasToken(this AzureStorageQueueListSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetSasToken(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetDebug(this AzureStorageQueueListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetDebug(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetHelp(this AzureStorageQueueListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetHelp(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetOutput(this AzureStorageQueueListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetOutput(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetQuery(this AzureStorageQueueListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetQuery(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueueListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings SetVerbose(this AzureStorageQueueListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueListSettings ResetVerbose(this AzureStorageQueueListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueueStatsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueueStatsSettingsExtensions
    {
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueueStatsSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings SetAuthMode(this AzureStorageQueueStatsSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueStatsSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings ResetAuthMode(this AzureStorageQueueStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageQueueStatsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings SetTimeout(this AzureStorageQueueStatsSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueStatsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings ResetTimeout(this AzureStorageQueueStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueueStatsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings SetAccountKey(this AzureStorageQueueStatsSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueStatsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings ResetAccountKey(this AzureStorageQueueStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueueStatsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings SetAccountName(this AzureStorageQueueStatsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueStatsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings ResetAccountName(this AzureStorageQueueStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueueStatsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings SetConnectionString(this AzureStorageQueueStatsSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueStatsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings ResetConnectionString(this AzureStorageQueueStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueueStatsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings SetSasToken(this AzureStorageQueueStatsSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueStatsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings ResetSasToken(this AzureStorageQueueStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueueStatsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings SetDebug(this AzureStorageQueueStatsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueStatsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings ResetDebug(this AzureStorageQueueStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueueStatsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings SetHelp(this AzureStorageQueueStatsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueStatsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings ResetHelp(this AzureStorageQueueStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueueStatsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings SetOutput(this AzureStorageQueueStatsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueStatsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings ResetOutput(this AzureStorageQueueStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueueStatsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings SetQuery(this AzureStorageQueueStatsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueStatsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings ResetQuery(this AzureStorageQueueStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueueStatsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings SetVerbose(this AzureStorageQueueStatsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueStatsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueStatsSettings ResetVerbose(this AzureStorageQueueStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageCorsAddSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageCorsAddSettingsExtensions
    {
        #region Methods
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.Methods"/> to a new list.</em></p><p>Space-separated list of HTTP methods allowed to be executed by the origin.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetMethods(this AzureStorageCorsAddSettings toolSettings, params StorageCorsAddMethods[] methods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MethodsInternal = methods.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.Methods"/> to a new list.</em></p><p>Space-separated list of HTTP methods allowed to be executed by the origin.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetMethods(this AzureStorageCorsAddSettings toolSettings, IEnumerable<StorageCorsAddMethods> methods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MethodsInternal = methods.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="AzureStorageCorsAddSettings.Methods"/>.</em></p><p>Space-separated list of HTTP methods allowed to be executed by the origin.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings AddMethods(this AzureStorageCorsAddSettings toolSettings, params StorageCorsAddMethods[] methods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MethodsInternal.AddRange(methods);
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="AzureStorageCorsAddSettings.Methods"/>.</em></p><p>Space-separated list of HTTP methods allowed to be executed by the origin.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings AddMethods(this AzureStorageCorsAddSettings toolSettings, IEnumerable<StorageCorsAddMethods> methods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MethodsInternal.AddRange(methods);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageCorsAddSettings.Methods"/>.</em></p><p>Space-separated list of HTTP methods allowed to be executed by the origin.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ClearMethods(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MethodsInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="AzureStorageCorsAddSettings.Methods"/>.</em></p><p>Space-separated list of HTTP methods allowed to be executed by the origin.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings RemoveMethods(this AzureStorageCorsAddSettings toolSettings, params StorageCorsAddMethods[] methods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<StorageCorsAddMethods>(methods);
            toolSettings.MethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="AzureStorageCorsAddSettings.Methods"/>.</em></p><p>Space-separated list of HTTP methods allowed to be executed by the origin.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings RemoveMethods(this AzureStorageCorsAddSettings toolSettings, IEnumerable<StorageCorsAddMethods> methods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<StorageCorsAddMethods>(methods);
            toolSettings.MethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Origins
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.Origins"/> to a new list.</em></p><p>Space-separated list of origin domains that will be allowed via CORS, or '*' to allow all domains.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetOrigins(this AzureStorageCorsAddSettings toolSettings, params string[] origins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OriginsInternal = origins.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.Origins"/> to a new list.</em></p><p>Space-separated list of origin domains that will be allowed via CORS, or '*' to allow all domains.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetOrigins(this AzureStorageCorsAddSettings toolSettings, IEnumerable<string> origins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OriginsInternal = origins.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="AzureStorageCorsAddSettings.Origins"/>.</em></p><p>Space-separated list of origin domains that will be allowed via CORS, or '*' to allow all domains.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings AddOrigins(this AzureStorageCorsAddSettings toolSettings, params string[] origins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OriginsInternal.AddRange(origins);
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="AzureStorageCorsAddSettings.Origins"/>.</em></p><p>Space-separated list of origin domains that will be allowed via CORS, or '*' to allow all domains.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings AddOrigins(this AzureStorageCorsAddSettings toolSettings, IEnumerable<string> origins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OriginsInternal.AddRange(origins);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageCorsAddSettings.Origins"/>.</em></p><p>Space-separated list of origin domains that will be allowed via CORS, or '*' to allow all domains.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ClearOrigins(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OriginsInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="AzureStorageCorsAddSettings.Origins"/>.</em></p><p>Space-separated list of origin domains that will be allowed via CORS, or '*' to allow all domains.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings RemoveOrigins(this AzureStorageCorsAddSettings toolSettings, params string[] origins)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(origins);
            toolSettings.OriginsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="AzureStorageCorsAddSettings.Origins"/>.</em></p><p>Space-separated list of origin domains that will be allowed via CORS, or '*' to allow all domains.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings RemoveOrigins(this AzureStorageCorsAddSettings toolSettings, IEnumerable<string> origins)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(origins);
            toolSettings.OriginsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Services
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.Services"/>.</em></p><p>The storage service(s) to add rules to. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetServices(this AzureStorageCorsAddSettings toolSettings, string services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = services;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsAddSettings.Services"/>.</em></p><p>The storage service(s) to add rules to. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ResetServices(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = null;
            return toolSettings;
        }
        #endregion
        #region AllowedHeaders
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.AllowedHeaders"/> to a new list.</em></p><p>Space-separated list of response headers allowed to be part of the cross-origin request.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetAllowedHeaders(this AzureStorageCorsAddSettings toolSettings, params string[] allowedHeaders)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedHeadersInternal = allowedHeaders.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.AllowedHeaders"/> to a new list.</em></p><p>Space-separated list of response headers allowed to be part of the cross-origin request.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetAllowedHeaders(this AzureStorageCorsAddSettings toolSettings, IEnumerable<string> allowedHeaders)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedHeadersInternal = allowedHeaders.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="AzureStorageCorsAddSettings.AllowedHeaders"/>.</em></p><p>Space-separated list of response headers allowed to be part of the cross-origin request.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings AddAllowedHeaders(this AzureStorageCorsAddSettings toolSettings, params string[] allowedHeaders)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedHeadersInternal.AddRange(allowedHeaders);
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="AzureStorageCorsAddSettings.AllowedHeaders"/>.</em></p><p>Space-separated list of response headers allowed to be part of the cross-origin request.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings AddAllowedHeaders(this AzureStorageCorsAddSettings toolSettings, IEnumerable<string> allowedHeaders)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedHeadersInternal.AddRange(allowedHeaders);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageCorsAddSettings.AllowedHeaders"/>.</em></p><p>Space-separated list of response headers allowed to be part of the cross-origin request.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ClearAllowedHeaders(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedHeadersInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="AzureStorageCorsAddSettings.AllowedHeaders"/>.</em></p><p>Space-separated list of response headers allowed to be part of the cross-origin request.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings RemoveAllowedHeaders(this AzureStorageCorsAddSettings toolSettings, params string[] allowedHeaders)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(allowedHeaders);
            toolSettings.AllowedHeadersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="AzureStorageCorsAddSettings.AllowedHeaders"/>.</em></p><p>Space-separated list of response headers allowed to be part of the cross-origin request.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings RemoveAllowedHeaders(this AzureStorageCorsAddSettings toolSettings, IEnumerable<string> allowedHeaders)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(allowedHeaders);
            toolSettings.AllowedHeadersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ExposedHeaders
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.ExposedHeaders"/> to a new list.</em></p><p>Space-separated list of response headers to expose to CORS clients.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetExposedHeaders(this AzureStorageCorsAddSettings toolSettings, params string[] exposedHeaders)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposedHeadersInternal = exposedHeaders.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.ExposedHeaders"/> to a new list.</em></p><p>Space-separated list of response headers to expose to CORS clients.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetExposedHeaders(this AzureStorageCorsAddSettings toolSettings, IEnumerable<string> exposedHeaders)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposedHeadersInternal = exposedHeaders.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="AzureStorageCorsAddSettings.ExposedHeaders"/>.</em></p><p>Space-separated list of response headers to expose to CORS clients.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings AddExposedHeaders(this AzureStorageCorsAddSettings toolSettings, params string[] exposedHeaders)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposedHeadersInternal.AddRange(exposedHeaders);
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="AzureStorageCorsAddSettings.ExposedHeaders"/>.</em></p><p>Space-separated list of response headers to expose to CORS clients.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings AddExposedHeaders(this AzureStorageCorsAddSettings toolSettings, IEnumerable<string> exposedHeaders)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposedHeadersInternal.AddRange(exposedHeaders);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageCorsAddSettings.ExposedHeaders"/>.</em></p><p>Space-separated list of response headers to expose to CORS clients.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ClearExposedHeaders(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposedHeadersInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="AzureStorageCorsAddSettings.ExposedHeaders"/>.</em></p><p>Space-separated list of response headers to expose to CORS clients.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings RemoveExposedHeaders(this AzureStorageCorsAddSettings toolSettings, params string[] exposedHeaders)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(exposedHeaders);
            toolSettings.ExposedHeadersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="AzureStorageCorsAddSettings.ExposedHeaders"/>.</em></p><p>Space-separated list of response headers to expose to CORS clients.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings RemoveExposedHeaders(this AzureStorageCorsAddSettings toolSettings, IEnumerable<string> exposedHeaders)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(exposedHeaders);
            toolSettings.ExposedHeadersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region MaxAge
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.MaxAge"/>.</em></p><p>The maximum number of seconds the client/browser should cache a preflight response.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetMaxAge(this AzureStorageCorsAddSettings toolSettings, int? maxAge)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxAge = maxAge;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsAddSettings.MaxAge"/>.</em></p><p>The maximum number of seconds the client/browser should cache a preflight response.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ResetMaxAge(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxAge = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetTimeout(this AzureStorageCorsAddSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsAddSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ResetTimeout(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetAccountKey(this AzureStorageCorsAddSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsAddSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ResetAccountKey(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetAccountName(this AzureStorageCorsAddSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsAddSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ResetAccountName(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetConnectionString(this AzureStorageCorsAddSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsAddSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ResetConnectionString(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetSasToken(this AzureStorageCorsAddSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsAddSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ResetSasToken(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetDebug(this AzureStorageCorsAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsAddSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ResetDebug(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetHelp(this AzureStorageCorsAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsAddSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ResetHelp(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetOutput(this AzureStorageCorsAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsAddSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ResetOutput(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetQuery(this AzureStorageCorsAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsAddSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ResetQuery(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageCorsAddSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings SetVerbose(this AzureStorageCorsAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsAddSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageCorsAddSettings ResetVerbose(this AzureStorageCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageCorsClearSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageCorsClearSettingsExtensions
    {
        #region Services
        /// <summary><p><em>Sets <see cref="AzureStorageCorsClearSettings.Services"/>.</em></p><p>The storage service(s) to remove rules from. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings SetServices(this AzureStorageCorsClearSettings toolSettings, string services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = services;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsClearSettings.Services"/>.</em></p><p>The storage service(s) to remove rules from. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings ResetServices(this AzureStorageCorsClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageCorsClearSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings SetTimeout(this AzureStorageCorsClearSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsClearSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings ResetTimeout(this AzureStorageCorsClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageCorsClearSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings SetAccountKey(this AzureStorageCorsClearSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsClearSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings ResetAccountKey(this AzureStorageCorsClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageCorsClearSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings SetAccountName(this AzureStorageCorsClearSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsClearSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings ResetAccountName(this AzureStorageCorsClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageCorsClearSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings SetConnectionString(this AzureStorageCorsClearSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsClearSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings ResetConnectionString(this AzureStorageCorsClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageCorsClearSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings SetSasToken(this AzureStorageCorsClearSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsClearSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings ResetSasToken(this AzureStorageCorsClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageCorsClearSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings SetDebug(this AzureStorageCorsClearSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsClearSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings ResetDebug(this AzureStorageCorsClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageCorsClearSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings SetHelp(this AzureStorageCorsClearSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsClearSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings ResetHelp(this AzureStorageCorsClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageCorsClearSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings SetOutput(this AzureStorageCorsClearSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsClearSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings ResetOutput(this AzureStorageCorsClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageCorsClearSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings SetQuery(this AzureStorageCorsClearSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsClearSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings ResetQuery(this AzureStorageCorsClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageCorsClearSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings SetVerbose(this AzureStorageCorsClearSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsClearSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageCorsClearSettings ResetVerbose(this AzureStorageCorsClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageCorsListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageCorsListSettingsExtensions
    {
        #region Services
        /// <summary><p><em>Sets <see cref="AzureStorageCorsListSettings.Services"/>.</em></p><p>The storage service(s) to list rules for. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings SetServices(this AzureStorageCorsListSettings toolSettings, string services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = services;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsListSettings.Services"/>.</em></p><p>The storage service(s) to list rules for. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings ResetServices(this AzureStorageCorsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageCorsListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings SetTimeout(this AzureStorageCorsListSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings ResetTimeout(this AzureStorageCorsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageCorsListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings SetAccountKey(this AzureStorageCorsListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings ResetAccountKey(this AzureStorageCorsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageCorsListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings SetAccountName(this AzureStorageCorsListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings ResetAccountName(this AzureStorageCorsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageCorsListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings SetConnectionString(this AzureStorageCorsListSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings ResetConnectionString(this AzureStorageCorsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageCorsListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings SetSasToken(this AzureStorageCorsListSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings ResetSasToken(this AzureStorageCorsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageCorsListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings SetDebug(this AzureStorageCorsListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings ResetDebug(this AzureStorageCorsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageCorsListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings SetHelp(this AzureStorageCorsListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings ResetHelp(this AzureStorageCorsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageCorsListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings SetOutput(this AzureStorageCorsListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings ResetOutput(this AzureStorageCorsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageCorsListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings SetQuery(this AzureStorageCorsListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings ResetQuery(this AzureStorageCorsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageCorsListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings SetVerbose(this AzureStorageCorsListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageCorsListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageCorsListSettings ResetVerbose(this AzureStorageCorsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobDeleteSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetContainerName(this AzureStorageBlobDeleteSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetContainerName(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetName(this AzureStorageBlobDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetName(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetAuthMode(this AzureStorageBlobDeleteSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetAuthMode(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region DeleteSnapshots
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.DeleteSnapshots"/>.</em></p><p>Required if the blob has associated snapshots.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetDeleteSnapshots(this AzureStorageBlobDeleteSettings toolSettings, StorageBlobDeleteSnapshots deleteSnapshots)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSnapshots = deleteSnapshots;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.DeleteSnapshots"/>.</em></p><p>Required if the blob has associated snapshots.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetDeleteSnapshots(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSnapshots = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetLeaseId(this AzureStorageBlobDeleteSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetLeaseId(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.Snapshot"/>.</em></p><p>The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to delete.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetSnapshot(this AzureStorageBlobDeleteSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.Snapshot"/>.</em></p><p>The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to delete.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetSnapshot(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetTimeout(this AzureStorageBlobDeleteSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetTimeout(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetIfMatch(this AzureStorageBlobDeleteSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetIfMatch(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetIfModifiedSince(this AzureStorageBlobDeleteSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetIfModifiedSince(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetIfNoneMatch(this AzureStorageBlobDeleteSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetIfNoneMatch(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetIfUnmodifiedSince(this AzureStorageBlobDeleteSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetIfUnmodifiedSince(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetAccountKey(this AzureStorageBlobDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetAccountKey(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetAccountName(this AzureStorageBlobDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetAccountName(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetConnectionString(this AzureStorageBlobDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetConnectionString(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetSasToken(this AzureStorageBlobDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetSasToken(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetDebug(this AzureStorageBlobDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetDebug(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetHelp(this AzureStorageBlobDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetHelp(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetOutput(this AzureStorageBlobDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetOutput(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetQuery(this AzureStorageBlobDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetQuery(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings SetVerbose(this AzureStorageBlobDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteSettings ResetVerbose(this AzureStorageBlobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobDeleteBatchSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobDeleteBatchSettingsExtensions
    {
        #region Source
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.Source"/>.</em></p><p>The blob container from where the files will be deleted.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetSource(this AzureStorageBlobDeleteBatchSettings toolSettings, string source)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = source;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.Source"/>.</em></p><p>The blob container from where the files will be deleted.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetSource(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetAuthMode(this AzureStorageBlobDeleteBatchSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetAuthMode(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region DeleteSnapshots
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.DeleteSnapshots"/>.</em></p><p>Required if the blob has associated snapshots.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetDeleteSnapshots(this AzureStorageBlobDeleteBatchSettings toolSettings, StorageBlobDeleteSnapshots deleteSnapshots)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSnapshots = deleteSnapshots;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.DeleteSnapshots"/>.</em></p><p>Required if the blob has associated snapshots.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetDeleteSnapshots(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSnapshots = null;
            return toolSettings;
        }
        #endregion
        #region Dryrun
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually deleting the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetDryrun(this AzureStorageBlobDeleteBatchSettings toolSettings, bool? dryrun)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = dryrun;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually deleting the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetDryrun(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageBlobDeleteBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually deleting the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings EnableDryrun(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageBlobDeleteBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually deleting the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings DisableDryrun(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageBlobDeleteBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually deleting the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ToggleDryrun(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = !toolSettings.Dryrun;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetLeaseId(this AzureStorageBlobDeleteBatchSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetLeaseId(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Pattern
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.Pattern"/>.</em></p><p>The pattern used for globbing files or blobs in the source. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetPattern(this AzureStorageBlobDeleteBatchSettings toolSettings, string pattern)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = pattern;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.Pattern"/>.</em></p><p>The pattern used for globbing files or blobs in the source. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetPattern(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetTimeout(this AzureStorageBlobDeleteBatchSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetTimeout(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetIfMatch(this AzureStorageBlobDeleteBatchSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetIfMatch(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetIfModifiedSince(this AzureStorageBlobDeleteBatchSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetIfModifiedSince(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*).</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetIfNoneMatch(this AzureStorageBlobDeleteBatchSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*).</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetIfNoneMatch(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetIfUnmodifiedSince(this AzureStorageBlobDeleteBatchSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetIfUnmodifiedSince(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetAccountKey(this AzureStorageBlobDeleteBatchSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetAccountKey(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetAccountName(this AzureStorageBlobDeleteBatchSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetAccountName(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetConnectionString(this AzureStorageBlobDeleteBatchSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetConnectionString(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetSasToken(this AzureStorageBlobDeleteBatchSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetSasToken(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetDebug(this AzureStorageBlobDeleteBatchSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetDebug(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetHelp(this AzureStorageBlobDeleteBatchSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetHelp(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetOutput(this AzureStorageBlobDeleteBatchSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetOutput(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetQuery(this AzureStorageBlobDeleteBatchSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetQuery(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDeleteBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings SetVerbose(this AzureStorageBlobDeleteBatchSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDeleteBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDeleteBatchSettings ResetVerbose(this AzureStorageBlobDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobDownloadSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobDownloadSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetContainerName(this AzureStorageBlobDownloadSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetContainerName(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.File"/>.</em></p><p>Path of file to write out to.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetFile(this AzureStorageBlobDownloadSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.File"/>.</em></p><p>Path of file to write out to.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetFile(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetName(this AzureStorageBlobDownloadSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetName(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetAuthMode(this AzureStorageBlobDownloadSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetAuthMode(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region EndRange
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.EndRange"/>.</em></p><p>End of byte range to use for downloading a section of the blob. If end_range is given, start_range must be provided. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of blob.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetEndRange(this AzureStorageBlobDownloadSettings toolSettings, string endRange)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndRange = endRange;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.EndRange"/>.</em></p><p>End of byte range to use for downloading a section of the blob. If end_range is given, start_range must be provided. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of blob.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetEndRange(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndRange = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetLeaseId(this AzureStorageBlobDownloadSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetLeaseId(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region MaxConnections
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.MaxConnections"/>.</em></p><p>If set to 2 or greater, an initial get will be done for the first self.MAX_SINGLE_GET_SIZE bytes of the blob. If this is the entire blob, the method returns at this point. If it is not, it will download the remaining data parallel using the number of threads equal to max_connections. Each chunk will be of size self.MAX_CHUNK_GET_SIZE. If set to 1, a single large get request will be done. This is not generally recommended but available if very few threads should be used, network requests are very expensive, or a non-seekable stream prevents parallel download. This may also be useful if many blobs are expected to be empty as an extra request is required for empty blobs if max_connections is greater than 1.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetMaxConnections(this AzureStorageBlobDownloadSettings toolSettings, string maxConnections)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = maxConnections;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.MaxConnections"/>.</em></p><p>If set to 2 or greater, an initial get will be done for the first self.MAX_SINGLE_GET_SIZE bytes of the blob. If this is the entire blob, the method returns at this point. If it is not, it will download the remaining data parallel using the number of threads equal to max_connections. Each chunk will be of size self.MAX_CHUNK_GET_SIZE. If set to 1, a single large get request will be done. This is not generally recommended but available if very few threads should be used, network requests are very expensive, or a non-seekable stream prevents parallel download. This may also be useful if many blobs are expected to be empty as an extra request is required for empty blobs if max_connections is greater than 1.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetMaxConnections(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = null;
            return toolSettings;
        }
        #endregion
        #region NoProgress
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetNoProgress(this AzureStorageBlobDownloadSettings toolSettings, bool? noProgress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = noProgress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetNoProgress(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageBlobDownloadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings EnableNoProgress(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageBlobDownloadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings DisableNoProgress(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageBlobDownloadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ToggleNoProgress(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = !toolSettings.NoProgress;
            return toolSettings;
        }
        #endregion
        #region OpenMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.OpenMode"/>.</em></p><p>Mode to use when opening the file. Note that specifying append only open_mode prevents parallel download. So, max_connections must be set to 1 if this open_mode is used.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetOpenMode(this AzureStorageBlobDownloadSettings toolSettings, string openMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenMode = openMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.OpenMode"/>.</em></p><p>Mode to use when opening the file. Note that specifying append only open_mode prevents parallel download. So, max_connections must be set to 1 if this open_mode is used.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetOpenMode(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenMode = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.Snapshot"/>.</em></p><p>The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetSnapshot(this AzureStorageBlobDownloadSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.Snapshot"/>.</em></p><p>The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetSnapshot(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region SocketTimeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.SocketTimeout"/>.</em></p><p>The socket timeout(secs), used by the service to regulate data flow.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetSocketTimeout(this AzureStorageBlobDownloadSettings toolSettings, string socketTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SocketTimeout = socketTimeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.SocketTimeout"/>.</em></p><p>The socket timeout(secs), used by the service to regulate data flow.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetSocketTimeout(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SocketTimeout = null;
            return toolSettings;
        }
        #endregion
        #region StartRange
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.StartRange"/>.</em></p><p>Start of byte range to use for downloading a section of the blob. If no end_range is given, all bytes after the start_range will be downloaded. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of blob.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetStartRange(this AzureStorageBlobDownloadSettings toolSettings, string startRange)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartRange = startRange;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.StartRange"/>.</em></p><p>Start of byte range to use for downloading a section of the blob. If no end_range is given, all bytes after the start_range will be downloaded. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of blob.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetStartRange(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartRange = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetTimeout(this AzureStorageBlobDownloadSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetTimeout(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region ValidateContent
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.ValidateContent"/>.</em></p><p>If set to true, validates an MD5 hash for each retrieved portion of the blob. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that the service will only return transactional MD5s for chunks 4MB or less so the first get request will be of size self.MAX_CHUNK_GET_SIZE instead of self.MAX_SINGLE_GET_SIZE. If self.MAX_CHUNK_GET_SIZE was set to greater than 4MB an error will be thrown. As computing the MD5 takes processing time and more requests will need to be done due to the reduced chunk size there may be some increase in latency.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetValidateContent(this AzureStorageBlobDownloadSettings toolSettings, string validateContent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = validateContent;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.ValidateContent"/>.</em></p><p>If set to true, validates an MD5 hash for each retrieved portion of the blob. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that the service will only return transactional MD5s for chunks 4MB or less so the first get request will be of size self.MAX_CHUNK_GET_SIZE instead of self.MAX_SINGLE_GET_SIZE. If self.MAX_CHUNK_GET_SIZE was set to greater than 4MB an error will be thrown. As computing the MD5 takes processing time and more requests will need to be done due to the reduced chunk size there may be some increase in latency.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetValidateContent(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetIfMatch(this AzureStorageBlobDownloadSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetIfMatch(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetIfModifiedSince(this AzureStorageBlobDownloadSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetIfModifiedSince(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetIfNoneMatch(this AzureStorageBlobDownloadSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetIfNoneMatch(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetIfUnmodifiedSince(this AzureStorageBlobDownloadSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetIfUnmodifiedSince(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetAccountKey(this AzureStorageBlobDownloadSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetAccountKey(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetAccountName(this AzureStorageBlobDownloadSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetAccountName(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetConnectionString(this AzureStorageBlobDownloadSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetConnectionString(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetSasToken(this AzureStorageBlobDownloadSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetSasToken(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetDebug(this AzureStorageBlobDownloadSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetDebug(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetHelp(this AzureStorageBlobDownloadSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetHelp(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetOutput(this AzureStorageBlobDownloadSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetOutput(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetQuery(this AzureStorageBlobDownloadSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetQuery(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings SetVerbose(this AzureStorageBlobDownloadSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadSettings ResetVerbose(this AzureStorageBlobDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobDownloadBatchSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobDownloadBatchSettingsExtensions
    {
        #region Destination
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.Destination"/>.</em></p><p>The existing destination folder for this download operation.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetDestination(this AzureStorageBlobDownloadBatchSettings toolSettings, string destination)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = destination;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.Destination"/>.</em></p><p>The existing destination folder for this download operation.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetDestination(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = null;
            return toolSettings;
        }
        #endregion
        #region Source
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.Source"/>.</em></p><p>The blob container from where the files will be downloaded.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetSource(this AzureStorageBlobDownloadBatchSettings toolSettings, string source)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = source;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.Source"/>.</em></p><p>The blob container from where the files will be downloaded.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetSource(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetAuthMode(this AzureStorageBlobDownloadBatchSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetAuthMode(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Dryrun
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually downloading the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetDryrun(this AzureStorageBlobDownloadBatchSettings toolSettings, bool? dryrun)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = dryrun;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually downloading the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetDryrun(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageBlobDownloadBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually downloading the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings EnableDryrun(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageBlobDownloadBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually downloading the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings DisableDryrun(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageBlobDownloadBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually downloading the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ToggleDryrun(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = !toolSettings.Dryrun;
            return toolSettings;
        }
        #endregion
        #region MaxConnections
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.MaxConnections"/>.</em></p><p>Maximum number of parallel connections to use when the blob size exceeds 64MB.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetMaxConnections(this AzureStorageBlobDownloadBatchSettings toolSettings, int? maxConnections)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = maxConnections;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.MaxConnections"/>.</em></p><p>Maximum number of parallel connections to use when the blob size exceeds 64MB.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetMaxConnections(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = null;
            return toolSettings;
        }
        #endregion
        #region NoProgress
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetNoProgress(this AzureStorageBlobDownloadBatchSettings toolSettings, bool? noProgress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = noProgress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetNoProgress(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageBlobDownloadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings EnableNoProgress(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageBlobDownloadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings DisableNoProgress(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageBlobDownloadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ToggleNoProgress(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = !toolSettings.NoProgress;
            return toolSettings;
        }
        #endregion
        #region Pattern
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.Pattern"/>.</em></p><p>The pattern used for globbing files or blobs in the source. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetPattern(this AzureStorageBlobDownloadBatchSettings toolSettings, string pattern)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = pattern;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.Pattern"/>.</em></p><p>The pattern used for globbing files or blobs in the source. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetPattern(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = null;
            return toolSettings;
        }
        #endregion
        #region SocketTimeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.SocketTimeout"/>.</em></p><p>The socket timeout(secs), used by the service to regulate data flow.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetSocketTimeout(this AzureStorageBlobDownloadBatchSettings toolSettings, string socketTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SocketTimeout = socketTimeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.SocketTimeout"/>.</em></p><p>The socket timeout(secs), used by the service to regulate data flow.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetSocketTimeout(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SocketTimeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetAccountKey(this AzureStorageBlobDownloadBatchSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetAccountKey(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetAccountName(this AzureStorageBlobDownloadBatchSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetAccountName(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetConnectionString(this AzureStorageBlobDownloadBatchSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetConnectionString(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetSasToken(this AzureStorageBlobDownloadBatchSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetSasToken(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetDebug(this AzureStorageBlobDownloadBatchSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetDebug(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetHelp(this AzureStorageBlobDownloadBatchSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetHelp(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetOutput(this AzureStorageBlobDownloadBatchSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetOutput(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetQuery(this AzureStorageBlobDownloadBatchSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetQuery(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobDownloadBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings SetVerbose(this AzureStorageBlobDownloadBatchSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobDownloadBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobDownloadBatchSettings ResetVerbose(this AzureStorageBlobDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobExistsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobExistsSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetContainerName(this AzureStorageBlobExistsSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetContainerName(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetName(this AzureStorageBlobExistsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetName(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetAuthMode(this AzureStorageBlobExistsSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetAuthMode(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.Snapshot"/>.</em></p><p>The snapshot parameter is an opaque DateTime value that, when present, specifies the snapshot.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetSnapshot(this AzureStorageBlobExistsSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.Snapshot"/>.</em></p><p>The snapshot parameter is an opaque DateTime value that, when present, specifies the snapshot.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetSnapshot(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetTimeout(this AzureStorageBlobExistsSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetTimeout(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetAccountKey(this AzureStorageBlobExistsSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetAccountKey(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetAccountName(this AzureStorageBlobExistsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetAccountName(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetConnectionString(this AzureStorageBlobExistsSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetConnectionString(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetSasToken(this AzureStorageBlobExistsSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetSasToken(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetDebug(this AzureStorageBlobExistsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetDebug(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetHelp(this AzureStorageBlobExistsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetHelp(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetOutput(this AzureStorageBlobExistsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetOutput(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetQuery(this AzureStorageBlobExistsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetQuery(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings SetVerbose(this AzureStorageBlobExistsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobExistsSettings ResetVerbose(this AzureStorageBlobExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobGenerateSasSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobGenerateSasSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetContainerName(this AzureStorageBlobGenerateSasSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetContainerName(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetName(this AzureStorageBlobGenerateSasSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetName(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetAuthMode(this AzureStorageBlobGenerateSasSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetAuthMode(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region CacheControl
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.CacheControl"/>.</em></p><p>Response header value for Cache-Control when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetCacheControl(this AzureStorageBlobGenerateSasSettings toolSettings, string cacheControl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheControl = cacheControl;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.CacheControl"/>.</em></p><p>Response header value for Cache-Control when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetCacheControl(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheControl = null;
            return toolSettings;
        }
        #endregion
        #region ContentDisposition
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.ContentDisposition"/>.</em></p><p>Response header value for Content-Disposition when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetContentDisposition(this AzureStorageBlobGenerateSasSettings toolSettings, string contentDisposition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = contentDisposition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.ContentDisposition"/>.</em></p><p>Response header value for Content-Disposition when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetContentDisposition(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = null;
            return toolSettings;
        }
        #endregion
        #region ContentEncoding
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.ContentEncoding"/>.</em></p><p>Response header value for Content-Encoding when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetContentEncoding(this AzureStorageBlobGenerateSasSettings toolSettings, string contentEncoding)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = contentEncoding;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.ContentEncoding"/>.</em></p><p>Response header value for Content-Encoding when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetContentEncoding(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = null;
            return toolSettings;
        }
        #endregion
        #region ContentLanguage
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.ContentLanguage"/>.</em></p><p>Response header value for Content-Language when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetContentLanguage(this AzureStorageBlobGenerateSasSettings toolSettings, string contentLanguage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = contentLanguage;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.ContentLanguage"/>.</em></p><p>Response header value for Content-Language when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetContentLanguage(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = null;
            return toolSettings;
        }
        #endregion
        #region ContentType
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.ContentType"/>.</em></p><p>Response header value for Content-Type when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetContentType(this AzureStorageBlobGenerateSasSettings toolSettings, string contentType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = contentType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.ContentType"/>.</em></p><p>Response header value for Content-Type when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetContentType(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetExpiry(this AzureStorageBlobGenerateSasSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetExpiry(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region HttpsOnly
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetHttpsOnly(this AzureStorageBlobGenerateSasSettings toolSettings, string httpsOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = httpsOnly;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetHttpsOnly(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = null;
            return toolSettings;
        }
        #endregion
        #region Ip
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetIp(this AzureStorageBlobGenerateSasSettings toolSettings, string ip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = ip;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetIp(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (a)dd (c)reate (d)elete (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetPermissions(this AzureStorageBlobGenerateSasSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (a)dd (c)reate (d)elete (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetPermissions(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region PolicyName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.PolicyName"/>.</em></p><p>The name of a stored access policy within the container's ACL.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetPolicyName(this AzureStorageBlobGenerateSasSettings toolSettings, string policyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyName = policyName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.PolicyName"/>.</em></p><p>The name of a stored access policy within the container's ACL.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetPolicyName(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyName = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetStart(this AzureStorageBlobGenerateSasSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetStart(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetAccountKey(this AzureStorageBlobGenerateSasSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetAccountKey(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetAccountName(this AzureStorageBlobGenerateSasSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetAccountName(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetConnectionString(this AzureStorageBlobGenerateSasSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetConnectionString(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetSasToken(this AzureStorageBlobGenerateSasSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetSasToken(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetDebug(this AzureStorageBlobGenerateSasSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetDebug(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetHelp(this AzureStorageBlobGenerateSasSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetHelp(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetOutput(this AzureStorageBlobGenerateSasSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetOutput(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetQuery(this AzureStorageBlobGenerateSasSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetQuery(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings SetVerbose(this AzureStorageBlobGenerateSasSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobGenerateSasSettings ResetVerbose(this AzureStorageBlobGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobListSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetContainerName(this AzureStorageBlobListSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetContainerName(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetAuthMode(this AzureStorageBlobListSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetAuthMode(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Delimiter
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.Delimiter"/>.</em></p><p>When the request includes this parameter, the operation returns a BlobPrefix element in the result list that acts as a placeholder for all blobs whose names begin with the same substring up to the appearance of the delimiter character. The delimiter may be a single character or a string.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetDelimiter(this AzureStorageBlobListSettings toolSettings, string delimiter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Delimiter = delimiter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.Delimiter"/>.</em></p><p>When the request includes this parameter, the operation returns a BlobPrefix element in the result list that acts as a placeholder for all blobs whose names begin with the same substring up to the appearance of the delimiter character. The delimiter may be a single character or a string.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetDelimiter(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Delimiter = null;
            return toolSettings;
        }
        #endregion
        #region Include
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.Include"/>.</em></p><p>Specifies additional datasets to include: (c)opy-info, (m)etadata, (s)napshots, (d)eleted-soft. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetInclude(this AzureStorageBlobListSettings toolSettings, string include)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Include = include;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.Include"/>.</em></p><p>Specifies additional datasets to include: (c)opy-info, (m)etadata, (s)napshots, (d)eleted-soft. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetInclude(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Include = null;
            return toolSettings;
        }
        #endregion
        #region NumResults
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.NumResults"/>.</em></p><p>Specifies the maximum number of blobs to return. If this parameter is not provided, all blobs will be returned.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetNumResults(this AzureStorageBlobListSettings toolSettings, int? numResults)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumResults = numResults;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.NumResults"/>.</em></p><p>Specifies the maximum number of blobs to return. If this parameter is not provided, all blobs will be returned.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetNumResults(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumResults = null;
            return toolSettings;
        }
        #endregion
        #region Prefix
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.Prefix"/>.</em></p><p>Filters the results to return only blobs whose names begin with the specified prefix.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetPrefix(this AzureStorageBlobListSettings toolSettings, string prefix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prefix = prefix;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.Prefix"/>.</em></p><p>Filters the results to return only blobs whose names begin with the specified prefix.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetPrefix(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prefix = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetTimeout(this AzureStorageBlobListSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetTimeout(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetAccountKey(this AzureStorageBlobListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetAccountKey(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetAccountName(this AzureStorageBlobListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetAccountName(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetConnectionString(this AzureStorageBlobListSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetConnectionString(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetSasToken(this AzureStorageBlobListSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetSasToken(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetDebug(this AzureStorageBlobListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetDebug(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetHelp(this AzureStorageBlobListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetHelp(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetOutput(this AzureStorageBlobListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetOutput(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetQuery(this AzureStorageBlobListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetQuery(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings SetVerbose(this AzureStorageBlobListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobListSettings ResetVerbose(this AzureStorageBlobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobSetTierSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobSetTierSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetContainerName(this AzureStorageBlobSetTierSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetContainerName(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetName(this AzureStorageBlobSetTierSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetName(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Tier
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.Tier"/>.</em></p><p>The tier value to set the blob to.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetTier(this AzureStorageBlobSetTierSettings toolSettings, string tier)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tier = tier;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.Tier"/>.</em></p><p>The tier value to set the blob to.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetTier(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tier = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetAuthMode(this AzureStorageBlobSetTierSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetAuthMode(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.Timeout"/>.</em></p><p>The timeout parameter is expressed in seconds. This method may make multiple calls to the Azure service and the timeout will apply to each call individually.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetTimeout(this AzureStorageBlobSetTierSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.Timeout"/>.</em></p><p>The timeout parameter is expressed in seconds. This method may make multiple calls to the Azure service and the timeout will apply to each call individually.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetTimeout(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region Type
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.Type"/>.</em></p><p>The blob type.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetType(this AzureStorageBlobSetTierSettings toolSettings, StorageBlobSetTierType type)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Type = type;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.Type"/>.</em></p><p>The blob type.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetType(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Type = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetAccountKey(this AzureStorageBlobSetTierSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetAccountKey(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetAccountName(this AzureStorageBlobSetTierSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetAccountName(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetConnectionString(this AzureStorageBlobSetTierSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetConnectionString(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetSasToken(this AzureStorageBlobSetTierSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetSasToken(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetDebug(this AzureStorageBlobSetTierSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetDebug(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetHelp(this AzureStorageBlobSetTierSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetHelp(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetOutput(this AzureStorageBlobSetTierSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetOutput(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetQuery(this AzureStorageBlobSetTierSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetQuery(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSetTierSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings SetVerbose(this AzureStorageBlobSetTierSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSetTierSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobSetTierSettings ResetVerbose(this AzureStorageBlobSetTierSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobShowSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetContainerName(this AzureStorageBlobShowSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetContainerName(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetName(this AzureStorageBlobShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetName(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetAuthMode(this AzureStorageBlobShowSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetAuthMode(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetLeaseId(this AzureStorageBlobShowSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetLeaseId(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.Snapshot"/>.</em></p><p>The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetSnapshot(this AzureStorageBlobShowSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.Snapshot"/>.</em></p><p>The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetSnapshot(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetTimeout(this AzureStorageBlobShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetTimeout(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetIfMatch(this AzureStorageBlobShowSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetIfMatch(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetIfModifiedSince(this AzureStorageBlobShowSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetIfModifiedSince(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetIfNoneMatch(this AzureStorageBlobShowSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetIfNoneMatch(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetIfUnmodifiedSince(this AzureStorageBlobShowSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetIfUnmodifiedSince(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetAccountKey(this AzureStorageBlobShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetAccountKey(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetAccountName(this AzureStorageBlobShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetAccountName(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetConnectionString(this AzureStorageBlobShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetConnectionString(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetSasToken(this AzureStorageBlobShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetSasToken(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetDebug(this AzureStorageBlobShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetDebug(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetHelp(this AzureStorageBlobShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetHelp(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetOutput(this AzureStorageBlobShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetOutput(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetQuery(this AzureStorageBlobShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetQuery(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings SetVerbose(this AzureStorageBlobShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobShowSettings ResetVerbose(this AzureStorageBlobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobSnapshotSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobSnapshotSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetContainerName(this AzureStorageBlobSnapshotSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetContainerName(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetName(this AzureStorageBlobSnapshotSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetName(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetAuthMode(this AzureStorageBlobSnapshotSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetAuthMode(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetLeaseId(this AzureStorageBlobSnapshotSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetLeaseId(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetMetadata(this AzureStorageBlobSnapshotSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageBlobSnapshotSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ClearMetadata(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageBlobSnapshotSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings AddMetadatum(this AzureStorageBlobSnapshotSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageBlobSnapshotSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings RemoveMetadatum(this AzureStorageBlobSnapshotSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageBlobSnapshotSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetMetadatum(this AzureStorageBlobSnapshotSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetTimeout(this AzureStorageBlobSnapshotSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetTimeout(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetIfMatch(this AzureStorageBlobSnapshotSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetIfMatch(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetIfModifiedSince(this AzureStorageBlobSnapshotSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetIfModifiedSince(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetIfNoneMatch(this AzureStorageBlobSnapshotSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetIfNoneMatch(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetIfUnmodifiedSince(this AzureStorageBlobSnapshotSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetIfUnmodifiedSince(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetAccountKey(this AzureStorageBlobSnapshotSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetAccountKey(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetAccountName(this AzureStorageBlobSnapshotSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetAccountName(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetConnectionString(this AzureStorageBlobSnapshotSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetConnectionString(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetSasToken(this AzureStorageBlobSnapshotSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetSasToken(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetDebug(this AzureStorageBlobSnapshotSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetDebug(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetHelp(this AzureStorageBlobSnapshotSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetHelp(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetOutput(this AzureStorageBlobSnapshotSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetOutput(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetQuery(this AzureStorageBlobSnapshotSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetQuery(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobSnapshotSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings SetVerbose(this AzureStorageBlobSnapshotSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobSnapshotSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobSnapshotSettings ResetVerbose(this AzureStorageBlobSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobUndeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobUndeleteSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetContainerName(this AzureStorageBlobUndeleteSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetContainerName(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetName(this AzureStorageBlobUndeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetName(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetAuthMode(this AzureStorageBlobUndeleteSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetAuthMode(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetTimeout(this AzureStorageBlobUndeleteSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetTimeout(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetAccountKey(this AzureStorageBlobUndeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetAccountKey(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetAccountName(this AzureStorageBlobUndeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetAccountName(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetConnectionString(this AzureStorageBlobUndeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetConnectionString(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetSasToken(this AzureStorageBlobUndeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetSasToken(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetDebug(this AzureStorageBlobUndeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetDebug(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetHelp(this AzureStorageBlobUndeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetHelp(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetOutput(this AzureStorageBlobUndeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetOutput(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetQuery(this AzureStorageBlobUndeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetQuery(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUndeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings SetVerbose(this AzureStorageBlobUndeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUndeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUndeleteSettings ResetVerbose(this AzureStorageBlobUndeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobUpdateSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetContainerName(this AzureStorageBlobUpdateSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetContainerName(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetName(this AzureStorageBlobUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetName(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetAuthMode(this AzureStorageBlobUpdateSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetAuthMode(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region ContentCacheControl
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.ContentCacheControl"/>.</em></p><p>The cache control string.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetContentCacheControl(this AzureStorageBlobUpdateSettings toolSettings, string contentCacheControl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentCacheControl = contentCacheControl;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.ContentCacheControl"/>.</em></p><p>The cache control string.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetContentCacheControl(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentCacheControl = null;
            return toolSettings;
        }
        #endregion
        #region ContentDisposition
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.ContentDisposition"/>.</em></p><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetContentDisposition(this AzureStorageBlobUpdateSettings toolSettings, string contentDisposition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = contentDisposition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.ContentDisposition"/>.</em></p><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetContentDisposition(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = null;
            return toolSettings;
        }
        #endregion
        #region ContentEncoding
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.ContentEncoding"/>.</em></p><p>The content encoding type.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetContentEncoding(this AzureStorageBlobUpdateSettings toolSettings, string contentEncoding)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = contentEncoding;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.ContentEncoding"/>.</em></p><p>The content encoding type.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetContentEncoding(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = null;
            return toolSettings;
        }
        #endregion
        #region ContentLanguage
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.ContentLanguage"/>.</em></p><p>The content language.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetContentLanguage(this AzureStorageBlobUpdateSettings toolSettings, string contentLanguage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = contentLanguage;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.ContentLanguage"/>.</em></p><p>The content language.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetContentLanguage(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = null;
            return toolSettings;
        }
        #endregion
        #region ContentMd5
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.ContentMd5"/>.</em></p><p>The content's MD5 hash.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetContentMd5(this AzureStorageBlobUpdateSettings toolSettings, string contentMd5)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentMd5 = contentMd5;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.ContentMd5"/>.</em></p><p>The content's MD5 hash.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetContentMd5(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentMd5 = null;
            return toolSettings;
        }
        #endregion
        #region ContentType
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.ContentType"/>.</em></p><p>The content MIME type.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetContentType(this AzureStorageBlobUpdateSettings toolSettings, string contentType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = contentType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.ContentType"/>.</em></p><p>The content MIME type.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetContentType(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetLeaseId(this AzureStorageBlobUpdateSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetLeaseId(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetTimeout(this AzureStorageBlobUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetTimeout(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetIfMatch(this AzureStorageBlobUpdateSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetIfMatch(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetIfModifiedSince(this AzureStorageBlobUpdateSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetIfModifiedSince(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetIfNoneMatch(this AzureStorageBlobUpdateSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetIfNoneMatch(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetIfUnmodifiedSince(this AzureStorageBlobUpdateSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetIfUnmodifiedSince(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetAccountKey(this AzureStorageBlobUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetAccountKey(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetAccountName(this AzureStorageBlobUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetAccountName(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetConnectionString(this AzureStorageBlobUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetConnectionString(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetSasToken(this AzureStorageBlobUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetSasToken(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetDebug(this AzureStorageBlobUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetDebug(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetHelp(this AzureStorageBlobUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetHelp(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetOutput(this AzureStorageBlobUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetOutput(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetQuery(this AzureStorageBlobUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetQuery(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings SetVerbose(this AzureStorageBlobUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUpdateSettings ResetVerbose(this AzureStorageBlobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobUploadSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobUploadSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetContainerName(this AzureStorageBlobUploadSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetContainerName(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.File"/>.</em></p><p>Path of the file to upload as the blob content.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetFile(this AzureStorageBlobUploadSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.File"/>.</em></p><p>Path of the file to upload as the blob content.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetFile(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetName(this AzureStorageBlobUploadSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetName(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetAuthMode(this AzureStorageBlobUploadSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetAuthMode(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region ContentCacheControl
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.ContentCacheControl"/>.</em></p><p>The cache control string.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetContentCacheControl(this AzureStorageBlobUploadSettings toolSettings, string contentCacheControl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentCacheControl = contentCacheControl;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.ContentCacheControl"/>.</em></p><p>The cache control string.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetContentCacheControl(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentCacheControl = null;
            return toolSettings;
        }
        #endregion
        #region ContentDisposition
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.ContentDisposition"/>.</em></p><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetContentDisposition(this AzureStorageBlobUploadSettings toolSettings, string contentDisposition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = contentDisposition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.ContentDisposition"/>.</em></p><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetContentDisposition(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = null;
            return toolSettings;
        }
        #endregion
        #region ContentEncoding
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.ContentEncoding"/>.</em></p><p>The content encoding type.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetContentEncoding(this AzureStorageBlobUploadSettings toolSettings, string contentEncoding)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = contentEncoding;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.ContentEncoding"/>.</em></p><p>The content encoding type.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetContentEncoding(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = null;
            return toolSettings;
        }
        #endregion
        #region ContentLanguage
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.ContentLanguage"/>.</em></p><p>The content language.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetContentLanguage(this AzureStorageBlobUploadSettings toolSettings, string contentLanguage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = contentLanguage;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.ContentLanguage"/>.</em></p><p>The content language.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetContentLanguage(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = null;
            return toolSettings;
        }
        #endregion
        #region ContentMd5
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.ContentMd5"/>.</em></p><p>The content's MD5 hash.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetContentMd5(this AzureStorageBlobUploadSettings toolSettings, string contentMd5)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentMd5 = contentMd5;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.ContentMd5"/>.</em></p><p>The content's MD5 hash.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetContentMd5(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentMd5 = null;
            return toolSettings;
        }
        #endregion
        #region ContentType
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.ContentType"/>.</em></p><p>The content MIME type.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetContentType(this AzureStorageBlobUploadSettings toolSettings, string contentType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = contentType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.ContentType"/>.</em></p><p>The content MIME type.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetContentType(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetLeaseId(this AzureStorageBlobUploadSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetLeaseId(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region MaxConnections
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.MaxConnections"/>.</em></p><p>Maximum number of parallel connections to use when the blob size exceeds 64MB.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetMaxConnections(this AzureStorageBlobUploadSettings toolSettings, int? maxConnections)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = maxConnections;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.MaxConnections"/>.</em></p><p>Maximum number of parallel connections to use when the blob size exceeds 64MB.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetMaxConnections(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = null;
            return toolSettings;
        }
        #endregion
        #region MaxsizeCondition
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.MaxsizeCondition"/>.</em></p><p>The max length in bytes permitted for an append blob.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetMaxsizeCondition(this AzureStorageBlobUploadSettings toolSettings, string maxsizeCondition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxsizeCondition = maxsizeCondition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.MaxsizeCondition"/>.</em></p><p>The max length in bytes permitted for an append blob.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetMaxsizeCondition(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxsizeCondition = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetMetadata(this AzureStorageBlobUploadSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageBlobUploadSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ClearMetadata(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageBlobUploadSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings AddMetadatum(this AzureStorageBlobUploadSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageBlobUploadSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings RemoveMetadatum(this AzureStorageBlobUploadSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageBlobUploadSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetMetadatum(this AzureStorageBlobUploadSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region NoProgress
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetNoProgress(this AzureStorageBlobUploadSettings toolSettings, bool? noProgress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = noProgress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetNoProgress(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageBlobUploadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings EnableNoProgress(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageBlobUploadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings DisableNoProgress(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageBlobUploadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ToggleNoProgress(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = !toolSettings.NoProgress;
            return toolSettings;
        }
        #endregion
        #region SocketTimeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.SocketTimeout"/>.</em></p><p>The socket timeout(secs), used by the service to regulate data flow.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetSocketTimeout(this AzureStorageBlobUploadSettings toolSettings, string socketTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SocketTimeout = socketTimeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.SocketTimeout"/>.</em></p><p>The socket timeout(secs), used by the service to regulate data flow.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetSocketTimeout(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SocketTimeout = null;
            return toolSettings;
        }
        #endregion
        #region Tier
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.Tier"/>.</em></p><p>A page blob tier value to set the blob to. The tier correlates to the size of the blob and number of allowed IOPS. This is only applicable to page blobs on premium storage accounts.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetTier(this AzureStorageBlobUploadSettings toolSettings, StorageBlobUploadTier tier)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tier = tier;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.Tier"/>.</em></p><p>A page blob tier value to set the blob to. The tier correlates to the size of the blob and number of allowed IOPS. This is only applicable to page blobs on premium storage accounts.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetTier(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tier = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetTimeout(this AzureStorageBlobUploadSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetTimeout(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region Type
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.Type"/>.</em></p><p>Defaults to 'page' for *.vhd files, or 'block' otherwise.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetType(this AzureStorageBlobUploadSettings toolSettings, StorageBlobType type)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Type = type;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.Type"/>.</em></p><p>Defaults to 'page' for *.vhd files, or 'block' otherwise.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetType(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Type = null;
            return toolSettings;
        }
        #endregion
        #region ValidateContent
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.ValidateContent"/>.</em></p><p>Specifies that an MD5 hash shall be calculated for each chunk of the blob and verified by the service when the chunk has arrived.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetValidateContent(this AzureStorageBlobUploadSettings toolSettings, string validateContent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = validateContent;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.ValidateContent"/>.</em></p><p>Specifies that an MD5 hash shall be calculated for each chunk of the blob and verified by the service when the chunk has arrived.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetValidateContent(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetIfMatch(this AzureStorageBlobUploadSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetIfMatch(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetIfModifiedSince(this AzureStorageBlobUploadSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetIfModifiedSince(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetIfNoneMatch(this AzureStorageBlobUploadSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetIfNoneMatch(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetIfUnmodifiedSince(this AzureStorageBlobUploadSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetIfUnmodifiedSince(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetAccountKey(this AzureStorageBlobUploadSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetAccountKey(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetAccountName(this AzureStorageBlobUploadSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetAccountName(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetConnectionString(this AzureStorageBlobUploadSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetConnectionString(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetSasToken(this AzureStorageBlobUploadSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetSasToken(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetDebug(this AzureStorageBlobUploadSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetDebug(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetHelp(this AzureStorageBlobUploadSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetHelp(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetOutput(this AzureStorageBlobUploadSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetOutput(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetQuery(this AzureStorageBlobUploadSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetQuery(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings SetVerbose(this AzureStorageBlobUploadSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadSettings ResetVerbose(this AzureStorageBlobUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobUploadBatchSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobUploadBatchSettingsExtensions
    {
        #region Destination
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.Destination"/>.</em></p><p>The blob container where the files will be uploaded.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetDestination(this AzureStorageBlobUploadBatchSettings toolSettings, string destination)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = destination;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.Destination"/>.</em></p><p>The blob container where the files will be uploaded.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetDestination(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = null;
            return toolSettings;
        }
        #endregion
        #region Source
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.Source"/>.</em></p><p>The directory where the files to be uploaded are located.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetSource(this AzureStorageBlobUploadBatchSettings toolSettings, string source)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = source;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.Source"/>.</em></p><p>The directory where the files to be uploaded are located.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetSource(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetAuthMode(this AzureStorageBlobUploadBatchSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetAuthMode(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region DestinationPath
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.DestinationPath"/>.</em></p><p>The destination path that will be appended to the blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetDestinationPath(this AzureStorageBlobUploadBatchSettings toolSettings, string destinationPath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationPath = destinationPath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.DestinationPath"/>.</em></p><p>The destination path that will be appended to the blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetDestinationPath(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationPath = null;
            return toolSettings;
        }
        #endregion
        #region Dryrun
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually uploading the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetDryrun(this AzureStorageBlobUploadBatchSettings toolSettings, bool? dryrun)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = dryrun;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually uploading the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetDryrun(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageBlobUploadBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually uploading the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings EnableDryrun(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageBlobUploadBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually uploading the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings DisableDryrun(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageBlobUploadBatchSettings.Dryrun"/>.</em></p><p>Show the summary of the operations to be taken instead of actually uploading the file(s).</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ToggleDryrun(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = !toolSettings.Dryrun;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetLeaseId(this AzureStorageBlobUploadBatchSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetLeaseId(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region MaxConnections
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.MaxConnections"/>.</em></p><p>Maximum number of parallel connections to use when the blob size exceeds 64MB.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetMaxConnections(this AzureStorageBlobUploadBatchSettings toolSettings, int? maxConnections)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = maxConnections;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.MaxConnections"/>.</em></p><p>Maximum number of parallel connections to use when the blob size exceeds 64MB.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetMaxConnections(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetMetadata(this AzureStorageBlobUploadBatchSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageBlobUploadBatchSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ClearMetadata(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageBlobUploadBatchSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings AddMetadatum(this AzureStorageBlobUploadBatchSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageBlobUploadBatchSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings RemoveMetadatum(this AzureStorageBlobUploadBatchSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageBlobUploadBatchSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetMetadatum(this AzureStorageBlobUploadBatchSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region NoProgress
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetNoProgress(this AzureStorageBlobUploadBatchSettings toolSettings, bool? noProgress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = noProgress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetNoProgress(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageBlobUploadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings EnableNoProgress(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageBlobUploadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings DisableNoProgress(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageBlobUploadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ToggleNoProgress(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = !toolSettings.NoProgress;
            return toolSettings;
        }
        #endregion
        #region Pattern
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.Pattern"/>.</em></p><p>The pattern used for globbing files or blobs in the source. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetPattern(this AzureStorageBlobUploadBatchSettings toolSettings, string pattern)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = pattern;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.Pattern"/>.</em></p><p>The pattern used for globbing files or blobs in the source. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetPattern(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = null;
            return toolSettings;
        }
        #endregion
        #region SocketTimeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.SocketTimeout"/>.</em></p><p>The socket timeout(secs), used by the service to regulate data flow.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetSocketTimeout(this AzureStorageBlobUploadBatchSettings toolSettings, string socketTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SocketTimeout = socketTimeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.SocketTimeout"/>.</em></p><p>The socket timeout(secs), used by the service to regulate data flow.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetSocketTimeout(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SocketTimeout = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetTimeout(this AzureStorageBlobUploadBatchSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetTimeout(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region Type
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.Type"/>.</em></p><p>Defaults to 'page' for *.vhd files, or 'block' otherwise. The setting will override blob types for every file.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetType(this AzureStorageBlobUploadBatchSettings toolSettings, StorageBlobType type)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Type = type;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.Type"/>.</em></p><p>Defaults to 'page' for *.vhd files, or 'block' otherwise. The setting will override blob types for every file.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetType(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Type = null;
            return toolSettings;
        }
        #endregion
        #region ContentCacheControl
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.ContentCacheControl"/>.</em></p><p>The cache control string.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetContentCacheControl(this AzureStorageBlobUploadBatchSettings toolSettings, string contentCacheControl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentCacheControl = contentCacheControl;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.ContentCacheControl"/>.</em></p><p>The cache control string.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetContentCacheControl(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentCacheControl = null;
            return toolSettings;
        }
        #endregion
        #region ContentDisposition
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.ContentDisposition"/>.</em></p><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetContentDisposition(this AzureStorageBlobUploadBatchSettings toolSettings, string contentDisposition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = contentDisposition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.ContentDisposition"/>.</em></p><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetContentDisposition(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = null;
            return toolSettings;
        }
        #endregion
        #region ContentEncoding
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.ContentEncoding"/>.</em></p><p>The content encoding type.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetContentEncoding(this AzureStorageBlobUploadBatchSettings toolSettings, string contentEncoding)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = contentEncoding;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.ContentEncoding"/>.</em></p><p>The content encoding type.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetContentEncoding(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = null;
            return toolSettings;
        }
        #endregion
        #region ContentLanguage
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.ContentLanguage"/>.</em></p><p>The content language.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetContentLanguage(this AzureStorageBlobUploadBatchSettings toolSettings, string contentLanguage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = contentLanguage;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.ContentLanguage"/>.</em></p><p>The content language.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetContentLanguage(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = null;
            return toolSettings;
        }
        #endregion
        #region ContentMd5
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.ContentMd5"/>.</em></p><p>The content's MD5 hash.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetContentMd5(this AzureStorageBlobUploadBatchSettings toolSettings, string contentMd5)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentMd5 = contentMd5;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.ContentMd5"/>.</em></p><p>The content's MD5 hash.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetContentMd5(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentMd5 = null;
            return toolSettings;
        }
        #endregion
        #region ContentType
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.ContentType"/>.</em></p><p>The content MIME type.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetContentType(this AzureStorageBlobUploadBatchSettings toolSettings, string contentType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = contentType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.ContentType"/>.</em></p><p>The content MIME type.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetContentType(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = null;
            return toolSettings;
        }
        #endregion
        #region MaxsizeCondition
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.MaxsizeCondition"/>.</em></p><p>The max length in bytes permitted for an append blob.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetMaxsizeCondition(this AzureStorageBlobUploadBatchSettings toolSettings, string maxsizeCondition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxsizeCondition = maxsizeCondition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.MaxsizeCondition"/>.</em></p><p>The max length in bytes permitted for an append blob.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetMaxsizeCondition(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxsizeCondition = null;
            return toolSettings;
        }
        #endregion
        #region ValidateContent
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.ValidateContent"/>.</em></p><p>Specifies that an MD5 hash shall be calculated for each chunk of the blob and verified by the service when the chunk has arrived.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetValidateContent(this AzureStorageBlobUploadBatchSettings toolSettings, string validateContent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = validateContent;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.ValidateContent"/>.</em></p><p>Specifies that an MD5 hash shall be calculated for each chunk of the blob and verified by the service when the chunk has arrived.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetValidateContent(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetIfMatch(this AzureStorageBlobUploadBatchSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetIfMatch(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetIfModifiedSince(this AzureStorageBlobUploadBatchSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetIfModifiedSince(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*).</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetIfNoneMatch(this AzureStorageBlobUploadBatchSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*).</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetIfNoneMatch(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetIfUnmodifiedSince(this AzureStorageBlobUploadBatchSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetIfUnmodifiedSince(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetAccountKey(this AzureStorageBlobUploadBatchSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetAccountKey(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetAccountName(this AzureStorageBlobUploadBatchSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetAccountName(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetConnectionString(this AzureStorageBlobUploadBatchSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetConnectionString(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetSasToken(this AzureStorageBlobUploadBatchSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetSasToken(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetDebug(this AzureStorageBlobUploadBatchSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetDebug(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetHelp(this AzureStorageBlobUploadBatchSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetHelp(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetOutput(this AzureStorageBlobUploadBatchSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetOutput(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetQuery(this AzureStorageBlobUploadBatchSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetQuery(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUploadBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings SetVerbose(this AzureStorageBlobUploadBatchSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUploadBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUploadBatchSettings ResetVerbose(this AzureStorageBlobUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobUrlSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobUrlSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetContainerName(this AzureStorageBlobUrlSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetContainerName(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetName(this AzureStorageBlobUrlSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetName(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetAuthMode(this AzureStorageBlobUrlSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetAuthMode(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Protocol
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.Protocol"/>.</em></p><p>Protocol to use.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetProtocol(this AzureStorageBlobUrlSettings toolSettings, StorageBlobProtocol protocol)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Protocol = protocol;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.Protocol"/>.</em></p><p>Protocol to use.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetProtocol(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Protocol = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.Snapshot"/>.</em></p><p>An string value that uniquely identifies the snapshot. The value ofthis query parameter indicates the snapshot version.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetSnapshot(this AzureStorageBlobUrlSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.Snapshot"/>.</em></p><p>An string value that uniquely identifies the snapshot. The value ofthis query parameter indicates the snapshot version.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetSnapshot(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetAccountKey(this AzureStorageBlobUrlSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetAccountKey(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetAccountName(this AzureStorageBlobUrlSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetAccountName(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetConnectionString(this AzureStorageBlobUrlSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetConnectionString(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetSasToken(this AzureStorageBlobUrlSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetSasToken(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetDebug(this AzureStorageBlobUrlSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetDebug(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetHelp(this AzureStorageBlobUrlSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetHelp(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetOutput(this AzureStorageBlobUrlSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetOutput(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetQuery(this AzureStorageBlobUrlSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetQuery(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobUrlSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings SetVerbose(this AzureStorageBlobUrlSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobUrlSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobUrlSettings ResetVerbose(this AzureStorageBlobUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileDeleteSettingsExtensions
    {
        #region Path
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings SetPath(this AzureStorageFileDeleteSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings ResetPath(this AzureStorageFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings SetShareName(this AzureStorageFileDeleteSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings ResetShareName(this AzureStorageFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings SetTimeout(this AzureStorageFileDeleteSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings ResetTimeout(this AzureStorageFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings SetAccountKey(this AzureStorageFileDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings ResetAccountKey(this AzureStorageFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings SetAccountName(this AzureStorageFileDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings ResetAccountName(this AzureStorageFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings SetConnectionString(this AzureStorageFileDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings ResetConnectionString(this AzureStorageFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings SetSasToken(this AzureStorageFileDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings ResetSasToken(this AzureStorageFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings SetDebug(this AzureStorageFileDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings ResetDebug(this AzureStorageFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings SetHelp(this AzureStorageFileDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings ResetHelp(this AzureStorageFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings SetOutput(this AzureStorageFileDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings ResetOutput(this AzureStorageFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings SetQuery(this AzureStorageFileDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings ResetQuery(this AzureStorageFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings SetVerbose(this AzureStorageFileDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteSettings ResetVerbose(this AzureStorageFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileDeleteBatchSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileDeleteBatchSettingsExtensions
    {
        #region Source
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.Source"/>.</em></p><p>The source of the file delete operation. The source can be the file share URL or the share name.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetSource(this AzureStorageFileDeleteBatchSettings toolSettings, string source)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = source;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.Source"/>.</em></p><p>The source of the file delete operation. The source can be the file share URL or the share name.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetSource(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = null;
            return toolSettings;
        }
        #endregion
        #region Dryrun
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.Dryrun"/>.</em></p><p>List the files and blobs to be deleted. No actual data deletion will occur.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetDryrun(this AzureStorageFileDeleteBatchSettings toolSettings, string dryrun)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = dryrun;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.Dryrun"/>.</em></p><p>List the files and blobs to be deleted. No actual data deletion will occur.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetDryrun(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = null;
            return toolSettings;
        }
        #endregion
        #region Pattern
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.Pattern"/>.</em></p><p>The pattern used for file globbing. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetPattern(this AzureStorageFileDeleteBatchSettings toolSettings, string pattern)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = pattern;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.Pattern"/>.</em></p><p>The pattern used for file globbing. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetPattern(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetTimeout(this AzureStorageFileDeleteBatchSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetTimeout(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetAccountKey(this AzureStorageFileDeleteBatchSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetAccountKey(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetAccountName(this AzureStorageFileDeleteBatchSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetAccountName(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetConnectionString(this AzureStorageFileDeleteBatchSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetConnectionString(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetSasToken(this AzureStorageFileDeleteBatchSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetSasToken(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetDebug(this AzureStorageFileDeleteBatchSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetDebug(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetHelp(this AzureStorageFileDeleteBatchSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetHelp(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetOutput(this AzureStorageFileDeleteBatchSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetOutput(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetQuery(this AzureStorageFileDeleteBatchSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetQuery(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileDeleteBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings SetVerbose(this AzureStorageFileDeleteBatchSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDeleteBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDeleteBatchSettings ResetVerbose(this AzureStorageFileDeleteBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileDownloadSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileDownloadSettingsExtensions
    {
        #region Path
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetPath(this AzureStorageFileDownloadSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetPath(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetShareName(this AzureStorageFileDownloadSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetShareName(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Dest
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.Dest"/>.</em></p><p>Path of the file to write to. The source filename will be used if not specified.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetDest(this AzureStorageFileDownloadSettings toolSettings, string dest)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dest = dest;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.Dest"/>.</em></p><p>Path of the file to write to. The source filename will be used if not specified.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetDest(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dest = null;
            return toolSettings;
        }
        #endregion
        #region EndRange
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.EndRange"/>.</em></p><p>End of byte range to use for downloading a section of the file. If end_range is given, start_range must be provided. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of file.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetEndRange(this AzureStorageFileDownloadSettings toolSettings, string endRange)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndRange = endRange;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.EndRange"/>.</em></p><p>End of byte range to use for downloading a section of the file. If end_range is given, start_range must be provided. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of file.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetEndRange(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndRange = null;
            return toolSettings;
        }
        #endregion
        #region MaxConnections
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.MaxConnections"/>.</em></p><p>If set to 2 or greater, an initial get will be done for the first self.MAX_SINGLE_GET_SIZE bytes of the file. If this is the entire file, the method returns at this point. If it is not, it will download the remaining data parallel using the number of threads equal to max_connections. Each chunk will be of size self.MAX_CHUNK_GET_SIZE. If set to 1, a single large get request will be done. This is not generally recommended but available if very few threads should be used, network requests are very expensive, or a non-seekable stream prevents parallel download. This may also be valuable if the file is being concurrently modified to enforce atomicity or if many files are expected to be empty as an extra request is required for empty files if max_connections is greater than 1.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetMaxConnections(this AzureStorageFileDownloadSettings toolSettings, string maxConnections)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = maxConnections;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.MaxConnections"/>.</em></p><p>If set to 2 or greater, an initial get will be done for the first self.MAX_SINGLE_GET_SIZE bytes of the file. If this is the entire file, the method returns at this point. If it is not, it will download the remaining data parallel using the number of threads equal to max_connections. Each chunk will be of size self.MAX_CHUNK_GET_SIZE. If set to 1, a single large get request will be done. This is not generally recommended but available if very few threads should be used, network requests are very expensive, or a non-seekable stream prevents parallel download. This may also be valuable if the file is being concurrently modified to enforce atomicity or if many files are expected to be empty as an extra request is required for empty files if max_connections is greater than 1.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetMaxConnections(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = null;
            return toolSettings;
        }
        #endregion
        #region NoProgress
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetNoProgress(this AzureStorageFileDownloadSettings toolSettings, bool? noProgress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = noProgress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetNoProgress(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageFileDownloadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings EnableNoProgress(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageFileDownloadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings DisableNoProgress(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageFileDownloadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ToggleNoProgress(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = !toolSettings.NoProgress;
            return toolSettings;
        }
        #endregion
        #region OpenMode
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.OpenMode"/>.</em></p><p>Mode to use when opening the file. Note that specifying append only open_mode prevents parallel download. So, max_connections must be set to 1 if this open_mode is used.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetOpenMode(this AzureStorageFileDownloadSettings toolSettings, string openMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenMode = openMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.OpenMode"/>.</em></p><p>Mode to use when opening the file. Note that specifying append only open_mode prevents parallel download. So, max_connections must be set to 1 if this open_mode is used.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetOpenMode(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenMode = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetSnapshot(this AzureStorageFileDownloadSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetSnapshot(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region StartRange
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.StartRange"/>.</em></p><p>Start of byte range to use for downloading a section of the file. If no end_range is given, all bytes after the start_range will be downloaded. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of file.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetStartRange(this AzureStorageFileDownloadSettings toolSettings, string startRange)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartRange = startRange;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.StartRange"/>.</em></p><p>Start of byte range to use for downloading a section of the file. If no end_range is given, all bytes after the start_range will be downloaded. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of file.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetStartRange(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartRange = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetTimeout(this AzureStorageFileDownloadSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetTimeout(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region ValidateContent
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.ValidateContent"/>.</em></p><p>If set to true, validates an MD5 hash for each retrieved portion of the file. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that the service will only return transactional MD5s for chunks 4MB or less so the first get request will be of size self.MAX_CHUNK_GET_SIZE instead of self.MAX_SINGLE_GET_SIZE. If self.MAX_CHUNK_GET_SIZE was set to greater than 4MB an error will be thrown. As computing the MD5 takes processing time and more requests will need to be done due to the reduced chunk size there may be some increase in latency.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetValidateContent(this AzureStorageFileDownloadSettings toolSettings, string validateContent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = validateContent;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.ValidateContent"/>.</em></p><p>If set to true, validates an MD5 hash for each retrieved portion of the file. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that the service will only return transactional MD5s for chunks 4MB or less so the first get request will be of size self.MAX_CHUNK_GET_SIZE instead of self.MAX_SINGLE_GET_SIZE. If self.MAX_CHUNK_GET_SIZE was set to greater than 4MB an error will be thrown. As computing the MD5 takes processing time and more requests will need to be done due to the reduced chunk size there may be some increase in latency.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetValidateContent(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetAccountKey(this AzureStorageFileDownloadSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetAccountKey(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetAccountName(this AzureStorageFileDownloadSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetAccountName(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetConnectionString(this AzureStorageFileDownloadSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetConnectionString(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetSasToken(this AzureStorageFileDownloadSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetSasToken(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetDebug(this AzureStorageFileDownloadSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetDebug(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetHelp(this AzureStorageFileDownloadSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetHelp(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetOutput(this AzureStorageFileDownloadSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetOutput(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetQuery(this AzureStorageFileDownloadSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetQuery(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings SetVerbose(this AzureStorageFileDownloadSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadSettings ResetVerbose(this AzureStorageFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileDownloadBatchSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileDownloadBatchSettingsExtensions
    {
        #region Destination
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.Destination"/>.</em></p><p>The local directory where the files are downloaded to. This directory must already exist.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetDestination(this AzureStorageFileDownloadBatchSettings toolSettings, string destination)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = destination;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.Destination"/>.</em></p><p>The local directory where the files are downloaded to. This directory must already exist.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetDestination(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = null;
            return toolSettings;
        }
        #endregion
        #region Source
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.Source"/>.</em></p><p>The source of the file download operation. The source can be the file share URL or the share name.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetSource(this AzureStorageFileDownloadBatchSettings toolSettings, string source)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = source;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.Source"/>.</em></p><p>The source of the file download operation. The source can be the file share URL or the share name.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetSource(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = null;
            return toolSettings;
        }
        #endregion
        #region Dryrun
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.Dryrun"/>.</em></p><p>List the files and blobs to be downloaded. No actual data transfer will occur.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetDryrun(this AzureStorageFileDownloadBatchSettings toolSettings, string dryrun)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = dryrun;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.Dryrun"/>.</em></p><p>List the files and blobs to be downloaded. No actual data transfer will occur.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetDryrun(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = null;
            return toolSettings;
        }
        #endregion
        #region NoProgress
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetNoProgress(this AzureStorageFileDownloadBatchSettings toolSettings, bool? noProgress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = noProgress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetNoProgress(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageFileDownloadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings EnableNoProgress(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageFileDownloadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings DisableNoProgress(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageFileDownloadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ToggleNoProgress(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = !toolSettings.NoProgress;
            return toolSettings;
        }
        #endregion
        #region Pattern
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.Pattern"/>.</em></p><p>The pattern used for file globbing. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetPattern(this AzureStorageFileDownloadBatchSettings toolSettings, string pattern)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = pattern;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.Pattern"/>.</em></p><p>The pattern used for file globbing. The supported patterns are '*', '?', '[seq]', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetPattern(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = null;
            return toolSettings;
        }
        #endregion
        #region ValidateContent
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.ValidateContent"/>.</em></p><p>If set, calculates an MD5 hash for each range of the file for validation.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetValidateContent(this AzureStorageFileDownloadBatchSettings toolSettings, string validateContent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = validateContent;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.ValidateContent"/>.</em></p><p>If set, calculates an MD5 hash for each range of the file for validation.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetValidateContent(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = null;
            return toolSettings;
        }
        #endregion
        #region MaxConnections
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.MaxConnections"/>.</em></p><p>The maximum number of parallel connections to use. Default value is 1.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetMaxConnections(this AzureStorageFileDownloadBatchSettings toolSettings, int? maxConnections)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = maxConnections;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.MaxConnections"/>.</em></p><p>The maximum number of parallel connections to use. Default value is 1.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetMaxConnections(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetAccountKey(this AzureStorageFileDownloadBatchSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetAccountKey(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetAccountName(this AzureStorageFileDownloadBatchSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetAccountName(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetConnectionString(this AzureStorageFileDownloadBatchSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetConnectionString(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetSasToken(this AzureStorageFileDownloadBatchSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetSasToken(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetDebug(this AzureStorageFileDownloadBatchSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetDebug(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetHelp(this AzureStorageFileDownloadBatchSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetHelp(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetOutput(this AzureStorageFileDownloadBatchSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetOutput(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetQuery(this AzureStorageFileDownloadBatchSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetQuery(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileDownloadBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings SetVerbose(this AzureStorageFileDownloadBatchSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileDownloadBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileDownloadBatchSettings ResetVerbose(this AzureStorageFileDownloadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileExistsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileExistsSettingsExtensions
    {
        #region Path
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetPath(this AzureStorageFileExistsSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetPath(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetShareName(this AzureStorageFileExistsSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetShareName(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetSnapshot(this AzureStorageFileExistsSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetSnapshot(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetTimeout(this AzureStorageFileExistsSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetTimeout(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetAccountKey(this AzureStorageFileExistsSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetAccountKey(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetAccountName(this AzureStorageFileExistsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetAccountName(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetConnectionString(this AzureStorageFileExistsSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetConnectionString(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetSasToken(this AzureStorageFileExistsSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetSasToken(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetDebug(this AzureStorageFileExistsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetDebug(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetHelp(this AzureStorageFileExistsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetHelp(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetOutput(this AzureStorageFileExistsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetOutput(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetQuery(this AzureStorageFileExistsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetQuery(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings SetVerbose(this AzureStorageFileExistsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileExistsSettings ResetVerbose(this AzureStorageFileExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileGenerateSasSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileGenerateSasSettingsExtensions
    {
        #region Path
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetPath(this AzureStorageFileGenerateSasSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetPath(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetShareName(this AzureStorageFileGenerateSasSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetShareName(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region CacheControl
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.CacheControl"/>.</em></p><p>Response header value for Cache-Control when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetCacheControl(this AzureStorageFileGenerateSasSettings toolSettings, string cacheControl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheControl = cacheControl;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.CacheControl"/>.</em></p><p>Response header value for Cache-Control when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetCacheControl(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheControl = null;
            return toolSettings;
        }
        #endregion
        #region ContentDisposition
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.ContentDisposition"/>.</em></p><p>Response header value for Content-Disposition when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetContentDisposition(this AzureStorageFileGenerateSasSettings toolSettings, string contentDisposition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = contentDisposition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.ContentDisposition"/>.</em></p><p>Response header value for Content-Disposition when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetContentDisposition(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = null;
            return toolSettings;
        }
        #endregion
        #region ContentEncoding
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.ContentEncoding"/>.</em></p><p>Response header value for Content-Encoding when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetContentEncoding(this AzureStorageFileGenerateSasSettings toolSettings, string contentEncoding)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = contentEncoding;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.ContentEncoding"/>.</em></p><p>Response header value for Content-Encoding when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetContentEncoding(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = null;
            return toolSettings;
        }
        #endregion
        #region ContentLanguage
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.ContentLanguage"/>.</em></p><p>Response header value for Content-Language when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetContentLanguage(this AzureStorageFileGenerateSasSettings toolSettings, string contentLanguage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = contentLanguage;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.ContentLanguage"/>.</em></p><p>Response header value for Content-Language when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetContentLanguage(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = null;
            return toolSettings;
        }
        #endregion
        #region ContentType
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.ContentType"/>.</em></p><p>Response header value for Content-Type when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetContentType(this AzureStorageFileGenerateSasSettings toolSettings, string contentType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = contentType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.ContentType"/>.</em></p><p>Response header value for Content-Type when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetContentType(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetExpiry(this AzureStorageFileGenerateSasSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetExpiry(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region HttpsOnly
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetHttpsOnly(this AzureStorageFileGenerateSasSettings toolSettings, string httpsOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = httpsOnly;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetHttpsOnly(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = null;
            return toolSettings;
        }
        #endregion
        #region Ip
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetIp(this AzureStorageFileGenerateSasSettings toolSettings, string ip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = ip;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetIp(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (c)reate (d)elete (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetPermissions(this AzureStorageFileGenerateSasSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (c)reate (d)elete (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetPermissions(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region PolicyName
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.PolicyName"/>.</em></p><p>The name of a stored access policy within the container's ACL.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetPolicyName(this AzureStorageFileGenerateSasSettings toolSettings, string policyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyName = policyName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.PolicyName"/>.</em></p><p>The name of a stored access policy within the container's ACL.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetPolicyName(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyName = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetStart(this AzureStorageFileGenerateSasSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetStart(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetAccountKey(this AzureStorageFileGenerateSasSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetAccountKey(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetAccountName(this AzureStorageFileGenerateSasSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetAccountName(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetConnectionString(this AzureStorageFileGenerateSasSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetConnectionString(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetSasToken(this AzureStorageFileGenerateSasSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetSasToken(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetDebug(this AzureStorageFileGenerateSasSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetDebug(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetHelp(this AzureStorageFileGenerateSasSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetHelp(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetOutput(this AzureStorageFileGenerateSasSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetOutput(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetQuery(this AzureStorageFileGenerateSasSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetQuery(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings SetVerbose(this AzureStorageFileGenerateSasSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileGenerateSasSettings ResetVerbose(this AzureStorageFileGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileListSettingsExtensions
    {
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetShareName(this AzureStorageFileListSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetShareName(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region ExcludeDir
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.ExcludeDir"/>.</em></p><p>List only files in the given share.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetExcludeDir(this AzureStorageFileListSettings toolSettings, string excludeDir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludeDir = excludeDir;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.ExcludeDir"/>.</em></p><p>List only files in the given share.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetExcludeDir(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludeDir = null;
            return toolSettings;
        }
        #endregion
        #region Path
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.Path"/>.</em></p><p>The directory path within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetPath(this AzureStorageFileListSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.Path"/>.</em></p><p>The directory path within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetPath(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetSnapshot(this AzureStorageFileListSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetSnapshot(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetTimeout(this AzureStorageFileListSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetTimeout(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetAccountKey(this AzureStorageFileListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetAccountKey(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetAccountName(this AzureStorageFileListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetAccountName(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetConnectionString(this AzureStorageFileListSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetConnectionString(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetSasToken(this AzureStorageFileListSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetSasToken(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetDebug(this AzureStorageFileListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetDebug(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetHelp(this AzureStorageFileListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetHelp(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetOutput(this AzureStorageFileListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetOutput(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetQuery(this AzureStorageFileListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetQuery(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings SetVerbose(this AzureStorageFileListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileListSettings ResetVerbose(this AzureStorageFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileResizeSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileResizeSettingsExtensions
    {
        #region Path
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetPath(this AzureStorageFileResizeSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetPath(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetShareName(this AzureStorageFileResizeSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetShareName(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Size
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.Size"/>.</em></p><p>The length to resize the file to.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetSize(this AzureStorageFileResizeSettings toolSettings, string size)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = size;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.Size"/>.</em></p><p>The length to resize the file to.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetSize(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetTimeout(this AzureStorageFileResizeSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetTimeout(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetAccountKey(this AzureStorageFileResizeSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetAccountKey(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetAccountName(this AzureStorageFileResizeSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetAccountName(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetConnectionString(this AzureStorageFileResizeSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetConnectionString(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetSasToken(this AzureStorageFileResizeSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetSasToken(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetDebug(this AzureStorageFileResizeSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetDebug(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetHelp(this AzureStorageFileResizeSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetHelp(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetOutput(this AzureStorageFileResizeSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetOutput(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetQuery(this AzureStorageFileResizeSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetQuery(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileResizeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings SetVerbose(this AzureStorageFileResizeSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileResizeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileResizeSettings ResetVerbose(this AzureStorageFileResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileShowSettingsExtensions
    {
        #region Path
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetPath(this AzureStorageFileShowSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetPath(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetShareName(this AzureStorageFileShowSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetShareName(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetSnapshot(this AzureStorageFileShowSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetSnapshot(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetTimeout(this AzureStorageFileShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetTimeout(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetAccountKey(this AzureStorageFileShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetAccountKey(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetAccountName(this AzureStorageFileShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetAccountName(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetConnectionString(this AzureStorageFileShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetConnectionString(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetSasToken(this AzureStorageFileShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetSasToken(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetDebug(this AzureStorageFileShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetDebug(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetHelp(this AzureStorageFileShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetHelp(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetOutput(this AzureStorageFileShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetOutput(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetQuery(this AzureStorageFileShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetQuery(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings SetVerbose(this AzureStorageFileShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileShowSettings ResetVerbose(this AzureStorageFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileUpdateSettingsExtensions
    {
        #region Path
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetPath(this AzureStorageFileUpdateSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetPath(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetShareName(this AzureStorageFileUpdateSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetShareName(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region ContentCacheControl
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.ContentCacheControl"/>.</em></p><p>The cache control string.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetContentCacheControl(this AzureStorageFileUpdateSettings toolSettings, string contentCacheControl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentCacheControl = contentCacheControl;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.ContentCacheControl"/>.</em></p><p>The cache control string.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetContentCacheControl(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentCacheControl = null;
            return toolSettings;
        }
        #endregion
        #region ContentDisposition
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.ContentDisposition"/>.</em></p><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetContentDisposition(this AzureStorageFileUpdateSettings toolSettings, string contentDisposition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = contentDisposition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.ContentDisposition"/>.</em></p><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetContentDisposition(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = null;
            return toolSettings;
        }
        #endregion
        #region ContentEncoding
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.ContentEncoding"/>.</em></p><p>The content encoding type.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetContentEncoding(this AzureStorageFileUpdateSettings toolSettings, string contentEncoding)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = contentEncoding;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.ContentEncoding"/>.</em></p><p>The content encoding type.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetContentEncoding(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = null;
            return toolSettings;
        }
        #endregion
        #region ContentLanguage
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.ContentLanguage"/>.</em></p><p>The content language.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetContentLanguage(this AzureStorageFileUpdateSettings toolSettings, string contentLanguage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = contentLanguage;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.ContentLanguage"/>.</em></p><p>The content language.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetContentLanguage(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = null;
            return toolSettings;
        }
        #endregion
        #region ContentMd5
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.ContentMd5"/>.</em></p><p>The content's MD5 hash.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetContentMd5(this AzureStorageFileUpdateSettings toolSettings, string contentMd5)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentMd5 = contentMd5;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.ContentMd5"/>.</em></p><p>The content's MD5 hash.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetContentMd5(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentMd5 = null;
            return toolSettings;
        }
        #endregion
        #region ContentType
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.ContentType"/>.</em></p><p>The content MIME type.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetContentType(this AzureStorageFileUpdateSettings toolSettings, string contentType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = contentType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.ContentType"/>.</em></p><p>The content MIME type.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetContentType(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetTimeout(this AzureStorageFileUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetTimeout(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetAccountKey(this AzureStorageFileUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetAccountKey(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetAccountName(this AzureStorageFileUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetAccountName(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetConnectionString(this AzureStorageFileUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetConnectionString(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetSasToken(this AzureStorageFileUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetSasToken(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetDebug(this AzureStorageFileUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetDebug(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetHelp(this AzureStorageFileUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetHelp(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetOutput(this AzureStorageFileUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetOutput(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetQuery(this AzureStorageFileUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetQuery(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings SetVerbose(this AzureStorageFileUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUpdateSettings ResetVerbose(this AzureStorageFileUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileUploadSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileUploadSettingsExtensions
    {
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetShareName(this AzureStorageFileUploadSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetShareName(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Source
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.Source"/>.</em></p><p>Path of the local file to upload as the file content.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetSource(this AzureStorageFileUploadSettings toolSettings, string source)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = source;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.Source"/>.</em></p><p>Path of the local file to upload as the file content.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetSource(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = null;
            return toolSettings;
        }
        #endregion
        #region ContentCacheControl
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.ContentCacheControl"/>.</em></p><p>The cache control string.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetContentCacheControl(this AzureStorageFileUploadSettings toolSettings, string contentCacheControl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentCacheControl = contentCacheControl;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.ContentCacheControl"/>.</em></p><p>The cache control string.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetContentCacheControl(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentCacheControl = null;
            return toolSettings;
        }
        #endregion
        #region ContentDisposition
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.ContentDisposition"/>.</em></p><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetContentDisposition(this AzureStorageFileUploadSettings toolSettings, string contentDisposition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = contentDisposition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.ContentDisposition"/>.</em></p><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetContentDisposition(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = null;
            return toolSettings;
        }
        #endregion
        #region ContentEncoding
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.ContentEncoding"/>.</em></p><p>The content encoding type.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetContentEncoding(this AzureStorageFileUploadSettings toolSettings, string contentEncoding)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = contentEncoding;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.ContentEncoding"/>.</em></p><p>The content encoding type.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetContentEncoding(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = null;
            return toolSettings;
        }
        #endregion
        #region ContentLanguage
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.ContentLanguage"/>.</em></p><p>The content language.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetContentLanguage(this AzureStorageFileUploadSettings toolSettings, string contentLanguage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = contentLanguage;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.ContentLanguage"/>.</em></p><p>The content language.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetContentLanguage(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = null;
            return toolSettings;
        }
        #endregion
        #region ContentMd5
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.ContentMd5"/>.</em></p><p>The content's MD5 hash.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetContentMd5(this AzureStorageFileUploadSettings toolSettings, string contentMd5)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentMd5 = contentMd5;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.ContentMd5"/>.</em></p><p>The content's MD5 hash.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetContentMd5(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentMd5 = null;
            return toolSettings;
        }
        #endregion
        #region ContentType
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.ContentType"/>.</em></p><p>The content MIME type.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetContentType(this AzureStorageFileUploadSettings toolSettings, string contentType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = contentType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.ContentType"/>.</em></p><p>The content MIME type.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetContentType(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = null;
            return toolSettings;
        }
        #endregion
        #region MaxConnections
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.MaxConnections"/>.</em></p><p>Maximum number of parallel connections to use.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetMaxConnections(this AzureStorageFileUploadSettings toolSettings, int? maxConnections)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = maxConnections;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.MaxConnections"/>.</em></p><p>Maximum number of parallel connections to use.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetMaxConnections(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetMetadata(this AzureStorageFileUploadSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageFileUploadSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ClearMetadata(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageFileUploadSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings AddMetadatum(this AzureStorageFileUploadSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageFileUploadSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings RemoveMetadatum(this AzureStorageFileUploadSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageFileUploadSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetMetadatum(this AzureStorageFileUploadSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region NoProgress
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetNoProgress(this AzureStorageFileUploadSettings toolSettings, bool? noProgress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = noProgress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetNoProgress(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageFileUploadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings EnableNoProgress(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageFileUploadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings DisableNoProgress(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageFileUploadSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ToggleNoProgress(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = !toolSettings.NoProgress;
            return toolSettings;
        }
        #endregion
        #region Path
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.Path"/>.</em></p><p>The path to the file within the file share. If the file name is omitted, the source file name will be used.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetPath(this AzureStorageFileUploadSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.Path"/>.</em></p><p>The path to the file within the file share. If the file name is omitted, the source file name will be used.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetPath(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetTimeout(this AzureStorageFileUploadSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetTimeout(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region ValidateContent
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.ValidateContent"/>.</em></p><p>If true, calculates an MD5 hash for each range of the file. The storage service checks the hash of the content that has arrived with the hash that was sent. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that this MD5 hash is not stored with the file.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetValidateContent(this AzureStorageFileUploadSettings toolSettings, bool? validateContent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = validateContent;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.ValidateContent"/>.</em></p><p>If true, calculates an MD5 hash for each range of the file. The storage service checks the hash of the content that has arrived with the hash that was sent. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that this MD5 hash is not stored with the file.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetValidateContent(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageFileUploadSettings.ValidateContent"/>.</em></p><p>If true, calculates an MD5 hash for each range of the file. The storage service checks the hash of the content that has arrived with the hash that was sent. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that this MD5 hash is not stored with the file.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings EnableValidateContent(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageFileUploadSettings.ValidateContent"/>.</em></p><p>If true, calculates an MD5 hash for each range of the file. The storage service checks the hash of the content that has arrived with the hash that was sent. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that this MD5 hash is not stored with the file.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings DisableValidateContent(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageFileUploadSettings.ValidateContent"/>.</em></p><p>If true, calculates an MD5 hash for each range of the file. The storage service checks the hash of the content that has arrived with the hash that was sent. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that this MD5 hash is not stored with the file.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ToggleValidateContent(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = !toolSettings.ValidateContent;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetAccountKey(this AzureStorageFileUploadSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetAccountKey(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetAccountName(this AzureStorageFileUploadSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetAccountName(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetConnectionString(this AzureStorageFileUploadSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetConnectionString(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetSasToken(this AzureStorageFileUploadSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetSasToken(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetDebug(this AzureStorageFileUploadSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetDebug(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetHelp(this AzureStorageFileUploadSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetHelp(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetOutput(this AzureStorageFileUploadSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetOutput(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetQuery(this AzureStorageFileUploadSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetQuery(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings SetVerbose(this AzureStorageFileUploadSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUploadSettings ResetVerbose(this AzureStorageFileUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileUploadBatchSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileUploadBatchSettingsExtensions
    {
        #region Destination
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.Destination"/>.</em></p><p>The destination of the upload operation.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetDestination(this AzureStorageFileUploadBatchSettings toolSettings, string destination)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = destination;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.Destination"/>.</em></p><p>The destination of the upload operation.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetDestination(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = null;
            return toolSettings;
        }
        #endregion
        #region Source
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.Source"/>.</em></p><p>The directory to upload files from.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetSource(this AzureStorageFileUploadBatchSettings toolSettings, string source)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = source;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.Source"/>.</em></p><p>The directory to upload files from.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetSource(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = null;
            return toolSettings;
        }
        #endregion
        #region DestinationPath
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.DestinationPath"/>.</em></p><p>The directory where the source data is copied to. If omitted, data is copied to the root directory.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetDestinationPath(this AzureStorageFileUploadBatchSettings toolSettings, string destinationPath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationPath = destinationPath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.DestinationPath"/>.</em></p><p>The directory where the source data is copied to. If omitted, data is copied to the root directory.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetDestinationPath(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationPath = null;
            return toolSettings;
        }
        #endregion
        #region Dryrun
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.Dryrun"/>.</em></p><p>List the files and blobs to be uploaded. No actual data transfer will occur.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetDryrun(this AzureStorageFileUploadBatchSettings toolSettings, string dryrun)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = dryrun;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.Dryrun"/>.</em></p><p>List the files and blobs to be uploaded. No actual data transfer will occur.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetDryrun(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetMetadata(this AzureStorageFileUploadBatchSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageFileUploadBatchSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ClearMetadata(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageFileUploadBatchSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings AddMetadatum(this AzureStorageFileUploadBatchSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageFileUploadBatchSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings RemoveMetadatum(this AzureStorageFileUploadBatchSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageFileUploadBatchSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetMetadatum(this AzureStorageFileUploadBatchSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region NoProgress
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetNoProgress(this AzureStorageFileUploadBatchSettings toolSettings, bool? noProgress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = noProgress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetNoProgress(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageFileUploadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings EnableNoProgress(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageFileUploadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings DisableNoProgress(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageFileUploadBatchSettings.NoProgress"/>.</em></p><p>Include this flag to disable progress reporting for the command.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ToggleNoProgress(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoProgress = !toolSettings.NoProgress;
            return toolSettings;
        }
        #endregion
        #region Pattern
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.Pattern"/>.</em></p><p>The pattern used for file globbing. The supported patterns are '*', '?', '[seq', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetPattern(this AzureStorageFileUploadBatchSettings toolSettings, string pattern)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = pattern;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.Pattern"/>.</em></p><p>The pattern used for file globbing. The supported patterns are '*', '?', '[seq', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetPattern(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = null;
            return toolSettings;
        }
        #endregion
        #region ValidateContent
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.ValidateContent"/>.</em></p><p>If set, calculates an MD5 hash for each range of the file for validation.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetValidateContent(this AzureStorageFileUploadBatchSettings toolSettings, string validateContent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = validateContent;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.ValidateContent"/>.</em></p><p>If set, calculates an MD5 hash for each range of the file for validation.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetValidateContent(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ValidateContent = null;
            return toolSettings;
        }
        #endregion
        #region ContentCacheControl
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.ContentCacheControl"/>.</em></p><p>The cache control string.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetContentCacheControl(this AzureStorageFileUploadBatchSettings toolSettings, string contentCacheControl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentCacheControl = contentCacheControl;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.ContentCacheControl"/>.</em></p><p>The cache control string.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetContentCacheControl(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentCacheControl = null;
            return toolSettings;
        }
        #endregion
        #region ContentDisposition
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.ContentDisposition"/>.</em></p><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetContentDisposition(this AzureStorageFileUploadBatchSettings toolSettings, string contentDisposition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = contentDisposition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.ContentDisposition"/>.</em></p><p>Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetContentDisposition(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = null;
            return toolSettings;
        }
        #endregion
        #region ContentEncoding
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.ContentEncoding"/>.</em></p><p>The content encoding type.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetContentEncoding(this AzureStorageFileUploadBatchSettings toolSettings, string contentEncoding)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = contentEncoding;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.ContentEncoding"/>.</em></p><p>The content encoding type.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetContentEncoding(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = null;
            return toolSettings;
        }
        #endregion
        #region ContentLanguage
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.ContentLanguage"/>.</em></p><p>The content language.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetContentLanguage(this AzureStorageFileUploadBatchSettings toolSettings, string contentLanguage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = contentLanguage;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.ContentLanguage"/>.</em></p><p>The content language.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetContentLanguage(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = null;
            return toolSettings;
        }
        #endregion
        #region ContentMd5
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.ContentMd5"/>.</em></p><p>The content's MD5 hash.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetContentMd5(this AzureStorageFileUploadBatchSettings toolSettings, string contentMd5)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentMd5 = contentMd5;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.ContentMd5"/>.</em></p><p>The content's MD5 hash.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetContentMd5(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentMd5 = null;
            return toolSettings;
        }
        #endregion
        #region ContentType
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.ContentType"/>.</em></p><p>The content MIME type.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetContentType(this AzureStorageFileUploadBatchSettings toolSettings, string contentType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = contentType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.ContentType"/>.</em></p><p>The content MIME type.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetContentType(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = null;
            return toolSettings;
        }
        #endregion
        #region MaxConnections
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.MaxConnections"/>.</em></p><p>The maximum number of parallel connections to use. Default value is 1.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetMaxConnections(this AzureStorageFileUploadBatchSettings toolSettings, int? maxConnections)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = maxConnections;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.MaxConnections"/>.</em></p><p>The maximum number of parallel connections to use. Default value is 1.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetMaxConnections(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxConnections = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetAccountKey(this AzureStorageFileUploadBatchSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetAccountKey(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetAccountName(this AzureStorageFileUploadBatchSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetAccountName(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetConnectionString(this AzureStorageFileUploadBatchSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetConnectionString(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetSasToken(this AzureStorageFileUploadBatchSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetSasToken(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetDebug(this AzureStorageFileUploadBatchSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetDebug(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetHelp(this AzureStorageFileUploadBatchSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetHelp(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetOutput(this AzureStorageFileUploadBatchSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetOutput(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetQuery(this AzureStorageFileUploadBatchSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetQuery(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileUploadBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings SetVerbose(this AzureStorageFileUploadBatchSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUploadBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUploadBatchSettings ResetVerbose(this AzureStorageFileUploadBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileUrlSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileUrlSettingsExtensions
    {
        #region Path
        /// <summary><p><em>Sets <see cref="AzureStorageFileUrlSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings SetPath(this AzureStorageFileUrlSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUrlSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings ResetPath(this AzureStorageFileUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageFileUrlSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings SetShareName(this AzureStorageFileUrlSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUrlSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings ResetShareName(this AzureStorageFileUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Protocol
        /// <summary><p><em>Sets <see cref="AzureStorageFileUrlSettings.Protocol"/>.</em></p><p>Protocol to use.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings SetProtocol(this AzureStorageFileUrlSettings toolSettings, StorageBlobProtocol protocol)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Protocol = protocol;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUrlSettings.Protocol"/>.</em></p><p>Protocol to use.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings ResetProtocol(this AzureStorageFileUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Protocol = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileUrlSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings SetAccountKey(this AzureStorageFileUrlSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUrlSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings ResetAccountKey(this AzureStorageFileUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileUrlSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings SetAccountName(this AzureStorageFileUrlSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUrlSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings ResetAccountName(this AzureStorageFileUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileUrlSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings SetConnectionString(this AzureStorageFileUrlSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUrlSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings ResetConnectionString(this AzureStorageFileUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileUrlSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings SetSasToken(this AzureStorageFileUrlSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUrlSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings ResetSasToken(this AzureStorageFileUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileUrlSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings SetDebug(this AzureStorageFileUrlSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUrlSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings ResetDebug(this AzureStorageFileUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileUrlSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings SetHelp(this AzureStorageFileUrlSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUrlSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings ResetHelp(this AzureStorageFileUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileUrlSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings SetOutput(this AzureStorageFileUrlSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUrlSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings ResetOutput(this AzureStorageFileUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileUrlSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings SetQuery(this AzureStorageFileUrlSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUrlSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings ResetQuery(this AzureStorageFileUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileUrlSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings SetVerbose(this AzureStorageFileUrlSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileUrlSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileUrlSettings ResetVerbose(this AzureStorageFileUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageMessageClearSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageMessageClearSettingsExtensions
    {
        #region QueueName
        /// <summary><p><em>Sets <see cref="AzureStorageMessageClearSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings SetQueueName(this AzureStorageMessageClearSettings toolSettings, string queueName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = queueName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageClearSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings ResetQueueName(this AzureStorageMessageClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageMessageClearSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings SetAuthMode(this AzureStorageMessageClearSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageClearSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings ResetAuthMode(this AzureStorageMessageClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageMessageClearSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings SetTimeout(this AzureStorageMessageClearSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageClearSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings ResetTimeout(this AzureStorageMessageClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageMessageClearSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings SetAccountKey(this AzureStorageMessageClearSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageClearSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings ResetAccountKey(this AzureStorageMessageClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageMessageClearSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings SetAccountName(this AzureStorageMessageClearSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageClearSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings ResetAccountName(this AzureStorageMessageClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageMessageClearSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings SetConnectionString(this AzureStorageMessageClearSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageClearSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings ResetConnectionString(this AzureStorageMessageClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageMessageClearSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings SetSasToken(this AzureStorageMessageClearSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageClearSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings ResetSasToken(this AzureStorageMessageClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageMessageClearSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings SetDebug(this AzureStorageMessageClearSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageClearSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings ResetDebug(this AzureStorageMessageClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageMessageClearSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings SetHelp(this AzureStorageMessageClearSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageClearSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings ResetHelp(this AzureStorageMessageClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageMessageClearSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings SetOutput(this AzureStorageMessageClearSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageClearSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings ResetOutput(this AzureStorageMessageClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageMessageClearSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings SetQuery(this AzureStorageMessageClearSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageClearSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings ResetQuery(this AzureStorageMessageClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageMessageClearSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings SetVerbose(this AzureStorageMessageClearSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageClearSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageClearSettings ResetVerbose(this AzureStorageMessageClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageMessageDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageMessageDeleteSettingsExtensions
    {
        #region Id
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.Id"/>.</em></p><p>The message id identifying the message to delete.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetId(this AzureStorageMessageDeleteSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.Id"/>.</em></p><p>The message id identifying the message to delete.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetId(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region PopReceipt
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.PopReceipt"/>.</em></p><p>A valid pop receipt value returned from an earlier call to the get_messages() or update_message().</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetPopReceipt(this AzureStorageMessageDeleteSettings toolSettings, string popReceipt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PopReceipt = popReceipt;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.PopReceipt"/>.</em></p><p>A valid pop receipt value returned from an earlier call to the get_messages() or update_message().</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetPopReceipt(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PopReceipt = null;
            return toolSettings;
        }
        #endregion
        #region QueueName
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetQueueName(this AzureStorageMessageDeleteSettings toolSettings, string queueName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = queueName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetQueueName(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetAuthMode(this AzureStorageMessageDeleteSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetAuthMode(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetTimeout(this AzureStorageMessageDeleteSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetTimeout(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetAccountKey(this AzureStorageMessageDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetAccountKey(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetAccountName(this AzureStorageMessageDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetAccountName(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetConnectionString(this AzureStorageMessageDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetConnectionString(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetSasToken(this AzureStorageMessageDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetSasToken(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetDebug(this AzureStorageMessageDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetDebug(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetHelp(this AzureStorageMessageDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetHelp(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetOutput(this AzureStorageMessageDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetOutput(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetQuery(this AzureStorageMessageDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetQuery(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageMessageDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings SetVerbose(this AzureStorageMessageDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageDeleteSettings ResetVerbose(this AzureStorageMessageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageMessageGetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageMessageGetSettingsExtensions
    {
        #region QueueName
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetQueueName(this AzureStorageMessageGetSettings toolSettings, string queueName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = queueName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetQueueName(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetAuthMode(this AzureStorageMessageGetSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetAuthMode(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region NumMessages
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.NumMessages"/>.</em></p><p>A nonzero integer value that specifies the number of messages to retrieve from the queue, up to a maximum of 32. If fewer are visible, the visible messages are returned. By default, a single message is retrieved from the queue with this operation.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetNumMessages(this AzureStorageMessageGetSettings toolSettings, string numMessages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumMessages = numMessages;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.NumMessages"/>.</em></p><p>A nonzero integer value that specifies the number of messages to retrieve from the queue, up to a maximum of 32. If fewer are visible, the visible messages are returned. By default, a single message is retrieved from the queue with this operation.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetNumMessages(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumMessages = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetTimeout(this AzureStorageMessageGetSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetTimeout(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region VisibilityTimeout
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.VisibilityTimeout"/>.</em></p><p>Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 1 second, and cannot be larger than 7 days. The visibility timeout of a message can be set to a value later than the expiry time.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetVisibilityTimeout(this AzureStorageMessageGetSettings toolSettings, string visibilityTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VisibilityTimeout = visibilityTimeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.VisibilityTimeout"/>.</em></p><p>Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 1 second, and cannot be larger than 7 days. The visibility timeout of a message can be set to a value later than the expiry time.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetVisibilityTimeout(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VisibilityTimeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetAccountKey(this AzureStorageMessageGetSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetAccountKey(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetAccountName(this AzureStorageMessageGetSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetAccountName(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetConnectionString(this AzureStorageMessageGetSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetConnectionString(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetSasToken(this AzureStorageMessageGetSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetSasToken(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetDebug(this AzureStorageMessageGetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetDebug(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetHelp(this AzureStorageMessageGetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetHelp(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetOutput(this AzureStorageMessageGetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetOutput(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetQuery(this AzureStorageMessageGetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetQuery(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageMessageGetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings SetVerbose(this AzureStorageMessageGetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageGetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageGetSettings ResetVerbose(this AzureStorageMessageGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageMessagePeekSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageMessagePeekSettingsExtensions
    {
        #region QueueName
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetQueueName(this AzureStorageMessagePeekSettings toolSettings, string queueName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = queueName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetQueueName(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetAuthMode(this AzureStorageMessagePeekSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetAuthMode(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region NumMessages
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.NumMessages"/>.</em></p><p>A nonzero integer value that specifies the number of messages to peek from the queue, up to a maximum of 32. By default, a single message is peeked from the queue with this operation.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetNumMessages(this AzureStorageMessagePeekSettings toolSettings, string numMessages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumMessages = numMessages;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.NumMessages"/>.</em></p><p>A nonzero integer value that specifies the number of messages to peek from the queue, up to a maximum of 32. By default, a single message is peeked from the queue with this operation.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetNumMessages(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumMessages = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetTimeout(this AzureStorageMessagePeekSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetTimeout(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetAccountKey(this AzureStorageMessagePeekSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetAccountKey(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetAccountName(this AzureStorageMessagePeekSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetAccountName(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetConnectionString(this AzureStorageMessagePeekSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetConnectionString(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetSasToken(this AzureStorageMessagePeekSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetSasToken(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetDebug(this AzureStorageMessagePeekSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetDebug(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetHelp(this AzureStorageMessagePeekSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetHelp(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetOutput(this AzureStorageMessagePeekSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetOutput(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetQuery(this AzureStorageMessagePeekSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetQuery(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePeekSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings SetVerbose(this AzureStorageMessagePeekSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePeekSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessagePeekSettings ResetVerbose(this AzureStorageMessagePeekSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageMessagePutSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageMessagePutSettingsExtensions
    {
        #region Content
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.Content"/>.</em></p><p>Message content, up to 64KB in size.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetContent(this AzureStorageMessagePutSettings toolSettings, string content)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Content = content;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.Content"/>.</em></p><p>Message content, up to 64KB in size.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetContent(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Content = null;
            return toolSettings;
        }
        #endregion
        #region QueueName
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetQueueName(this AzureStorageMessagePutSettings toolSettings, string queueName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = queueName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetQueueName(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetAuthMode(this AzureStorageMessagePutSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetAuthMode(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region TimeToLive
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.TimeToLive"/>.</em></p><p>Specifies the time-to-live interval for the message, in seconds. The time-to-live may be any positive number or -1 for infinity. If this parameter is omitted, the default time-to-live is 7 days.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetTimeToLive(this AzureStorageMessagePutSettings toolSettings, string timeToLive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeToLive = timeToLive;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.TimeToLive"/>.</em></p><p>Specifies the time-to-live interval for the message, in seconds. The time-to-live may be any positive number or -1 for infinity. If this parameter is omitted, the default time-to-live is 7 days.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetTimeToLive(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeToLive = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetTimeout(this AzureStorageMessagePutSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetTimeout(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region VisibilityTimeout
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.VisibilityTimeout"/>.</em></p><p>If not specified, the default value is 0. Specifies the new visibility timeout value, in seconds, relative to server time. The value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. visibility_timeout should be set to a value smaller than the time-to-live value.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetVisibilityTimeout(this AzureStorageMessagePutSettings toolSettings, string visibilityTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VisibilityTimeout = visibilityTimeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.VisibilityTimeout"/>.</em></p><p>If not specified, the default value is 0. Specifies the new visibility timeout value, in seconds, relative to server time. The value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. visibility_timeout should be set to a value smaller than the time-to-live value.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetVisibilityTimeout(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VisibilityTimeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetAccountKey(this AzureStorageMessagePutSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetAccountKey(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetAccountName(this AzureStorageMessagePutSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetAccountName(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetConnectionString(this AzureStorageMessagePutSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetConnectionString(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetSasToken(this AzureStorageMessagePutSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetSasToken(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetDebug(this AzureStorageMessagePutSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetDebug(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetHelp(this AzureStorageMessagePutSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetHelp(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetOutput(this AzureStorageMessagePutSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetOutput(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetQuery(this AzureStorageMessagePutSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetQuery(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageMessagePutSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings SetVerbose(this AzureStorageMessagePutSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessagePutSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessagePutSettings ResetVerbose(this AzureStorageMessagePutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageMessageUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageMessageUpdateSettingsExtensions
    {
        #region Id
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.Id"/>.</em></p><p>The message id identifying the message to update.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetId(this AzureStorageMessageUpdateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.Id"/>.</em></p><p>The message id identifying the message to update.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetId(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region PopReceipt
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.PopReceipt"/>.</em></p><p>A valid pop receipt value returned from an earlier call to the get_messages() or update_message() operation.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetPopReceipt(this AzureStorageMessageUpdateSettings toolSettings, string popReceipt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PopReceipt = popReceipt;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.PopReceipt"/>.</em></p><p>A valid pop receipt value returned from an earlier call to the get_messages() or update_message() operation.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetPopReceipt(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PopReceipt = null;
            return toolSettings;
        }
        #endregion
        #region QueueName
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetQueueName(this AzureStorageMessageUpdateSettings toolSettings, string queueName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = queueName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetQueueName(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = null;
            return toolSettings;
        }
        #endregion
        #region VisibilityTimeout
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.VisibilityTimeout"/>.</em></p><p>Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. A message can be updated until it has been deleted or has expired.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetVisibilityTimeout(this AzureStorageMessageUpdateSettings toolSettings, string visibilityTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VisibilityTimeout = visibilityTimeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.VisibilityTimeout"/>.</em></p><p>Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. A message can be updated until it has been deleted or has expired.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetVisibilityTimeout(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VisibilityTimeout = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetAuthMode(this AzureStorageMessageUpdateSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetAuthMode(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Content
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.Content"/>.</em></p><p>Message content, up to 64KB in size.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetContent(this AzureStorageMessageUpdateSettings toolSettings, string content)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Content = content;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.Content"/>.</em></p><p>Message content, up to 64KB in size.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetContent(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Content = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetTimeout(this AzureStorageMessageUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetTimeout(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetAccountKey(this AzureStorageMessageUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetAccountKey(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetAccountName(this AzureStorageMessageUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetAccountName(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetConnectionString(this AzureStorageMessageUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetConnectionString(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetSasToken(this AzureStorageMessageUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetSasToken(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetDebug(this AzureStorageMessageUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetDebug(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetHelp(this AzureStorageMessageUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetHelp(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetOutput(this AzureStorageMessageUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetOutput(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetQuery(this AzureStorageMessageUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetQuery(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageMessageUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings SetVerbose(this AzureStorageMessageUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMessageUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMessageUpdateSettings ResetVerbose(this AzureStorageMessageUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountCheckNameSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountCheckNameSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCheckNameSettings.Name"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountCheckNameSettings SetName(this AzureStorageAccountCheckNameSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCheckNameSettings.Name"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountCheckNameSettings ResetName(this AzureStorageAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCheckNameSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountCheckNameSettings SetDebug(this AzureStorageAccountCheckNameSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCheckNameSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountCheckNameSettings ResetDebug(this AzureStorageAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCheckNameSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountCheckNameSettings SetHelp(this AzureStorageAccountCheckNameSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCheckNameSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountCheckNameSettings ResetHelp(this AzureStorageAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCheckNameSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountCheckNameSettings SetOutput(this AzureStorageAccountCheckNameSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCheckNameSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountCheckNameSettings ResetOutput(this AzureStorageAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCheckNameSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountCheckNameSettings SetQuery(this AzureStorageAccountCheckNameSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCheckNameSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountCheckNameSettings ResetQuery(this AzureStorageAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCheckNameSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountCheckNameSettings SetVerbose(this AzureStorageAccountCheckNameSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCheckNameSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountCheckNameSettings ResetVerbose(this AzureStorageAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.Name"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetName(this AzureStorageAccountCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.Name"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetName(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetResourceGroup(this AzureStorageAccountCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetResourceGroup(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region AccessTier
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.AccessTier"/>.</em></p><p>The access tier used for billing StandardBlob accounts. Cannot be set for StandardLRS, StandardGRS, StandardRAGRS, or PremiumLRS account types. It is required for StandardBlob accounts during creation.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetAccessTier(this AzureStorageAccountCreateSettings toolSettings, StorageAccountAccessTier accessTier)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccessTier = accessTier;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.AccessTier"/>.</em></p><p>The access tier used for billing StandardBlob accounts. Cannot be set for StandardLRS, StandardGRS, StandardRAGRS, or PremiumLRS account types. It is required for StandardBlob accounts during creation.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetAccessTier(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccessTier = null;
            return toolSettings;
        }
        #endregion
        #region AssignIdentity
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.AssignIdentity"/>.</em></p><p>Generate and assign a new Storage Account Identity for this storage account for use with key management services like Azure KeyVault.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetAssignIdentity(this AzureStorageAccountCreateSettings toolSettings, string assignIdentity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssignIdentity = assignIdentity;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.AssignIdentity"/>.</em></p><p>Generate and assign a new Storage Account Identity for this storage account for use with key management services like Azure KeyVault.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetAssignIdentity(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssignIdentity = null;
            return toolSettings;
        }
        #endregion
        #region CustomDomain
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.CustomDomain"/>.</em></p><p>User domain assigned to the storage account. Name is the CNAME source.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetCustomDomain(this AzureStorageAccountCreateSettings toolSettings, string customDomain)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomDomain = customDomain;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.CustomDomain"/>.</em></p><p>User domain assigned to the storage account. Name is the CNAME source.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetCustomDomain(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomDomain = null;
            return toolSettings;
        }
        #endregion
        #region EncryptionServices
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.EncryptionServices"/>.</em></p><p>Specifies which service(s) to encrypt.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetEncryptionServices(this AzureStorageAccountCreateSettings toolSettings, StorageAccountEncryptionServices encryptionServices)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncryptionServices = encryptionServices;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.EncryptionServices"/>.</em></p><p>Specifies which service(s) to encrypt.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetEncryptionServices(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncryptionServices = null;
            return toolSettings;
        }
        #endregion
        #region HttpsOnly
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.HttpsOnly"/>.</em></p><p>Allows https traffic only to storage service.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetHttpsOnly(this AzureStorageAccountCreateSettings toolSettings, bool? httpsOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = httpsOnly;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.HttpsOnly"/>.</em></p><p>Allows https traffic only to storage service.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetHttpsOnly(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageAccountCreateSettings.HttpsOnly"/>.</em></p><p>Allows https traffic only to storage service.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings EnableHttpsOnly(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageAccountCreateSettings.HttpsOnly"/>.</em></p><p>Allows https traffic only to storage service.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings DisableHttpsOnly(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageAccountCreateSettings.HttpsOnly"/>.</em></p><p>Allows https traffic only to storage service.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ToggleHttpsOnly(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = !toolSettings.HttpsOnly;
            return toolSettings;
        }
        #endregion
        #region Kind
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.Kind"/>.</em></p><p>Indicates the type of storage account.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetKind(this AzureStorageAccountCreateSettings toolSettings, StorageAccountCreateKind kind)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kind = kind;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.Kind"/>.</em></p><p>Indicates the type of storage account.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetKind(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kind = null;
            return toolSettings;
        }
        #endregion
        #region Location
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetLocation(this AzureStorageAccountCreateSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetLocation(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region Sku
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.Sku"/>.</em></p><p>The storage account SKU.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetSku(this AzureStorageAccountCreateSettings toolSettings, StorageAccountSku sku)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = sku;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.Sku"/>.</em></p><p>The storage account SKU.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetSku(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.Tags"/>.</em></p><p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetTags(this AzureStorageAccountCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.Tags"/>.</em></p><p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetTags(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Bypass
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.Bypass"/>.</em></p><p>Bypass traffic for space-separated uses.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetBypass(this AzureStorageAccountCreateSettings toolSettings, StorageAccountBypass bypass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Bypass = bypass;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.Bypass"/>.</em></p><p>Bypass traffic for space-separated uses.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetBypass(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Bypass = null;
            return toolSettings;
        }
        #endregion
        #region DefaultAction
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.DefaultAction"/>.</em></p><p>Default action to apply when no rule matches.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetDefaultAction(this AzureStorageAccountCreateSettings toolSettings, StorageAccountDefaultAction defaultAction)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAction = defaultAction;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.DefaultAction"/>.</em></p><p>Default action to apply when no rule matches.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetDefaultAction(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAction = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetDebug(this AzureStorageAccountCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetDebug(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetHelp(this AzureStorageAccountCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetHelp(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetOutput(this AzureStorageAccountCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetOutput(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetQuery(this AzureStorageAccountCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetQuery(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings SetVerbose(this AzureStorageAccountCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountCreateSettings ResetVerbose(this AzureStorageAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageAccountDeleteSettings.Name"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings SetName(this AzureStorageAccountDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountDeleteSettings.Name"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings ResetName(this AzureStorageAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageAccountDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings SetResourceGroup(this AzureStorageAccountDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings ResetResourceGroup(this AzureStorageAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureStorageAccountDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings SetYes(this AzureStorageAccountDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings ResetYes(this AzureStorageAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings SetDebug(this AzureStorageAccountDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings ResetDebug(this AzureStorageAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings SetHelp(this AzureStorageAccountDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings ResetHelp(this AzureStorageAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings SetOutput(this AzureStorageAccountDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings ResetOutput(this AzureStorageAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings SetQuery(this AzureStorageAccountDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings ResetQuery(this AzureStorageAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings SetVerbose(this AzureStorageAccountDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountDeleteSettings ResetVerbose(this AzureStorageAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountGenerateSasSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountGenerateSasSettingsExtensions
    {
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetExpiry(this AzureStorageAccountGenerateSasSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetExpiry(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (a)dd (c)reate (d)elete (l)ist (p)rocess (r)ead (u)pdate (w)rite. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetPermissions(this AzureStorageAccountGenerateSasSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (a)dd (c)reate (d)elete (l)ist (p)rocess (r)ead (u)pdate (w)rite. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetPermissions(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region ResourceTypes
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.ResourceTypes"/>.</em></p><p>The resource types the SAS is applicable for. Allowed values: (s)ervice (c)ontainer (o)bject. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetResourceTypes(this AzureStorageAccountGenerateSasSettings toolSettings, string resourceTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceTypes = resourceTypes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.ResourceTypes"/>.</em></p><p>The resource types the SAS is applicable for. Allowed values: (s)ervice (c)ontainer (o)bject. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetResourceTypes(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceTypes = null;
            return toolSettings;
        }
        #endregion
        #region Services
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.Services"/>.</em></p><p>The storage services the SAS is applicable for. Allowed values: (b)lob (f)ile (q)ueue (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetServices(this AzureStorageAccountGenerateSasSettings toolSettings, string services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = services;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.Services"/>.</em></p><p>The storage services the SAS is applicable for. Allowed values: (b)lob (f)ile (q)ueue (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetServices(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = null;
            return toolSettings;
        }
        #endregion
        #region HttpsOnly
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetHttpsOnly(this AzureStorageAccountGenerateSasSettings toolSettings, string httpsOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = httpsOnly;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetHttpsOnly(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = null;
            return toolSettings;
        }
        #endregion
        #region Ip
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetIp(this AzureStorageAccountGenerateSasSettings toolSettings, string ip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = ip;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetIp(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetStart(this AzureStorageAccountGenerateSasSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetStart(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetAccountKey(this AzureStorageAccountGenerateSasSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetAccountKey(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Must be used in conjunction with either storage account key or a SAS token. Environment Variable: AZURE_STORAGE_ACCOUNT.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetAccountName(this AzureStorageAccountGenerateSasSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Must be used in conjunction with either storage account key or a SAS token. Environment Variable: AZURE_STORAGE_ACCOUNT.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetAccountName(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetConnectionString(this AzureStorageAccountGenerateSasSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetConnectionString(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetDebug(this AzureStorageAccountGenerateSasSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetDebug(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetHelp(this AzureStorageAccountGenerateSasSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetHelp(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetOutput(this AzureStorageAccountGenerateSasSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetOutput(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetQuery(this AzureStorageAccountGenerateSasSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetQuery(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings SetVerbose(this AzureStorageAccountGenerateSasSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountGenerateSasSettings ResetVerbose(this AzureStorageAccountGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageAccountListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountListSettings SetResourceGroup(this AzureStorageAccountListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountListSettings ResetResourceGroup(this AzureStorageAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountListSettings SetDebug(this AzureStorageAccountListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountListSettings ResetDebug(this AzureStorageAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountListSettings SetHelp(this AzureStorageAccountListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountListSettings ResetHelp(this AzureStorageAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountListSettings SetOutput(this AzureStorageAccountListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountListSettings ResetOutput(this AzureStorageAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountListSettings SetQuery(this AzureStorageAccountListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountListSettings ResetQuery(this AzureStorageAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountListSettings SetVerbose(this AzureStorageAccountListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountListSettings ResetVerbose(this AzureStorageAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowSettings.Name"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings SetName(this AzureStorageAccountShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowSettings.Name"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings ResetName(this AzureStorageAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings SetResourceGroup(this AzureStorageAccountShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings ResetResourceGroup(this AzureStorageAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings SetDebug(this AzureStorageAccountShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings ResetDebug(this AzureStorageAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings SetHelp(this AzureStorageAccountShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings ResetHelp(this AzureStorageAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings SetOutput(this AzureStorageAccountShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings ResetOutput(this AzureStorageAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings SetQuery(this AzureStorageAccountShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings ResetQuery(this AzureStorageAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings SetVerbose(this AzureStorageAccountShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowSettings ResetVerbose(this AzureStorageAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountShowConnectionStringSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountShowConnectionStringSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.Name"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetName(this AzureStorageAccountShowConnectionStringSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.Name"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetName(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region BlobEndpoint
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.BlobEndpoint"/>.</em></p><p>Custom endpoint for blobs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetBlobEndpoint(this AzureStorageAccountShowConnectionStringSettings toolSettings, string blobEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobEndpoint = blobEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.BlobEndpoint"/>.</em></p><p>Custom endpoint for blobs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetBlobEndpoint(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region FileEndpoint
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.FileEndpoint"/>.</em></p><p>Custom endpoint for files.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetFileEndpoint(this AzureStorageAccountShowConnectionStringSettings toolSettings, string fileEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FileEndpoint = fileEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.FileEndpoint"/>.</em></p><p>Custom endpoint for files.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetFileEndpoint(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FileEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region Key
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.Key"/>.</em></p><p>The key to use.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetKey(this AzureStorageAccountShowConnectionStringSettings toolSettings, StorageAccountKey key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.Key"/>.</em></p><p>The key to use.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetKey(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region Protocol
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.Protocol"/>.</em></p><p>The default endpoint protocol.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetProtocol(this AzureStorageAccountShowConnectionStringSettings toolSettings, StorageBlobProtocol protocol)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Protocol = protocol;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.Protocol"/>.</em></p><p>The default endpoint protocol.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetProtocol(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Protocol = null;
            return toolSettings;
        }
        #endregion
        #region QueueEndpoint
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.QueueEndpoint"/>.</em></p><p>Custom endpoint for queues.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetQueueEndpoint(this AzureStorageAccountShowConnectionStringSettings toolSettings, string queueEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueEndpoint = queueEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.QueueEndpoint"/>.</em></p><p>Custom endpoint for queues.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetQueueEndpoint(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetResourceGroup(this AzureStorageAccountShowConnectionStringSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetResourceGroup(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.SasToken"/>.</em></p><p>The SAS token to be used in the connection-string.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetSasToken(this AzureStorageAccountShowConnectionStringSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.SasToken"/>.</em></p><p>The SAS token to be used in the connection-string.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetSasToken(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region TableEndpoint
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.TableEndpoint"/>.</em></p><p>Custom endpoint for tables.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetTableEndpoint(this AzureStorageAccountShowConnectionStringSettings toolSettings, string tableEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableEndpoint = tableEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.TableEndpoint"/>.</em></p><p>Custom endpoint for tables.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetTableEndpoint(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetDebug(this AzureStorageAccountShowConnectionStringSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetDebug(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetHelp(this AzureStorageAccountShowConnectionStringSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetHelp(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetOutput(this AzureStorageAccountShowConnectionStringSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetOutput(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetQuery(this AzureStorageAccountShowConnectionStringSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetQuery(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowConnectionStringSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings SetVerbose(this AzureStorageAccountShowConnectionStringSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowConnectionStringSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowConnectionStringSettings ResetVerbose(this AzureStorageAccountShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountShowUsageSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountShowUsageSettingsExtensions
    {
        #region Location
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowUsageSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountShowUsageSettings SetLocation(this AzureStorageAccountShowUsageSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowUsageSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountShowUsageSettings ResetLocation(this AzureStorageAccountShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowUsageSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowUsageSettings SetDebug(this AzureStorageAccountShowUsageSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowUsageSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowUsageSettings ResetDebug(this AzureStorageAccountShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowUsageSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountShowUsageSettings SetHelp(this AzureStorageAccountShowUsageSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowUsageSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountShowUsageSettings ResetHelp(this AzureStorageAccountShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowUsageSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountShowUsageSettings SetOutput(this AzureStorageAccountShowUsageSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowUsageSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountShowUsageSettings ResetOutput(this AzureStorageAccountShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowUsageSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountShowUsageSettings SetQuery(this AzureStorageAccountShowUsageSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowUsageSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountShowUsageSettings ResetQuery(this AzureStorageAccountShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountShowUsageSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowUsageSettings SetVerbose(this AzureStorageAccountShowUsageSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountShowUsageSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountShowUsageSettings ResetVerbose(this AzureStorageAccountShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.Name"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetName(this AzureStorageAccountUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.Name"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetName(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AccessTier
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.AccessTier"/>.</em></p><p>The access tier used for billing StandardBlob accounts. Cannot be set for StandardLRS, StandardGRS, StandardRAGRS, or PremiumLRS account types. It is required for StandardBlob accounts during creation.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetAccessTier(this AzureStorageAccountUpdateSettings toolSettings, StorageAccountAccessTier accessTier)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccessTier = accessTier;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.AccessTier"/>.</em></p><p>The access tier used for billing StandardBlob accounts. Cannot be set for StandardLRS, StandardGRS, StandardRAGRS, or PremiumLRS account types. It is required for StandardBlob accounts during creation.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetAccessTier(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccessTier = null;
            return toolSettings;
        }
        #endregion
        #region AssignIdentity
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.AssignIdentity"/>.</em></p><p>Generate and assign a new Storage Account Identity for this storage account for use with key management services like Azure KeyVault.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetAssignIdentity(this AzureStorageAccountUpdateSettings toolSettings, string assignIdentity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssignIdentity = assignIdentity;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.AssignIdentity"/>.</em></p><p>Generate and assign a new Storage Account Identity for this storage account for use with key management services like Azure KeyVault.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetAssignIdentity(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssignIdentity = null;
            return toolSettings;
        }
        #endregion
        #region CustomDomain
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.CustomDomain"/>.</em></p><p>User domain assigned to the storage account. Name is the CNAME source. Use "" to clear existing value.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetCustomDomain(this AzureStorageAccountUpdateSettings toolSettings, string customDomain)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomDomain = customDomain;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.CustomDomain"/>.</em></p><p>User domain assigned to the storage account. Name is the CNAME source. Use "" to clear existing value.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetCustomDomain(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomDomain = null;
            return toolSettings;
        }
        #endregion
        #region EncryptionServices
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.EncryptionServices"/>.</em></p><p>Specifies which service(s) to encrypt.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetEncryptionServices(this AzureStorageAccountUpdateSettings toolSettings, StorageAccountEncryptionServices encryptionServices)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncryptionServices = encryptionServices;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.EncryptionServices"/>.</em></p><p>Specifies which service(s) to encrypt.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetEncryptionServices(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncryptionServices = null;
            return toolSettings;
        }
        #endregion
        #region HttpsOnly
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.HttpsOnly"/>.</em></p><p>Allows https traffic only to storage service.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetHttpsOnly(this AzureStorageAccountUpdateSettings toolSettings, bool? httpsOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = httpsOnly;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.HttpsOnly"/>.</em></p><p>Allows https traffic only to storage service.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetHttpsOnly(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageAccountUpdateSettings.HttpsOnly"/>.</em></p><p>Allows https traffic only to storage service.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings EnableHttpsOnly(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageAccountUpdateSettings.HttpsOnly"/>.</em></p><p>Allows https traffic only to storage service.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings DisableHttpsOnly(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageAccountUpdateSettings.HttpsOnly"/>.</em></p><p>Allows https traffic only to storage service.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ToggleHttpsOnly(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = !toolSettings.HttpsOnly;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetResourceGroup(this AzureStorageAccountUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetResourceGroup(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Sku
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.Sku"/>.</em></p><p>The storage account SKU.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetSku(this AzureStorageAccountUpdateSettings toolSettings, StorageAccountSku sku)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = sku;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.Sku"/>.</em></p><p>The storage account SKU.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetSku(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.Tags"/>.</em></p><p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetTags(this AzureStorageAccountUpdateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.Tags"/>.</em></p><p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetTags(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region UseSubdomain
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.UseSubdomain"/>.</em></p><p>Specify whether to use indirect CNAME validation.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetUseSubdomain(this AzureStorageAccountUpdateSettings toolSettings, bool? useSubdomain)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSubdomain = useSubdomain;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.UseSubdomain"/>.</em></p><p>Specify whether to use indirect CNAME validation.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetUseSubdomain(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSubdomain = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageAccountUpdateSettings.UseSubdomain"/>.</em></p><p>Specify whether to use indirect CNAME validation.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings EnableUseSubdomain(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSubdomain = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageAccountUpdateSettings.UseSubdomain"/>.</em></p><p>Specify whether to use indirect CNAME validation.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings DisableUseSubdomain(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSubdomain = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageAccountUpdateSettings.UseSubdomain"/>.</em></p><p>Specify whether to use indirect CNAME validation.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ToggleUseSubdomain(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSubdomain = !toolSettings.UseSubdomain;
            return toolSettings;
        }
        #endregion
        #region EncryptionKeyName
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.EncryptionKeyName"/>.</em></p><p>The name of the KeyVault key.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetEncryptionKeyName(this AzureStorageAccountUpdateSettings toolSettings, string encryptionKeyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncryptionKeyName = encryptionKeyName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.EncryptionKeyName"/>.</em></p><p>The name of the KeyVault key.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetEncryptionKeyName(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncryptionKeyName = null;
            return toolSettings;
        }
        #endregion
        #region EncryptionKeySource
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.EncryptionKeySource"/>.</em></p><p>The default encryption service.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetEncryptionKeySource(this AzureStorageAccountUpdateSettings toolSettings, StorageAccountUpdateEncryptionKeySource encryptionKeySource)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncryptionKeySource = encryptionKeySource;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.EncryptionKeySource"/>.</em></p><p>The default encryption service.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetEncryptionKeySource(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncryptionKeySource = null;
            return toolSettings;
        }
        #endregion
        #region EncryptionKeyVault
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.EncryptionKeyVault"/>.</em></p><p>The Uri of the KeyVault.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetEncryptionKeyVault(this AzureStorageAccountUpdateSettings toolSettings, string encryptionKeyVault)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncryptionKeyVault = encryptionKeyVault;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.EncryptionKeyVault"/>.</em></p><p>The Uri of the KeyVault.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetEncryptionKeyVault(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncryptionKeyVault = null;
            return toolSettings;
        }
        #endregion
        #region EncryptionKeyVersion
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.EncryptionKeyVersion"/>.</em></p><p>The version of the KeyVault key.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetEncryptionKeyVersion(this AzureStorageAccountUpdateSettings toolSettings, string encryptionKeyVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncryptionKeyVersion = encryptionKeyVersion;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.EncryptionKeyVersion"/>.</em></p><p>The version of the KeyVault key.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetEncryptionKeyVersion(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncryptionKeyVersion = null;
            return toolSettings;
        }
        #endregion
        #region Bypass
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.Bypass"/>.</em></p><p>Bypass traffic for space-separated uses.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetBypass(this AzureStorageAccountUpdateSettings toolSettings, StorageAccountBypass bypass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Bypass = bypass;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.Bypass"/>.</em></p><p>Bypass traffic for space-separated uses.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetBypass(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Bypass = null;
            return toolSettings;
        }
        #endregion
        #region DefaultAction
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.DefaultAction"/>.</em></p><p>Default action to apply when no rule matches.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetDefaultAction(this AzureStorageAccountUpdateSettings toolSettings, StorageAccountDefaultAction defaultAction)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAction = defaultAction;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.DefaultAction"/>.</em></p><p>Default action to apply when no rule matches.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetDefaultAction(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAction = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetAdd(this AzureStorageAccountUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetAdd(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.ForceString"/>.</em></p><p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetForceString(this AzureStorageAccountUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.ForceString"/>.</em></p><p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetForceString(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetRemove(this AzureStorageAccountUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetRemove(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetSet(this AzureStorageAccountUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetSet(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetDebug(this AzureStorageAccountUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetDebug(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetHelp(this AzureStorageAccountUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetHelp(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetOutput(this AzureStorageAccountUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetOutput(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetQuery(this AzureStorageAccountUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetQuery(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings SetVerbose(this AzureStorageAccountUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountUpdateSettings ResetVerbose(this AzureStorageAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageShareCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageShareCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetName(this AzureStorageShareCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetName(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region FailOnExist
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.FailOnExist"/>.</em></p><p>Specify whether to throw an exception when the share exists. False by default.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetFailOnExist(this AzureStorageShareCreateSettings toolSettings, string failOnExist)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = failOnExist;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.FailOnExist"/>.</em></p><p>Specify whether to throw an exception when the share exists. False by default.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetFailOnExist(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetMetadata(this AzureStorageShareCreateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageShareCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ClearMetadata(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageShareCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings AddMetadatum(this AzureStorageShareCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageShareCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings RemoveMetadatum(this AzureStorageShareCreateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageShareCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetMetadatum(this AzureStorageShareCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Quota
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.Quota"/>.</em></p><p>Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120).</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetQuota(this AzureStorageShareCreateSettings toolSettings, string quota)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quota = quota;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.Quota"/>.</em></p><p>Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120).</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetQuota(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quota = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetTimeout(this AzureStorageShareCreateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetTimeout(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetAccountKey(this AzureStorageShareCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetAccountKey(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetAccountName(this AzureStorageShareCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetAccountName(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetConnectionString(this AzureStorageShareCreateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetConnectionString(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetSasToken(this AzureStorageShareCreateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetSasToken(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetDebug(this AzureStorageShareCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetDebug(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetHelp(this AzureStorageShareCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetHelp(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetOutput(this AzureStorageShareCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetOutput(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetQuery(this AzureStorageShareCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetQuery(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageShareCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings SetVerbose(this AzureStorageShareCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareCreateSettings ResetVerbose(this AzureStorageShareCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageShareDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageShareDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetName(this AzureStorageShareDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetName(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region DeleteSnapshots
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.DeleteSnapshots"/>.</em></p><p>Specify the deletion strategy when the share has snapshots.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetDeleteSnapshots(this AzureStorageShareDeleteSettings toolSettings, StorageShareDeleteDeleteSnapshots deleteSnapshots)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSnapshots = deleteSnapshots;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.DeleteSnapshots"/>.</em></p><p>Specify the deletion strategy when the share has snapshots.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetDeleteSnapshots(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteSnapshots = null;
            return toolSettings;
        }
        #endregion
        #region FailNotExist
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.FailNotExist"/>.</em></p><p>Specify whether to throw an exception when the share doesn't exist. False by default.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetFailNotExist(this AzureStorageShareDeleteSettings toolSettings, string failNotExist)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = failNotExist;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.FailNotExist"/>.</em></p><p>Specify whether to throw an exception when the share doesn't exist. False by default.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetFailNotExist(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable. Specify this argument to delete a specific snapshot only. delete_snapshots must be None if this is specified.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetSnapshot(this AzureStorageShareDeleteSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable. Specify this argument to delete a specific snapshot only. delete_snapshots must be None if this is specified.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetSnapshot(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetTimeout(this AzureStorageShareDeleteSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetTimeout(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetAccountKey(this AzureStorageShareDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetAccountKey(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetAccountName(this AzureStorageShareDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetAccountName(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetConnectionString(this AzureStorageShareDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetConnectionString(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetSasToken(this AzureStorageShareDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetSasToken(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetDebug(this AzureStorageShareDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetDebug(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetHelp(this AzureStorageShareDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetHelp(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetOutput(this AzureStorageShareDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetOutput(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetQuery(this AzureStorageShareDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetQuery(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageShareDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings SetVerbose(this AzureStorageShareDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareDeleteSettings ResetVerbose(this AzureStorageShareDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageShareExistsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageShareExistsSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageShareExistsSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings SetName(this AzureStorageShareExistsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareExistsSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings ResetName(this AzureStorageShareExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageShareExistsSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings SetSnapshot(this AzureStorageShareExistsSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareExistsSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings ResetSnapshot(this AzureStorageShareExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageShareExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings SetTimeout(this AzureStorageShareExistsSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings ResetTimeout(this AzureStorageShareExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageShareExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings SetAccountKey(this AzureStorageShareExistsSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings ResetAccountKey(this AzureStorageShareExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageShareExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings SetAccountName(this AzureStorageShareExistsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings ResetAccountName(this AzureStorageShareExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageShareExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings SetConnectionString(this AzureStorageShareExistsSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings ResetConnectionString(this AzureStorageShareExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageShareExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings SetSasToken(this AzureStorageShareExistsSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings ResetSasToken(this AzureStorageShareExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageShareExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings SetDebug(this AzureStorageShareExistsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings ResetDebug(this AzureStorageShareExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageShareExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings SetHelp(this AzureStorageShareExistsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings ResetHelp(this AzureStorageShareExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageShareExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings SetOutput(this AzureStorageShareExistsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings ResetOutput(this AzureStorageShareExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageShareExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings SetQuery(this AzureStorageShareExistsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings ResetQuery(this AzureStorageShareExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageShareExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings SetVerbose(this AzureStorageShareExistsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareExistsSettings ResetVerbose(this AzureStorageShareExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageShareGenerateSasSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageShareGenerateSasSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetName(this AzureStorageShareGenerateSasSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetName(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region CacheControl
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.CacheControl"/>.</em></p><p>Response header value for Cache-Control when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetCacheControl(this AzureStorageShareGenerateSasSettings toolSettings, string cacheControl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheControl = cacheControl;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.CacheControl"/>.</em></p><p>Response header value for Cache-Control when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetCacheControl(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheControl = null;
            return toolSettings;
        }
        #endregion
        #region ContentDisposition
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.ContentDisposition"/>.</em></p><p>Response header value for Content-Disposition when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetContentDisposition(this AzureStorageShareGenerateSasSettings toolSettings, string contentDisposition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = contentDisposition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.ContentDisposition"/>.</em></p><p>Response header value for Content-Disposition when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetContentDisposition(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = null;
            return toolSettings;
        }
        #endregion
        #region ContentEncoding
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.ContentEncoding"/>.</em></p><p>Response header value for Content-Encoding when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetContentEncoding(this AzureStorageShareGenerateSasSettings toolSettings, string contentEncoding)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = contentEncoding;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.ContentEncoding"/>.</em></p><p>Response header value for Content-Encoding when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetContentEncoding(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = null;
            return toolSettings;
        }
        #endregion
        #region ContentLanguage
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.ContentLanguage"/>.</em></p><p>Response header value for Content-Language when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetContentLanguage(this AzureStorageShareGenerateSasSettings toolSettings, string contentLanguage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = contentLanguage;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.ContentLanguage"/>.</em></p><p>Response header value for Content-Language when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetContentLanguage(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = null;
            return toolSettings;
        }
        #endregion
        #region ContentType
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.ContentType"/>.</em></p><p>Response header value for Content-Type when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetContentType(this AzureStorageShareGenerateSasSettings toolSettings, string contentType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = contentType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.ContentType"/>.</em></p><p>Response header value for Content-Type when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetContentType(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetExpiry(this AzureStorageShareGenerateSasSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetExpiry(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region HttpsOnly
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetHttpsOnly(this AzureStorageShareGenerateSasSettings toolSettings, string httpsOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = httpsOnly;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetHttpsOnly(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = null;
            return toolSettings;
        }
        #endregion
        #region Ip
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetIp(this AzureStorageShareGenerateSasSettings toolSettings, string ip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = ip;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetIp(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (d)elete (l)ist (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetPermissions(this AzureStorageShareGenerateSasSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (d)elete (l)ist (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetPermissions(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region PolicyName
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.PolicyName"/>.</em></p><p>The name of a stored access policy within the share's ACL.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetPolicyName(this AzureStorageShareGenerateSasSettings toolSettings, string policyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyName = policyName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.PolicyName"/>.</em></p><p>The name of a stored access policy within the share's ACL.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetPolicyName(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyName = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetStart(this AzureStorageShareGenerateSasSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetStart(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetAccountKey(this AzureStorageShareGenerateSasSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetAccountKey(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetAccountName(this AzureStorageShareGenerateSasSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetAccountName(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetConnectionString(this AzureStorageShareGenerateSasSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetConnectionString(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetSasToken(this AzureStorageShareGenerateSasSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetSasToken(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetDebug(this AzureStorageShareGenerateSasSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetDebug(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetHelp(this AzureStorageShareGenerateSasSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetHelp(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetOutput(this AzureStorageShareGenerateSasSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetOutput(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetQuery(this AzureStorageShareGenerateSasSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetQuery(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageShareGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings SetVerbose(this AzureStorageShareGenerateSasSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareGenerateSasSettings ResetVerbose(this AzureStorageShareGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageShareListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageShareListSettingsExtensions
    {
        #region IncludeMetadata
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.IncludeMetadata"/>.</em></p><p>Specifies that share metadata be returned in the response.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetIncludeMetadata(this AzureStorageShareListSettings toolSettings, string includeMetadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludeMetadata = includeMetadata;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.IncludeMetadata"/>.</em></p><p>Specifies that share metadata be returned in the response.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetIncludeMetadata(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludeMetadata = null;
            return toolSettings;
        }
        #endregion
        #region IncludeSnapshots
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.IncludeSnapshots"/>.</em></p><p>Specifies that share snapshots be returned in the response.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetIncludeSnapshots(this AzureStorageShareListSettings toolSettings, string includeSnapshots)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludeSnapshots = includeSnapshots;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.IncludeSnapshots"/>.</em></p><p>Specifies that share snapshots be returned in the response.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetIncludeSnapshots(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludeSnapshots = null;
            return toolSettings;
        }
        #endregion
        #region NumResults
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.NumResults"/>.</em></p><p>Specifies the maximum number of shares to return.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetNumResults(this AzureStorageShareListSettings toolSettings, int? numResults)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumResults = numResults;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.NumResults"/>.</em></p><p>Specifies the maximum number of shares to return.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetNumResults(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumResults = null;
            return toolSettings;
        }
        #endregion
        #region Prefix
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.Prefix"/>.</em></p><p>Filters the results to return only shares whose names begin with the specified prefix.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetPrefix(this AzureStorageShareListSettings toolSettings, string prefix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prefix = prefix;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.Prefix"/>.</em></p><p>Filters the results to return only shares whose names begin with the specified prefix.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetPrefix(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prefix = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetTimeout(this AzureStorageShareListSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetTimeout(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetAccountKey(this AzureStorageShareListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetAccountKey(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetAccountName(this AzureStorageShareListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetAccountName(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetConnectionString(this AzureStorageShareListSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetConnectionString(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetSasToken(this AzureStorageShareListSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetSasToken(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetDebug(this AzureStorageShareListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetDebug(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetHelp(this AzureStorageShareListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetHelp(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetOutput(this AzureStorageShareListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetOutput(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetQuery(this AzureStorageShareListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetQuery(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageShareListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings SetVerbose(this AzureStorageShareListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareListSettings ResetVerbose(this AzureStorageShareListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageShareShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageShareShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageShareShowSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings SetName(this AzureStorageShareShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareShowSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings ResetName(this AzureStorageShareShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageShareShowSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings SetSnapshot(this AzureStorageShareShowSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareShowSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings ResetSnapshot(this AzureStorageShareShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageShareShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings SetTimeout(this AzureStorageShareShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings ResetTimeout(this AzureStorageShareShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageShareShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings SetAccountKey(this AzureStorageShareShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings ResetAccountKey(this AzureStorageShareShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageShareShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings SetAccountName(this AzureStorageShareShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings ResetAccountName(this AzureStorageShareShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageShareShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings SetConnectionString(this AzureStorageShareShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings ResetConnectionString(this AzureStorageShareShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageShareShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings SetSasToken(this AzureStorageShareShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings ResetSasToken(this AzureStorageShareShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageShareShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings SetDebug(this AzureStorageShareShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings ResetDebug(this AzureStorageShareShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageShareShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings SetHelp(this AzureStorageShareShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings ResetHelp(this AzureStorageShareShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageShareShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings SetOutput(this AzureStorageShareShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings ResetOutput(this AzureStorageShareShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageShareShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings SetQuery(this AzureStorageShareShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings ResetQuery(this AzureStorageShareShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageShareShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings SetVerbose(this AzureStorageShareShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareShowSettings ResetVerbose(this AzureStorageShareShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageShareSnapshotSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageShareSnapshotSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetName(this AzureStorageShareSnapshotSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareSnapshotSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ResetName(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetMetadata(this AzureStorageShareSnapshotSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageShareSnapshotSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ClearMetadata(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageShareSnapshotSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings AddMetadatum(this AzureStorageShareSnapshotSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageShareSnapshotSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings RemoveMetadatum(this AzureStorageShareSnapshotSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageShareSnapshotSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetMetadatum(this AzureStorageShareSnapshotSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Quota
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.Quota"/>.</em></p><p>Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120).</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetQuota(this AzureStorageShareSnapshotSettings toolSettings, string quota)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quota = quota;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareSnapshotSettings.Quota"/>.</em></p><p>Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120).</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ResetQuota(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quota = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetTimeout(this AzureStorageShareSnapshotSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareSnapshotSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ResetTimeout(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetAccountKey(this AzureStorageShareSnapshotSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareSnapshotSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ResetAccountKey(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetAccountName(this AzureStorageShareSnapshotSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareSnapshotSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ResetAccountName(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetConnectionString(this AzureStorageShareSnapshotSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareSnapshotSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ResetConnectionString(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetSasToken(this AzureStorageShareSnapshotSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareSnapshotSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ResetSasToken(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetDebug(this AzureStorageShareSnapshotSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareSnapshotSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ResetDebug(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetHelp(this AzureStorageShareSnapshotSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareSnapshotSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ResetHelp(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetOutput(this AzureStorageShareSnapshotSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareSnapshotSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ResetOutput(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetQuery(this AzureStorageShareSnapshotSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareSnapshotSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ResetQuery(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageShareSnapshotSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings SetVerbose(this AzureStorageShareSnapshotSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareSnapshotSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareSnapshotSettings ResetVerbose(this AzureStorageShareSnapshotSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageShareStatsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageShareStatsSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageShareStatsSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings SetName(this AzureStorageShareStatsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareStatsSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings ResetName(this AzureStorageShareStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageShareStatsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings SetTimeout(this AzureStorageShareStatsSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareStatsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings ResetTimeout(this AzureStorageShareStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageShareStatsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings SetAccountKey(this AzureStorageShareStatsSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareStatsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings ResetAccountKey(this AzureStorageShareStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageShareStatsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings SetAccountName(this AzureStorageShareStatsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareStatsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings ResetAccountName(this AzureStorageShareStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageShareStatsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings SetConnectionString(this AzureStorageShareStatsSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareStatsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings ResetConnectionString(this AzureStorageShareStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageShareStatsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings SetSasToken(this AzureStorageShareStatsSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareStatsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings ResetSasToken(this AzureStorageShareStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageShareStatsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings SetDebug(this AzureStorageShareStatsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareStatsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings ResetDebug(this AzureStorageShareStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageShareStatsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings SetHelp(this AzureStorageShareStatsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareStatsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings ResetHelp(this AzureStorageShareStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageShareStatsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings SetOutput(this AzureStorageShareStatsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareStatsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings ResetOutput(this AzureStorageShareStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageShareStatsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings SetQuery(this AzureStorageShareStatsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareStatsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings ResetQuery(this AzureStorageShareStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageShareStatsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings SetVerbose(this AzureStorageShareStatsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareStatsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareStatsSettings ResetVerbose(this AzureStorageShareStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageShareUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageShareUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageShareUpdateSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings SetName(this AzureStorageShareUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUpdateSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings ResetName(this AzureStorageShareUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Quota
        /// <summary><p><em>Sets <see cref="AzureStorageShareUpdateSettings.Quota"/>.</em></p><p>Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5 TB (5120 GB).</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings SetQuota(this AzureStorageShareUpdateSettings toolSettings, string quota)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quota = quota;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUpdateSettings.Quota"/>.</em></p><p>Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5 TB (5120 GB).</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings ResetQuota(this AzureStorageShareUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quota = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageShareUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings SetTimeout(this AzureStorageShareUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings ResetTimeout(this AzureStorageShareUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageShareUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings SetAccountKey(this AzureStorageShareUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings ResetAccountKey(this AzureStorageShareUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageShareUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings SetAccountName(this AzureStorageShareUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings ResetAccountName(this AzureStorageShareUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageShareUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings SetConnectionString(this AzureStorageShareUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings ResetConnectionString(this AzureStorageShareUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageShareUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings SetSasToken(this AzureStorageShareUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings ResetSasToken(this AzureStorageShareUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageShareUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings SetDebug(this AzureStorageShareUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings ResetDebug(this AzureStorageShareUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageShareUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings SetHelp(this AzureStorageShareUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings ResetHelp(this AzureStorageShareUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageShareUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings SetOutput(this AzureStorageShareUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings ResetOutput(this AzureStorageShareUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageShareUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings SetQuery(this AzureStorageShareUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings ResetQuery(this AzureStorageShareUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageShareUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings SetVerbose(this AzureStorageShareUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareUpdateSettings ResetVerbose(this AzureStorageShareUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageShareUrlSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageShareUrlSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageShareUrlSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings SetName(this AzureStorageShareUrlSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUrlSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings ResetName(this AzureStorageShareUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Protocol
        /// <summary><p><em>Sets <see cref="AzureStorageShareUrlSettings.Protocol"/>.</em></p><p>Protocol to use.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings SetProtocol(this AzureStorageShareUrlSettings toolSettings, StorageBlobProtocol protocol)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Protocol = protocol;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUrlSettings.Protocol"/>.</em></p><p>Protocol to use.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings ResetProtocol(this AzureStorageShareUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Protocol = null;
            return toolSettings;
        }
        #endregion
        #region Unc
        /// <summary><p><em>Sets <see cref="AzureStorageShareUrlSettings.Unc"/>.</em></p><p>Output UNC network path.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings SetUnc(this AzureStorageShareUrlSettings toolSettings, string unc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Unc = unc;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUrlSettings.Unc"/>.</em></p><p>Output UNC network path.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings ResetUnc(this AzureStorageShareUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Unc = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageShareUrlSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings SetAccountKey(this AzureStorageShareUrlSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUrlSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings ResetAccountKey(this AzureStorageShareUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageShareUrlSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings SetAccountName(this AzureStorageShareUrlSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUrlSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings ResetAccountName(this AzureStorageShareUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageShareUrlSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings SetConnectionString(this AzureStorageShareUrlSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUrlSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings ResetConnectionString(this AzureStorageShareUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageShareUrlSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings SetSasToken(this AzureStorageShareUrlSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUrlSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings ResetSasToken(this AzureStorageShareUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageShareUrlSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings SetDebug(this AzureStorageShareUrlSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUrlSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings ResetDebug(this AzureStorageShareUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageShareUrlSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings SetHelp(this AzureStorageShareUrlSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUrlSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings ResetHelp(this AzureStorageShareUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageShareUrlSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings SetOutput(this AzureStorageShareUrlSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUrlSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings ResetOutput(this AzureStorageShareUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageShareUrlSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings SetQuery(this AzureStorageShareUrlSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUrlSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings ResetQuery(this AzureStorageShareUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageShareUrlSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings SetVerbose(this AzureStorageShareUrlSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareUrlSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareUrlSettings ResetVerbose(this AzureStorageShareUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageDirectoryCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageDirectoryCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetName(this AzureStorageDirectoryCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetName(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetShareName(this AzureStorageDirectoryCreateSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetShareName(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region FailOnExist
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.FailOnExist"/>.</em></p><p>Specify whether to throw an exception when the directory exists. False by default.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetFailOnExist(this AzureStorageDirectoryCreateSettings toolSettings, string failOnExist)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = failOnExist;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.FailOnExist"/>.</em></p><p>Specify whether to throw an exception when the directory exists. False by default.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetFailOnExist(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetMetadata(this AzureStorageDirectoryCreateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageDirectoryCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ClearMetadata(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageDirectoryCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings AddMetadatum(this AzureStorageDirectoryCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageDirectoryCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings RemoveMetadatum(this AzureStorageDirectoryCreateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageDirectoryCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetMetadatum(this AzureStorageDirectoryCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetTimeout(this AzureStorageDirectoryCreateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetTimeout(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetAccountKey(this AzureStorageDirectoryCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetAccountKey(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetAccountName(this AzureStorageDirectoryCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetAccountName(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetConnectionString(this AzureStorageDirectoryCreateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetConnectionString(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetSasToken(this AzureStorageDirectoryCreateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetSasToken(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetDebug(this AzureStorageDirectoryCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetDebug(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetHelp(this AzureStorageDirectoryCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetHelp(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetOutput(this AzureStorageDirectoryCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetOutput(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetQuery(this AzureStorageDirectoryCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetQuery(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings SetVerbose(this AzureStorageDirectoryCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryCreateSettings ResetVerbose(this AzureStorageDirectoryCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageDirectoryDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageDirectoryDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetName(this AzureStorageDirectoryDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetName(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetShareName(this AzureStorageDirectoryDeleteSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetShareName(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region FailNotExist
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.FailNotExist"/>.</em></p><p>Specify whether to throw an exception when the directory doesn't exist.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetFailNotExist(this AzureStorageDirectoryDeleteSettings toolSettings, string failNotExist)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = failNotExist;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.FailNotExist"/>.</em></p><p>Specify whether to throw an exception when the directory doesn't exist.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetFailNotExist(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetTimeout(this AzureStorageDirectoryDeleteSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetTimeout(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetAccountKey(this AzureStorageDirectoryDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetAccountKey(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetAccountName(this AzureStorageDirectoryDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetAccountName(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetConnectionString(this AzureStorageDirectoryDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetConnectionString(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetSasToken(this AzureStorageDirectoryDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetSasToken(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetDebug(this AzureStorageDirectoryDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetDebug(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetHelp(this AzureStorageDirectoryDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetHelp(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetOutput(this AzureStorageDirectoryDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetOutput(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetQuery(this AzureStorageDirectoryDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetQuery(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings SetVerbose(this AzureStorageDirectoryDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryDeleteSettings ResetVerbose(this AzureStorageDirectoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageDirectoryExistsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageDirectoryExistsSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetName(this AzureStorageDirectoryExistsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetName(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetShareName(this AzureStorageDirectoryExistsSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetShareName(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetSnapshot(this AzureStorageDirectoryExistsSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetSnapshot(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetTimeout(this AzureStorageDirectoryExistsSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetTimeout(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetAccountKey(this AzureStorageDirectoryExistsSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetAccountKey(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetAccountName(this AzureStorageDirectoryExistsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetAccountName(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetConnectionString(this AzureStorageDirectoryExistsSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetConnectionString(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetSasToken(this AzureStorageDirectoryExistsSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetSasToken(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetDebug(this AzureStorageDirectoryExistsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetDebug(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetHelp(this AzureStorageDirectoryExistsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetHelp(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetOutput(this AzureStorageDirectoryExistsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetOutput(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetQuery(this AzureStorageDirectoryExistsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetQuery(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings SetVerbose(this AzureStorageDirectoryExistsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryExistsSettings ResetVerbose(this AzureStorageDirectoryExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageDirectoryListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageDirectoryListSettingsExtensions
    {
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryListSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings SetShareName(this AzureStorageDirectoryListSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryListSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings ResetShareName(this AzureStorageDirectoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryListSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings SetName(this AzureStorageDirectoryListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryListSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings ResetName(this AzureStorageDirectoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings SetTimeout(this AzureStorageDirectoryListSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings ResetTimeout(this AzureStorageDirectoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings SetAccountKey(this AzureStorageDirectoryListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings ResetAccountKey(this AzureStorageDirectoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings SetAccountName(this AzureStorageDirectoryListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings ResetAccountName(this AzureStorageDirectoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings SetConnectionString(this AzureStorageDirectoryListSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings ResetConnectionString(this AzureStorageDirectoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings SetSasToken(this AzureStorageDirectoryListSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings ResetSasToken(this AzureStorageDirectoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings SetDebug(this AzureStorageDirectoryListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings ResetDebug(this AzureStorageDirectoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings SetHelp(this AzureStorageDirectoryListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings ResetHelp(this AzureStorageDirectoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings SetOutput(this AzureStorageDirectoryListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings ResetOutput(this AzureStorageDirectoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings SetQuery(this AzureStorageDirectoryListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings ResetQuery(this AzureStorageDirectoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings SetVerbose(this AzureStorageDirectoryListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryListSettings ResetVerbose(this AzureStorageDirectoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageDirectoryShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageDirectoryShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetName(this AzureStorageDirectoryShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetName(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetShareName(this AzureStorageDirectoryShowSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetShareName(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetSnapshot(this AzureStorageDirectoryShowSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetSnapshot(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetTimeout(this AzureStorageDirectoryShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetTimeout(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetAccountKey(this AzureStorageDirectoryShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetAccountKey(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetAccountName(this AzureStorageDirectoryShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetAccountName(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetConnectionString(this AzureStorageDirectoryShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetConnectionString(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetSasToken(this AzureStorageDirectoryShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetSasToken(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetDebug(this AzureStorageDirectoryShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetDebug(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetHelp(this AzureStorageDirectoryShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetHelp(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetOutput(this AzureStorageDirectoryShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetOutput(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetQuery(this AzureStorageDirectoryShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetQuery(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings SetVerbose(this AzureStorageDirectoryShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryShowSettings ResetVerbose(this AzureStorageDirectoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageEntityDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageEntityDeleteSettingsExtensions
    {
        #region PartitionKey
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.PartitionKey"/>.</em></p><p>The PartitionKey of the entity.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetPartitionKey(this AzureStorageEntityDeleteSettings toolSettings, string partitionKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionKey = partitionKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.PartitionKey"/>.</em></p><p>The PartitionKey of the entity.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetPartitionKey(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionKey = null;
            return toolSettings;
        }
        #endregion
        #region RowKey
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.RowKey"/>.</em></p><p>The RowKey of the entity.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetRowKey(this AzureStorageEntityDeleteSettings toolSettings, string rowKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RowKey = rowKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.RowKey"/>.</em></p><p>The RowKey of the entity.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetRowKey(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RowKey = null;
            return toolSettings;
        }
        #endregion
        #region TableName
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.TableName"/>.</em></p><p>The name of the table containing the entity to delete.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetTableName(this AzureStorageEntityDeleteSettings toolSettings, string tableName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = tableName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.TableName"/>.</em></p><p>The name of the table containing the entity to delete.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetTableName(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetTimeout(this AzureStorageEntityDeleteSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetTimeout(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.IfMatch"/>.</em></p><p>The client may specify the ETag for the entity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The delete operation will be performed only if the ETag sent by the client matches the value maintained by the server, indicating that the entity has not been modified since it was retrieved by the client. To force an unconditional delete, set If-Match to the wildcard character (*).</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetIfMatch(this AzureStorageEntityDeleteSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.IfMatch"/>.</em></p><p>The client may specify the ETag for the entity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The delete operation will be performed only if the ETag sent by the client matches the value maintained by the server, indicating that the entity has not been modified since it was retrieved by the client. To force an unconditional delete, set If-Match to the wildcard character (*).</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetIfMatch(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetAccountKey(this AzureStorageEntityDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetAccountKey(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetAccountName(this AzureStorageEntityDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetAccountName(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetConnectionString(this AzureStorageEntityDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetConnectionString(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetSasToken(this AzureStorageEntityDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetSasToken(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetDebug(this AzureStorageEntityDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetDebug(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetHelp(this AzureStorageEntityDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetHelp(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetOutput(this AzureStorageEntityDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetOutput(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetQuery(this AzureStorageEntityDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetQuery(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageEntityDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings SetVerbose(this AzureStorageEntityDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityDeleteSettings ResetVerbose(this AzureStorageEntityDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageEntityInsertSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageEntityInsertSettingsExtensions
    {
        #region Entity
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.Entity"/> to a new dictionary.</em></p><p>Space-separated list of key=value pairs. Must contain a PartitionKey and a RowKey.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetEntity(this AzureStorageEntityInsertSettings toolSettings, IDictionary<string, object> entity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EntityInternal = entity.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageEntityInsertSettings.Entity"/>.</em></p><p>Space-separated list of key=value pairs. Must contain a PartitionKey and a RowKey.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ClearEntity(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EntityInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageEntityInsertSettings.Entity"/>.</em></p><p>Space-separated list of key=value pairs. Must contain a PartitionKey and a RowKey.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings AddEntity(this AzureStorageEntityInsertSettings toolSettings, string entityKey, object entityValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EntityInternal.Add(entityKey, entityValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageEntityInsertSettings.Entity"/>.</em></p><p>Space-separated list of key=value pairs. Must contain a PartitionKey and a RowKey.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings RemoveEntity(this AzureStorageEntityInsertSettings toolSettings, string entityKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EntityInternal.Remove(entityKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageEntityInsertSettings.Entity"/>.</em></p><p>Space-separated list of key=value pairs. Must contain a PartitionKey and a RowKey.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetEntity(this AzureStorageEntityInsertSettings toolSettings, string entityKey, object entityValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EntityInternal[entityKey] = entityValue;
            return toolSettings;
        }
        #endregion
        #region TableName
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.TableName"/>.</em></p><p>The name of the table to insert the entity into.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetTableName(this AzureStorageEntityInsertSettings toolSettings, string tableName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = tableName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityInsertSettings.TableName"/>.</em></p><p>The name of the table to insert the entity into.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ResetTableName(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = null;
            return toolSettings;
        }
        #endregion
        #region IfExists
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.IfExists"/>.</em></p><p>Behavior when an entity already exists for the specified PartitionKey and RowKey.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetIfExists(this AzureStorageEntityInsertSettings toolSettings, StorageEntityInsertIfExists ifExists)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfExists = ifExists;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityInsertSettings.IfExists"/>.</em></p><p>Behavior when an entity already exists for the specified PartitionKey and RowKey.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ResetIfExists(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfExists = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.Timeout"/>.</em></p><p>The server timeout, expressed in seconds.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetTimeout(this AzureStorageEntityInsertSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityInsertSettings.Timeout"/>.</em></p><p>The server timeout, expressed in seconds.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ResetTimeout(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetAccountKey(this AzureStorageEntityInsertSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityInsertSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ResetAccountKey(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetAccountName(this AzureStorageEntityInsertSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityInsertSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ResetAccountName(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetConnectionString(this AzureStorageEntityInsertSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityInsertSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ResetConnectionString(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetSasToken(this AzureStorageEntityInsertSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityInsertSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ResetSasToken(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetDebug(this AzureStorageEntityInsertSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityInsertSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ResetDebug(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetHelp(this AzureStorageEntityInsertSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityInsertSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ResetHelp(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetOutput(this AzureStorageEntityInsertSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityInsertSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ResetOutput(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetQuery(this AzureStorageEntityInsertSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityInsertSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ResetQuery(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageEntityInsertSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings SetVerbose(this AzureStorageEntityInsertSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityInsertSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityInsertSettings ResetVerbose(this AzureStorageEntityInsertSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageEntityMergeSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageEntityMergeSettingsExtensions
    {
        #region Entity
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.Entity"/>.</em></p><p>The entity to merge. Could be a dict or an entity object. Must contain a PartitionKey and a RowKey.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetEntity(this AzureStorageEntityMergeSettings toolSettings, string entity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entity = entity;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.Entity"/>.</em></p><p>The entity to merge. Could be a dict or an entity object. Must contain a PartitionKey and a RowKey.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetEntity(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entity = null;
            return toolSettings;
        }
        #endregion
        #region TableName
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.TableName"/>.</em></p><p>The name of the table containing the entity to merge.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetTableName(this AzureStorageEntityMergeSettings toolSettings, string tableName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = tableName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.TableName"/>.</em></p><p>The name of the table containing the entity to merge.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetTableName(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetTimeout(this AzureStorageEntityMergeSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetTimeout(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.IfMatch"/>.</em></p><p>The client may specify the ETag for the entity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The merge operation will be performed only if the ETag sent by the client matches the value maintained by the server, indicating that the entity has not been modified since it was retrieved by the client. To force an unconditional merge, set If-Match to the wildcard character (*).</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetIfMatch(this AzureStorageEntityMergeSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.IfMatch"/>.</em></p><p>The client may specify the ETag for the entity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The merge operation will be performed only if the ETag sent by the client matches the value maintained by the server, indicating that the entity has not been modified since it was retrieved by the client. To force an unconditional merge, set If-Match to the wildcard character (*).</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetIfMatch(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetAccountKey(this AzureStorageEntityMergeSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetAccountKey(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetAccountName(this AzureStorageEntityMergeSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetAccountName(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetConnectionString(this AzureStorageEntityMergeSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetConnectionString(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetSasToken(this AzureStorageEntityMergeSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetSasToken(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetDebug(this AzureStorageEntityMergeSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetDebug(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetHelp(this AzureStorageEntityMergeSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetHelp(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetOutput(this AzureStorageEntityMergeSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetOutput(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetQuery(this AzureStorageEntityMergeSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetQuery(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageEntityMergeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings SetVerbose(this AzureStorageEntityMergeSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityMergeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityMergeSettings ResetVerbose(this AzureStorageEntityMergeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageEntityQuerySettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageEntityQuerySettingsExtensions
    {
        #region TableName
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.TableName"/>.</em></p><p>The name of the table to query.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetTableName(this AzureStorageEntityQuerySettings toolSettings, string tableName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = tableName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.TableName"/>.</em></p><p>The name of the table to query.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetTableName(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = null;
            return toolSettings;
        }
        #endregion
        #region Accept
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.Accept"/>.</em></p><p>Specifies how much metadata to include in the response payload.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetAccept(this AzureStorageEntityQuerySettings toolSettings, StorageEntityQueryAccept accept)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Accept = accept;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.Accept"/>.</em></p><p>Specifies how much metadata to include in the response payload.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetAccept(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Accept = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.Filter"/>.</em></p><p>Returns only entities that satisfy the specified filter. Note that no more than 15 discrete comparisons are permitted within a $filter string. See <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx">http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx</a> for more information on constructing filters.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetFilter(this AzureStorageEntityQuerySettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.Filter"/>.</em></p><p>Returns only entities that satisfy the specified filter. Note that no more than 15 discrete comparisons are permitted within a $filter string. See <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx">http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx</a> for more information on constructing filters.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetFilter(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Marker
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.Marker"/> to a new dictionary.</em></p><p>Space-separated list of key=value pairs. Must contain a nextpartitionkey and a nextrowkey.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetMarker(this AzureStorageEntityQuerySettings toolSettings, IDictionary<string, object> marker)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MarkerInternal = marker.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageEntityQuerySettings.Marker"/>.</em></p><p>Space-separated list of key=value pairs. Must contain a nextpartitionkey and a nextrowkey.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ClearMarker(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MarkerInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageEntityQuerySettings.Marker"/>.</em></p><p>Space-separated list of key=value pairs. Must contain a nextpartitionkey and a nextrowkey.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings AddMarker(this AzureStorageEntityQuerySettings toolSettings, string markerKey, object markerValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MarkerInternal.Add(markerKey, markerValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageEntityQuerySettings.Marker"/>.</em></p><p>Space-separated list of key=value pairs. Must contain a nextpartitionkey and a nextrowkey.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings RemoveMarker(this AzureStorageEntityQuerySettings toolSettings, string markerKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MarkerInternal.Remove(markerKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageEntityQuerySettings.Marker"/>.</em></p><p>Space-separated list of key=value pairs. Must contain a nextpartitionkey and a nextrowkey.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetMarker(this AzureStorageEntityQuerySettings toolSettings, string markerKey, object markerValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MarkerInternal[markerKey] = markerValue;
            return toolSettings;
        }
        #endregion
        #region NumResults
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.NumResults"/>.</em></p><p>The maximum number of entities to return.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetNumResults(this AzureStorageEntityQuerySettings toolSettings, int? numResults)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumResults = numResults;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.NumResults"/>.</em></p><p>The maximum number of entities to return.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetNumResults(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumResults = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.Select"/> to a new list.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetSelect(this AzureStorageEntityQuerySettings toolSettings, params string[] select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelectInternal = select.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.Select"/> to a new list.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetSelect(this AzureStorageEntityQuerySettings toolSettings, IEnumerable<string> select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelectInternal = select.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="AzureStorageEntityQuerySettings.Select"/>.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings AddSelect(this AzureStorageEntityQuerySettings toolSettings, params string[] select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelectInternal.AddRange(select);
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="AzureStorageEntityQuerySettings.Select"/>.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings AddSelect(this AzureStorageEntityQuerySettings toolSettings, IEnumerable<string> select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelectInternal.AddRange(select);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageEntityQuerySettings.Select"/>.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ClearSelect(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelectInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="AzureStorageEntityQuerySettings.Select"/>.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings RemoveSelect(this AzureStorageEntityQuerySettings toolSettings, params string[] select)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(select);
            toolSettings.SelectInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="AzureStorageEntityQuerySettings.Select"/>.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings RemoveSelect(this AzureStorageEntityQuerySettings toolSettings, IEnumerable<string> select)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(select);
            toolSettings.SelectInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetTimeout(this AzureStorageEntityQuerySettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetTimeout(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetAccountKey(this AzureStorageEntityQuerySettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetAccountKey(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetAccountName(this AzureStorageEntityQuerySettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetAccountName(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetConnectionString(this AzureStorageEntityQuerySettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetConnectionString(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetSasToken(this AzureStorageEntityQuerySettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetSasToken(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetDebug(this AzureStorageEntityQuerySettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetDebug(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetHelp(this AzureStorageEntityQuerySettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetHelp(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetOutput(this AzureStorageEntityQuerySettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetOutput(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetQuery(this AzureStorageEntityQuerySettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetQuery(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageEntityQuerySettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings SetVerbose(this AzureStorageEntityQuerySettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityQuerySettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityQuerySettings ResetVerbose(this AzureStorageEntityQuerySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageEntityReplaceSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageEntityReplaceSettingsExtensions
    {
        #region Entity
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.Entity"/>.</em></p><p>The entity to update. Could be a dict or an entity object. Must contain a PartitionKey and a RowKey.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetEntity(this AzureStorageEntityReplaceSettings toolSettings, string entity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entity = entity;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.Entity"/>.</em></p><p>The entity to update. Could be a dict or an entity object. Must contain a PartitionKey and a RowKey.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetEntity(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entity = null;
            return toolSettings;
        }
        #endregion
        #region TableName
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.TableName"/>.</em></p><p>The name of the table containing the entity to update.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetTableName(this AzureStorageEntityReplaceSettings toolSettings, string tableName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = tableName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.TableName"/>.</em></p><p>The name of the table containing the entity to update.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetTableName(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetTimeout(this AzureStorageEntityReplaceSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetTimeout(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.IfMatch"/>.</em></p><p>The client may specify the ETag for the entity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The update operation will be performed only if the ETag sent by the client matches the value maintained by the server, indicating that the entity has not been modified since it was retrieved by the client. To force an unconditional update, set If-Match to the wildcard character (*).</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetIfMatch(this AzureStorageEntityReplaceSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.IfMatch"/>.</em></p><p>The client may specify the ETag for the entity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The update operation will be performed only if the ETag sent by the client matches the value maintained by the server, indicating that the entity has not been modified since it was retrieved by the client. To force an unconditional update, set If-Match to the wildcard character (*).</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetIfMatch(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetAccountKey(this AzureStorageEntityReplaceSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetAccountKey(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetAccountName(this AzureStorageEntityReplaceSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetAccountName(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetConnectionString(this AzureStorageEntityReplaceSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetConnectionString(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetSasToken(this AzureStorageEntityReplaceSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetSasToken(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetDebug(this AzureStorageEntityReplaceSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetDebug(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetHelp(this AzureStorageEntityReplaceSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetHelp(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetOutput(this AzureStorageEntityReplaceSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetOutput(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetQuery(this AzureStorageEntityReplaceSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetQuery(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageEntityReplaceSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings SetVerbose(this AzureStorageEntityReplaceSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityReplaceSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityReplaceSettings ResetVerbose(this AzureStorageEntityReplaceSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageEntityShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageEntityShowSettingsExtensions
    {
        #region PartitionKey
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.PartitionKey"/>.</em></p><p>The PartitionKey of the entity.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetPartitionKey(this AzureStorageEntityShowSettings toolSettings, string partitionKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionKey = partitionKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.PartitionKey"/>.</em></p><p>The PartitionKey of the entity.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetPartitionKey(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionKey = null;
            return toolSettings;
        }
        #endregion
        #region RowKey
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.RowKey"/>.</em></p><p>The RowKey of the entity.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetRowKey(this AzureStorageEntityShowSettings toolSettings, string rowKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RowKey = rowKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.RowKey"/>.</em></p><p>The RowKey of the entity.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetRowKey(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RowKey = null;
            return toolSettings;
        }
        #endregion
        #region TableName
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.TableName"/>.</em></p><p>The name of the table to get the entity from.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetTableName(this AzureStorageEntityShowSettings toolSettings, string tableName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = tableName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.TableName"/>.</em></p><p>The name of the table to get the entity from.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetTableName(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = null;
            return toolSettings;
        }
        #endregion
        #region Accept
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.Accept"/>.</em></p><p>Specifies the accepted content type of the response payload. See TablePayloadFormat for possible values.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetAccept(this AzureStorageEntityShowSettings toolSettings, string accept)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Accept = accept;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.Accept"/>.</em></p><p>Specifies the accepted content type of the response payload. See TablePayloadFormat for possible values.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetAccept(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Accept = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.Select"/> to a new list.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetSelect(this AzureStorageEntityShowSettings toolSettings, params string[] select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelectInternal = select.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.Select"/> to a new list.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetSelect(this AzureStorageEntityShowSettings toolSettings, IEnumerable<string> select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelectInternal = select.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="AzureStorageEntityShowSettings.Select"/>.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings AddSelect(this AzureStorageEntityShowSettings toolSettings, params string[] select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelectInternal.AddRange(select);
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="AzureStorageEntityShowSettings.Select"/>.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings AddSelect(this AzureStorageEntityShowSettings toolSettings, IEnumerable<string> select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelectInternal.AddRange(select);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageEntityShowSettings.Select"/>.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ClearSelect(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelectInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="AzureStorageEntityShowSettings.Select"/>.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings RemoveSelect(this AzureStorageEntityShowSettings toolSettings, params string[] select)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(select);
            toolSettings.SelectInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="AzureStorageEntityShowSettings.Select"/>.</em></p><p>Space-separated list of properties to return for each entity.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings RemoveSelect(this AzureStorageEntityShowSettings toolSettings, IEnumerable<string> select)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(select);
            toolSettings.SelectInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetTimeout(this AzureStorageEntityShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetTimeout(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetAccountKey(this AzureStorageEntityShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetAccountKey(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetAccountName(this AzureStorageEntityShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetAccountName(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetConnectionString(this AzureStorageEntityShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetConnectionString(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetSasToken(this AzureStorageEntityShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetSasToken(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetDebug(this AzureStorageEntityShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetDebug(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetHelp(this AzureStorageEntityShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetHelp(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetOutput(this AzureStorageEntityShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetOutput(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetQuery(this AzureStorageEntityShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetQuery(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageEntityShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings SetVerbose(this AzureStorageEntityShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageEntityShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageEntityShowSettings ResetVerbose(this AzureStorageEntityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageLoggingShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageLoggingShowSettingsExtensions
    {
        #region Services
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingShowSettings.Services"/>.</em></p><p>The storage services from which to retrieve logging info: (b)lob (q)ueue (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings SetServices(this AzureStorageLoggingShowSettings toolSettings, string services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = services;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingShowSettings.Services"/>.</em></p><p>The storage services from which to retrieve logging info: (b)lob (q)ueue (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings ResetServices(this AzureStorageLoggingShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings SetTimeout(this AzureStorageLoggingShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings ResetTimeout(this AzureStorageLoggingShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings SetAccountKey(this AzureStorageLoggingShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings ResetAccountKey(this AzureStorageLoggingShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings SetAccountName(this AzureStorageLoggingShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings ResetAccountName(this AzureStorageLoggingShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings SetConnectionString(this AzureStorageLoggingShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings ResetConnectionString(this AzureStorageLoggingShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings SetSasToken(this AzureStorageLoggingShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings ResetSasToken(this AzureStorageLoggingShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings SetDebug(this AzureStorageLoggingShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings ResetDebug(this AzureStorageLoggingShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings SetHelp(this AzureStorageLoggingShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings ResetHelp(this AzureStorageLoggingShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings SetOutput(this AzureStorageLoggingShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings ResetOutput(this AzureStorageLoggingShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings SetQuery(this AzureStorageLoggingShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings ResetQuery(this AzureStorageLoggingShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings SetVerbose(this AzureStorageLoggingShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageLoggingShowSettings ResetVerbose(this AzureStorageLoggingShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageLoggingUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageLoggingUpdateSettingsExtensions
    {
        #region Log
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.Log"/>.</em></p><p>The operations for which to enable logging: (r)ead (w)rite (d)elete. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetLog(this AzureStorageLoggingUpdateSettings toolSettings, string log)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Log = log;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.Log"/>.</em></p><p>The operations for which to enable logging: (r)ead (w)rite (d)elete. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetLog(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Log = null;
            return toolSettings;
        }
        #endregion
        #region Retention
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.Retention"/>.</em></p><p>Number of days for which to retain logs. 0 to disable.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetRetention(this AzureStorageLoggingUpdateSettings toolSettings, int? retention)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Retention = retention;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.Retention"/>.</em></p><p>Number of days for which to retain logs. 0 to disable.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetRetention(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Retention = null;
            return toolSettings;
        }
        #endregion
        #region Services
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.Services"/>.</em></p><p>The storage service(s) for which to update logging info: (b)lob (q)ueue (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetServices(this AzureStorageLoggingUpdateSettings toolSettings, string services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = services;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.Services"/>.</em></p><p>The storage service(s) for which to update logging info: (b)lob (q)ueue (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetServices(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetTimeout(this AzureStorageLoggingUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetTimeout(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetAccountKey(this AzureStorageLoggingUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetAccountKey(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetAccountName(this AzureStorageLoggingUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetAccountName(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetConnectionString(this AzureStorageLoggingUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetConnectionString(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetSasToken(this AzureStorageLoggingUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetSasToken(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetDebug(this AzureStorageLoggingUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetDebug(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetHelp(this AzureStorageLoggingUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetHelp(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetOutput(this AzureStorageLoggingUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetOutput(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetQuery(this AzureStorageLoggingUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetQuery(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageLoggingUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings SetVerbose(this AzureStorageLoggingUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageLoggingUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageLoggingUpdateSettings ResetVerbose(this AzureStorageLoggingUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageTableCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageTableCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageTableCreateSettings.Name"/>.</em></p><p>The name of the table to create. The table name may contain only alphanumeric characters and cannot begin with a numeric character. It is case-insensitive and must be from 3 to 63 characters long.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings SetName(this AzureStorageTableCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableCreateSettings.Name"/>.</em></p><p>The name of the table to create. The table name may contain only alphanumeric characters and cannot begin with a numeric character. It is case-insensitive and must be from 3 to 63 characters long.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings ResetName(this AzureStorageTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region FailOnExist
        /// <summary><p><em>Sets <see cref="AzureStorageTableCreateSettings.FailOnExist"/>.</em></p><p>Throw an exception if the table already exists.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings SetFailOnExist(this AzureStorageTableCreateSettings toolSettings, string failOnExist)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = failOnExist;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableCreateSettings.FailOnExist"/>.</em></p><p>Throw an exception if the table already exists.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings ResetFailOnExist(this AzureStorageTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageTableCreateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings SetTimeout(this AzureStorageTableCreateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableCreateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings ResetTimeout(this AzureStorageTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageTableCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings SetAccountKey(this AzureStorageTableCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings ResetAccountKey(this AzureStorageTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageTableCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings SetAccountName(this AzureStorageTableCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings ResetAccountName(this AzureStorageTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageTableCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings SetConnectionString(this AzureStorageTableCreateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings ResetConnectionString(this AzureStorageTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageTableCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings SetSasToken(this AzureStorageTableCreateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings ResetSasToken(this AzureStorageTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageTableCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings SetDebug(this AzureStorageTableCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings ResetDebug(this AzureStorageTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageTableCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings SetHelp(this AzureStorageTableCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings ResetHelp(this AzureStorageTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageTableCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings SetOutput(this AzureStorageTableCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings ResetOutput(this AzureStorageTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageTableCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings SetQuery(this AzureStorageTableCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings ResetQuery(this AzureStorageTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageTableCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings SetVerbose(this AzureStorageTableCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableCreateSettings ResetVerbose(this AzureStorageTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageTableDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageTableDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageTableDeleteSettings.Name"/>.</em></p><p>The name of the table to delete.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings SetName(this AzureStorageTableDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableDeleteSettings.Name"/>.</em></p><p>The name of the table to delete.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ResetName(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region FailNotExist
        /// <summary><p><em>Sets <see cref="AzureStorageTableDeleteSettings.FailNotExist"/>.</em></p><p>Specifies whether to throw an exception if the table doesn't exist.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings SetFailNotExist(this AzureStorageTableDeleteSettings toolSettings, bool? failNotExist)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = failNotExist;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableDeleteSettings.FailNotExist"/>.</em></p><p>Specifies whether to throw an exception if the table doesn't exist.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ResetFailNotExist(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageTableDeleteSettings.FailNotExist"/>.</em></p><p>Specifies whether to throw an exception if the table doesn't exist.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings EnableFailNotExist(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageTableDeleteSettings.FailNotExist"/>.</em></p><p>Specifies whether to throw an exception if the table doesn't exist.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings DisableFailNotExist(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageTableDeleteSettings.FailNotExist"/>.</em></p><p>Specifies whether to throw an exception if the table doesn't exist.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ToggleFailNotExist(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = !toolSettings.FailNotExist;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageTableDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings SetTimeout(this AzureStorageTableDeleteSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ResetTimeout(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageTableDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings SetAccountKey(this AzureStorageTableDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ResetAccountKey(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageTableDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings SetAccountName(this AzureStorageTableDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ResetAccountName(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageTableDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings SetConnectionString(this AzureStorageTableDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ResetConnectionString(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageTableDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings SetSasToken(this AzureStorageTableDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ResetSasToken(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageTableDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings SetDebug(this AzureStorageTableDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ResetDebug(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageTableDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings SetHelp(this AzureStorageTableDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ResetHelp(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageTableDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings SetOutput(this AzureStorageTableDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ResetOutput(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageTableDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings SetQuery(this AzureStorageTableDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ResetQuery(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageTableDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings SetVerbose(this AzureStorageTableDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableDeleteSettings ResetVerbose(this AzureStorageTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageTableExistsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageTableExistsSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageTableExistsSettings.Name"/>.</em></p><p>The name of table to check for existence.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings SetName(this AzureStorageTableExistsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableExistsSettings.Name"/>.</em></p><p>The name of table to check for existence.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings ResetName(this AzureStorageTableExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageTableExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings SetTimeout(this AzureStorageTableExistsSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings ResetTimeout(this AzureStorageTableExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageTableExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings SetAccountKey(this AzureStorageTableExistsSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings ResetAccountKey(this AzureStorageTableExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageTableExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings SetAccountName(this AzureStorageTableExistsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings ResetAccountName(this AzureStorageTableExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageTableExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings SetConnectionString(this AzureStorageTableExistsSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings ResetConnectionString(this AzureStorageTableExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageTableExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings SetSasToken(this AzureStorageTableExistsSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings ResetSasToken(this AzureStorageTableExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageTableExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings SetDebug(this AzureStorageTableExistsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings ResetDebug(this AzureStorageTableExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageTableExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings SetHelp(this AzureStorageTableExistsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings ResetHelp(this AzureStorageTableExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageTableExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings SetOutput(this AzureStorageTableExistsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings ResetOutput(this AzureStorageTableExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageTableExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings SetQuery(this AzureStorageTableExistsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings ResetQuery(this AzureStorageTableExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageTableExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings SetVerbose(this AzureStorageTableExistsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableExistsSettings ResetVerbose(this AzureStorageTableExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageTableGenerateSasSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageTableGenerateSasSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.Name"/>.</em></p><p>The name of the table to create a SAS token for.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetName(this AzureStorageTableGenerateSasSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.Name"/>.</em></p><p>The name of the table to create a SAS token for.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetName(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region EndPk
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.EndPk"/>.</em></p><p>The maximum partition key accessible with this shared access signature. endpk must accompany endrk. Key values are inclusive. If omitted, there is no upper bound on the table entities that can be accessed.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetEndPk(this AzureStorageTableGenerateSasSettings toolSettings, string endPk)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndPk = endPk;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.EndPk"/>.</em></p><p>The maximum partition key accessible with this shared access signature. endpk must accompany endrk. Key values are inclusive. If omitted, there is no upper bound on the table entities that can be accessed.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetEndPk(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndPk = null;
            return toolSettings;
        }
        #endregion
        #region EndRk
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.EndRk"/>.</em></p><p>The maximum row key accessible with this shared access signature. endpk must accompany endrk. Key values are inclusive. If omitted, there is no upper bound on the table entities that can be accessed.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetEndRk(this AzureStorageTableGenerateSasSettings toolSettings, string endRk)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndRk = endRk;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.EndRk"/>.</em></p><p>The maximum row key accessible with this shared access signature. endpk must accompany endrk. Key values are inclusive. If omitted, there is no upper bound on the table entities that can be accessed.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetEndRk(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndRk = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetExpiry(this AzureStorageTableGenerateSasSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetExpiry(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region HttpsOnly
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetHttpsOnly(this AzureStorageTableGenerateSasSettings toolSettings, string httpsOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = httpsOnly;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetHttpsOnly(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = null;
            return toolSettings;
        }
        #endregion
        #region Ip
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetIp(this AzureStorageTableGenerateSasSettings toolSettings, string ip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = ip;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetIp(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (r)ead/query (a)dd (u)pdate (d)elete. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetPermissions(this AzureStorageTableGenerateSasSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (r)ead/query (a)dd (u)pdate (d)elete. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetPermissions(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region PolicyName
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.PolicyName"/>.</em></p><p>The name of a stored access policy within the table's ACL.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetPolicyName(this AzureStorageTableGenerateSasSettings toolSettings, string policyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyName = policyName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.PolicyName"/>.</em></p><p>The name of a stored access policy within the table's ACL.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetPolicyName(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyName = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetStart(this AzureStorageTableGenerateSasSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetStart(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region StartPk
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.StartPk"/>.</em></p><p>The minimum partition key accessible with this shared access signature. startpk must accompany startrk. Key values are inclusive. If omitted, there is no lower bound on the table entities that can be accessed.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetStartPk(this AzureStorageTableGenerateSasSettings toolSettings, string startPk)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartPk = startPk;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.StartPk"/>.</em></p><p>The minimum partition key accessible with this shared access signature. startpk must accompany startrk. Key values are inclusive. If omitted, there is no lower bound on the table entities that can be accessed.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetStartPk(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartPk = null;
            return toolSettings;
        }
        #endregion
        #region StartRk
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.StartRk"/>.</em></p><p>The minimum row key accessible with this shared access signature. startpk must accompany startrk. Key values are inclusive. If omitted, there is no lower bound on the table entities that can be accessed.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetStartRk(this AzureStorageTableGenerateSasSettings toolSettings, string startRk)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartRk = startRk;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.StartRk"/>.</em></p><p>The minimum row key accessible with this shared access signature. startpk must accompany startrk. Key values are inclusive. If omitted, there is no lower bound on the table entities that can be accessed.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetStartRk(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartRk = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetAccountKey(this AzureStorageTableGenerateSasSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetAccountKey(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetAccountName(this AzureStorageTableGenerateSasSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetAccountName(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetConnectionString(this AzureStorageTableGenerateSasSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetConnectionString(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetSasToken(this AzureStorageTableGenerateSasSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetSasToken(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetDebug(this AzureStorageTableGenerateSasSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetDebug(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetHelp(this AzureStorageTableGenerateSasSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetHelp(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetOutput(this AzureStorageTableGenerateSasSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetOutput(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetQuery(this AzureStorageTableGenerateSasSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetQuery(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageTableGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings SetVerbose(this AzureStorageTableGenerateSasSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableGenerateSasSettings ResetVerbose(this AzureStorageTableGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageTableListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageTableListSettingsExtensions
    {
        #region Marker
        /// <summary><p><em>Sets <see cref="AzureStorageTableListSettings.Marker"/>.</em></p><p>An opaque continuation object. This value can be retrieved from the next_marker field of a previous generator object if num_results was specified and that generator has finished enumerating results. If specified, this generator will begin returning results from the point where the previous generator stopped.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings SetMarker(this AzureStorageTableListSettings toolSettings, string marker)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Marker = marker;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableListSettings.Marker"/>.</em></p><p>An opaque continuation object. This value can be retrieved from the next_marker field of a previous generator object if num_results was specified and that generator has finished enumerating results. If specified, this generator will begin returning results from the point where the previous generator stopped.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings ResetMarker(this AzureStorageTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Marker = null;
            return toolSettings;
        }
        #endregion
        #region NumResults
        /// <summary><p><em>Sets <see cref="AzureStorageTableListSettings.NumResults"/>.</em></p><p>The maximum number of tables to return.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings SetNumResults(this AzureStorageTableListSettings toolSettings, int? numResults)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumResults = numResults;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableListSettings.NumResults"/>.</em></p><p>The maximum number of tables to return.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings ResetNumResults(this AzureStorageTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumResults = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageTableListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings SetTimeout(this AzureStorageTableListSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings ResetTimeout(this AzureStorageTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageTableListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings SetAccountKey(this AzureStorageTableListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings ResetAccountKey(this AzureStorageTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageTableListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings SetAccountName(this AzureStorageTableListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings ResetAccountName(this AzureStorageTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageTableListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings SetConnectionString(this AzureStorageTableListSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings ResetConnectionString(this AzureStorageTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageTableListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings SetSasToken(this AzureStorageTableListSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings ResetSasToken(this AzureStorageTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageTableListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings SetDebug(this AzureStorageTableListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings ResetDebug(this AzureStorageTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageTableListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings SetHelp(this AzureStorageTableListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings ResetHelp(this AzureStorageTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageTableListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings SetOutput(this AzureStorageTableListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings ResetOutput(this AzureStorageTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageTableListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings SetQuery(this AzureStorageTableListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings ResetQuery(this AzureStorageTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageTableListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings SetVerbose(this AzureStorageTableListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableListSettings ResetVerbose(this AzureStorageTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageTableStatsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageTableStatsSettingsExtensions
    {
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageTableStatsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings SetTimeout(this AzureStorageTableStatsSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableStatsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings ResetTimeout(this AzureStorageTableStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageTableStatsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings SetAccountKey(this AzureStorageTableStatsSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableStatsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings ResetAccountKey(this AzureStorageTableStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageTableStatsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings SetAccountName(this AzureStorageTableStatsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableStatsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings ResetAccountName(this AzureStorageTableStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageTableStatsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings SetConnectionString(this AzureStorageTableStatsSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableStatsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings ResetConnectionString(this AzureStorageTableStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageTableStatsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings SetSasToken(this AzureStorageTableStatsSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableStatsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings ResetSasToken(this AzureStorageTableStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageTableStatsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings SetDebug(this AzureStorageTableStatsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableStatsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings ResetDebug(this AzureStorageTableStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageTableStatsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings SetHelp(this AzureStorageTableStatsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableStatsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings ResetHelp(this AzureStorageTableStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageTableStatsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings SetOutput(this AzureStorageTableStatsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableStatsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings ResetOutput(this AzureStorageTableStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageTableStatsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings SetQuery(this AzureStorageTableStatsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableStatsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings ResetQuery(this AzureStorageTableStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageTableStatsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings SetVerbose(this AzureStorageTableStatsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTableStatsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTableStatsSettings ResetVerbose(this AzureStorageTableStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetName(this AzureStorageContainerCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetName(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetAuthMode(this AzureStorageContainerCreateSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetAuthMode(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region FailOnExist
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.FailOnExist"/>.</em></p><p>Throw an exception if the container already exists.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetFailOnExist(this AzureStorageContainerCreateSettings toolSettings, string failOnExist)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = failOnExist;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.FailOnExist"/>.</em></p><p>Throw an exception if the container already exists.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetFailOnExist(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailOnExist = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetMetadata(this AzureStorageContainerCreateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageContainerCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ClearMetadata(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageContainerCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings AddMetadatum(this AzureStorageContainerCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageContainerCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings RemoveMetadatum(this AzureStorageContainerCreateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageContainerCreateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetMetadatum(this AzureStorageContainerCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region PublicAccess
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.PublicAccess"/>.</em></p><p>Specifies whether data in the container may be accessed publically. By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetPublicAccess(this AzureStorageContainerCreateSettings toolSettings, bool? publicAccess)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublicAccess = publicAccess;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.PublicAccess"/>.</em></p><p>Specifies whether data in the container may be accessed publically. By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetPublicAccess(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublicAccess = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageContainerCreateSettings.PublicAccess"/>.</em></p><p>Specifies whether data in the container may be accessed publically. By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings EnablePublicAccess(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublicAccess = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageContainerCreateSettings.PublicAccess"/>.</em></p><p>Specifies whether data in the container may be accessed publically. By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings DisablePublicAccess(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublicAccess = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageContainerCreateSettings.PublicAccess"/>.</em></p><p>Specifies whether data in the container may be accessed publically. By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings TogglePublicAccess(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublicAccess = !toolSettings.PublicAccess;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetTimeout(this AzureStorageContainerCreateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetTimeout(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetAccountKey(this AzureStorageContainerCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetAccountKey(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetAccountName(this AzureStorageContainerCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetAccountName(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetConnectionString(this AzureStorageContainerCreateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetConnectionString(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetSasToken(this AzureStorageContainerCreateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetSasToken(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetDebug(this AzureStorageContainerCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetDebug(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetHelp(this AzureStorageContainerCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetHelp(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetOutput(this AzureStorageContainerCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetOutput(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetQuery(this AzureStorageContainerCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetQuery(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings SetVerbose(this AzureStorageContainerCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerCreateSettings ResetVerbose(this AzureStorageContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetName(this AzureStorageContainerDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetName(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetAuthMode(this AzureStorageContainerDeleteSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetAuthMode(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region BypassImmutabilityPolicy
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.BypassImmutabilityPolicy"/>.</em></p><p>Bypasses upcoming service behavior that will block a container from being deleted if it has a immutability-policy. Specifying this will ignore arguments aside from those used to identify the container ("--name", "--account-name").</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetBypassImmutabilityPolicy(this AzureStorageContainerDeleteSettings toolSettings, string bypassImmutabilityPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassImmutabilityPolicy = bypassImmutabilityPolicy;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.BypassImmutabilityPolicy"/>.</em></p><p>Bypasses upcoming service behavior that will block a container from being deleted if it has a immutability-policy. Specifying this will ignore arguments aside from those used to identify the container ("--name", "--account-name").</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetBypassImmutabilityPolicy(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BypassImmutabilityPolicy = null;
            return toolSettings;
        }
        #endregion
        #region FailNotExist
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.FailNotExist"/>.</em></p><p>Throw an exception if the container does not exist.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetFailNotExist(this AzureStorageContainerDeleteSettings toolSettings, string failNotExist)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = failNotExist;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.FailNotExist"/>.</em></p><p>Throw an exception if the container does not exist.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetFailNotExist(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailNotExist = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.LeaseId"/>.</em></p><p>If specified, delete_container only succeeds if the container's lease is active and matches this ID. Required if the container has an active lease.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetLeaseId(this AzureStorageContainerDeleteSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.LeaseId"/>.</em></p><p>If specified, delete_container only succeeds if the container's lease is active and matches this ID. Required if the container has an active lease.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetLeaseId(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetTimeout(this AzureStorageContainerDeleteSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetTimeout(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetIfModifiedSince(this AzureStorageContainerDeleteSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetIfModifiedSince(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetIfUnmodifiedSince(this AzureStorageContainerDeleteSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetIfUnmodifiedSince(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetAccountKey(this AzureStorageContainerDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetAccountKey(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetAccountName(this AzureStorageContainerDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetAccountName(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetConnectionString(this AzureStorageContainerDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetConnectionString(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetSasToken(this AzureStorageContainerDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetSasToken(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetDebug(this AzureStorageContainerDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetDebug(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetHelp(this AzureStorageContainerDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetHelp(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetOutput(this AzureStorageContainerDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetOutput(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetQuery(this AzureStorageContainerDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetQuery(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings SetVerbose(this AzureStorageContainerDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerDeleteSettings ResetVerbose(this AzureStorageContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerExistsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerExistsSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerExistsSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings SetName(this AzureStorageContainerExistsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerExistsSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings ResetName(this AzureStorageContainerExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerExistsSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings SetAuthMode(this AzureStorageContainerExistsSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerExistsSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings ResetAuthMode(this AzureStorageContainerExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings SetTimeout(this AzureStorageContainerExistsSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerExistsSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings ResetTimeout(this AzureStorageContainerExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings SetAccountKey(this AzureStorageContainerExistsSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerExistsSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings ResetAccountKey(this AzureStorageContainerExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings SetAccountName(this AzureStorageContainerExistsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerExistsSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings ResetAccountName(this AzureStorageContainerExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings SetConnectionString(this AzureStorageContainerExistsSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerExistsSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings ResetConnectionString(this AzureStorageContainerExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings SetSasToken(this AzureStorageContainerExistsSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerExistsSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings ResetSasToken(this AzureStorageContainerExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings SetDebug(this AzureStorageContainerExistsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerExistsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings ResetDebug(this AzureStorageContainerExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings SetHelp(this AzureStorageContainerExistsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerExistsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings ResetHelp(this AzureStorageContainerExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings SetOutput(this AzureStorageContainerExistsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerExistsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings ResetOutput(this AzureStorageContainerExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings SetQuery(this AzureStorageContainerExistsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerExistsSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings ResetQuery(this AzureStorageContainerExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings SetVerbose(this AzureStorageContainerExistsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerExistsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerExistsSettings ResetVerbose(this AzureStorageContainerExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerGenerateSasSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerGenerateSasSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetName(this AzureStorageContainerGenerateSasSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetName(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetAuthMode(this AzureStorageContainerGenerateSasSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetAuthMode(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region CacheControl
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.CacheControl"/>.</em></p><p>Response header value for Cache-Control when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetCacheControl(this AzureStorageContainerGenerateSasSettings toolSettings, string cacheControl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheControl = cacheControl;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.CacheControl"/>.</em></p><p>Response header value for Cache-Control when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetCacheControl(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheControl = null;
            return toolSettings;
        }
        #endregion
        #region ContentDisposition
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.ContentDisposition"/>.</em></p><p>Response header value for Content-Disposition when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetContentDisposition(this AzureStorageContainerGenerateSasSettings toolSettings, string contentDisposition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = contentDisposition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.ContentDisposition"/>.</em></p><p>Response header value for Content-Disposition when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetContentDisposition(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentDisposition = null;
            return toolSettings;
        }
        #endregion
        #region ContentEncoding
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.ContentEncoding"/>.</em></p><p>Response header value for Content-Encoding when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetContentEncoding(this AzureStorageContainerGenerateSasSettings toolSettings, string contentEncoding)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = contentEncoding;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.ContentEncoding"/>.</em></p><p>Response header value for Content-Encoding when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetContentEncoding(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentEncoding = null;
            return toolSettings;
        }
        #endregion
        #region ContentLanguage
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.ContentLanguage"/>.</em></p><p>Response header value for Content-Language when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetContentLanguage(this AzureStorageContainerGenerateSasSettings toolSettings, string contentLanguage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = contentLanguage;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.ContentLanguage"/>.</em></p><p>Response header value for Content-Language when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetContentLanguage(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentLanguage = null;
            return toolSettings;
        }
        #endregion
        #region ContentType
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.ContentType"/>.</em></p><p>Response header value for Content-Type when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetContentType(this AzureStorageContainerGenerateSasSettings toolSettings, string contentType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = contentType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.ContentType"/>.</em></p><p>Response header value for Content-Type when resource is accessed using this shared access signature.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetContentType(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentType = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetExpiry(this AzureStorageContainerGenerateSasSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.Expiry"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetExpiry(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region HttpsOnly
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetHttpsOnly(this AzureStorageContainerGenerateSasSettings toolSettings, string httpsOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = httpsOnly;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.HttpsOnly"/>.</em></p><p>Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetHttpsOnly(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpsOnly = null;
            return toolSettings;
        }
        #endregion
        #region Ip
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetIp(this AzureStorageContainerGenerateSasSettings toolSettings, string ip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = ip;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.Ip"/>.</em></p><p>Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetIp(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (d)elete (l)ist (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetPermissions(this AzureStorageContainerGenerateSasSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.Permissions"/>.</em></p><p>The permissions the SAS grants. Allowed values: (d)elete (l)ist (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetPermissions(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region PolicyName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.PolicyName"/>.</em></p><p>The name of a stored access policy within the container's ACL.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetPolicyName(this AzureStorageContainerGenerateSasSettings toolSettings, string policyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyName = policyName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.PolicyName"/>.</em></p><p>The name of a stored access policy within the container's ACL.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetPolicyName(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyName = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetStart(this AzureStorageContainerGenerateSasSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.Start"/>.</em></p><p>Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetStart(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetAccountKey(this AzureStorageContainerGenerateSasSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetAccountKey(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetAccountName(this AzureStorageContainerGenerateSasSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetAccountName(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetConnectionString(this AzureStorageContainerGenerateSasSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetConnectionString(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetSasToken(this AzureStorageContainerGenerateSasSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetSasToken(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetDebug(this AzureStorageContainerGenerateSasSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetDebug(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetHelp(this AzureStorageContainerGenerateSasSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetHelp(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetOutput(this AzureStorageContainerGenerateSasSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetOutput(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetQuery(this AzureStorageContainerGenerateSasSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetQuery(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings SetVerbose(this AzureStorageContainerGenerateSasSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerGenerateSasSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerGenerateSasSettings ResetVerbose(this AzureStorageContainerGenerateSasSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerListSettingsExtensions
    {
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetAuthMode(this AzureStorageContainerListSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetAuthMode(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region IncludeMetadata
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.IncludeMetadata"/>.</em></p><p>Specifies that container metadata be returned in the response.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetIncludeMetadata(this AzureStorageContainerListSettings toolSettings, string includeMetadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludeMetadata = includeMetadata;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.IncludeMetadata"/>.</em></p><p>Specifies that container metadata be returned in the response.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetIncludeMetadata(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludeMetadata = null;
            return toolSettings;
        }
        #endregion
        #region NumResults
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.NumResults"/>.</em></p><p>Specifies the maximum number of containers to return.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetNumResults(this AzureStorageContainerListSettings toolSettings, int? numResults)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumResults = numResults;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.NumResults"/>.</em></p><p>Specifies the maximum number of containers to return.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetNumResults(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NumResults = null;
            return toolSettings;
        }
        #endregion
        #region Prefix
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.Prefix"/>.</em></p><p>Filters the results to return only containers whose names begin with the specified prefix.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetPrefix(this AzureStorageContainerListSettings toolSettings, string prefix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prefix = prefix;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.Prefix"/>.</em></p><p>Filters the results to return only containers whose names begin with the specified prefix.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetPrefix(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prefix = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetTimeout(this AzureStorageContainerListSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetTimeout(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetAccountKey(this AzureStorageContainerListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetAccountKey(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetAccountName(this AzureStorageContainerListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetAccountName(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetConnectionString(this AzureStorageContainerListSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetConnectionString(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetSasToken(this AzureStorageContainerListSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetSasToken(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetDebug(this AzureStorageContainerListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetDebug(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetHelp(this AzureStorageContainerListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetHelp(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetOutput(this AzureStorageContainerListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetOutput(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetQuery(this AzureStorageContainerListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetQuery(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings SetVerbose(this AzureStorageContainerListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerListSettings ResetVerbose(this AzureStorageContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerSetPermissionSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerSetPermissionSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetName(this AzureStorageContainerSetPermissionSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetName(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetAuthMode(this AzureStorageContainerSetPermissionSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetAuthMode(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.LeaseId"/>.</em></p><p>If specified, set_container_acl only succeeds if the container's lease is active and matches this ID.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetLeaseId(this AzureStorageContainerSetPermissionSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.LeaseId"/>.</em></p><p>If specified, set_container_acl only succeeds if the container's lease is active and matches this ID.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetLeaseId(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region PublicAccess
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.PublicAccess"/>.</em></p><p>Specifies whether data in the container may be accessed publically. By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetPublicAccess(this AzureStorageContainerSetPermissionSettings toolSettings, bool? publicAccess)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublicAccess = publicAccess;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.PublicAccess"/>.</em></p><p>Specifies whether data in the container may be accessed publically. By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetPublicAccess(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublicAccess = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageContainerSetPermissionSettings.PublicAccess"/>.</em></p><p>Specifies whether data in the container may be accessed publically. By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings EnablePublicAccess(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublicAccess = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageContainerSetPermissionSettings.PublicAccess"/>.</em></p><p>Specifies whether data in the container may be accessed publically. By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings DisablePublicAccess(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublicAccess = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageContainerSetPermissionSettings.PublicAccess"/>.</em></p><p>Specifies whether data in the container may be accessed publically. By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings TogglePublicAccess(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublicAccess = !toolSettings.PublicAccess;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetTimeout(this AzureStorageContainerSetPermissionSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetTimeout(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetIfModifiedSince(this AzureStorageContainerSetPermissionSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetIfModifiedSince(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetIfUnmodifiedSince(this AzureStorageContainerSetPermissionSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetIfUnmodifiedSince(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetAccountKey(this AzureStorageContainerSetPermissionSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetAccountKey(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetAccountName(this AzureStorageContainerSetPermissionSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetAccountName(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetConnectionString(this AzureStorageContainerSetPermissionSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetConnectionString(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetSasToken(this AzureStorageContainerSetPermissionSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetSasToken(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetDebug(this AzureStorageContainerSetPermissionSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetDebug(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetHelp(this AzureStorageContainerSetPermissionSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetHelp(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetOutput(this AzureStorageContainerSetPermissionSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetOutput(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetQuery(this AzureStorageContainerSetPermissionSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetQuery(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerSetPermissionSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings SetVerbose(this AzureStorageContainerSetPermissionSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerSetPermissionSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerSetPermissionSettings ResetVerbose(this AzureStorageContainerSetPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetName(this AzureStorageContainerShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetName(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetAuthMode(this AzureStorageContainerShowSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetAuthMode(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.LeaseId"/>.</em></p><p>If specified, get_container_properties only succeeds if the container's lease is active and matches this ID.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetLeaseId(this AzureStorageContainerShowSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.LeaseId"/>.</em></p><p>If specified, get_container_properties only succeeds if the container's lease is active and matches this ID.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetLeaseId(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetTimeout(this AzureStorageContainerShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetTimeout(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetAccountKey(this AzureStorageContainerShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetAccountKey(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetAccountName(this AzureStorageContainerShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetAccountName(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetConnectionString(this AzureStorageContainerShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetConnectionString(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetSasToken(this AzureStorageContainerShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetSasToken(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetDebug(this AzureStorageContainerShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetDebug(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetHelp(this AzureStorageContainerShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetHelp(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetOutput(this AzureStorageContainerShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetOutput(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetQuery(this AzureStorageContainerShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetQuery(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings SetVerbose(this AzureStorageContainerShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerShowSettings ResetVerbose(this AzureStorageContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerShowPermissionSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerShowPermissionSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetName(this AzureStorageContainerShowPermissionSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetName(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetAuthMode(this AzureStorageContainerShowPermissionSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetAuthMode(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.LeaseId"/>.</em></p><p>If specified, get_container_acl only succeeds if the container's lease is active and matches this ID.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetLeaseId(this AzureStorageContainerShowPermissionSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.LeaseId"/>.</em></p><p>If specified, get_container_acl only succeeds if the container's lease is active and matches this ID.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetLeaseId(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetTimeout(this AzureStorageContainerShowPermissionSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetTimeout(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetAccountKey(this AzureStorageContainerShowPermissionSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetAccountKey(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetAccountName(this AzureStorageContainerShowPermissionSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetAccountName(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetConnectionString(this AzureStorageContainerShowPermissionSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetConnectionString(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetSasToken(this AzureStorageContainerShowPermissionSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetSasToken(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetDebug(this AzureStorageContainerShowPermissionSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetDebug(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetHelp(this AzureStorageContainerShowPermissionSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetHelp(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetOutput(this AzureStorageContainerShowPermissionSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetOutput(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetQuery(this AzureStorageContainerShowPermissionSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetQuery(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerShowPermissionSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings SetVerbose(this AzureStorageContainerShowPermissionSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerShowPermissionSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerShowPermissionSettings ResetVerbose(this AzureStorageContainerShowPermissionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageMetricsShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageMetricsShowSettingsExtensions
    {
        #region Interval
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsShowSettings.Interval"/>.</em></p><p>Filter the set of metrics to retrieve by time interval.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings SetInterval(this AzureStorageMetricsShowSettings toolSettings, StorageMetricsShowInterval interval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interval = interval;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsShowSettings.Interval"/>.</em></p><p>Filter the set of metrics to retrieve by time interval.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings ResetInterval(this AzureStorageMetricsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interval = null;
            return toolSettings;
        }
        #endregion
        #region Services
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsShowSettings.Services"/>.</em></p><p>The storage services from which to retrieve metrics info: (b)lob (q)ueue (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings SetServices(this AzureStorageMetricsShowSettings toolSettings, string services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = services;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsShowSettings.Services"/>.</em></p><p>The storage services from which to retrieve metrics info: (b)lob (q)ueue (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings ResetServices(this AzureStorageMetricsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings SetTimeout(this AzureStorageMetricsShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings ResetTimeout(this AzureStorageMetricsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings SetAccountKey(this AzureStorageMetricsShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings ResetAccountKey(this AzureStorageMetricsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings SetAccountName(this AzureStorageMetricsShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings ResetAccountName(this AzureStorageMetricsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings SetConnectionString(this AzureStorageMetricsShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings ResetConnectionString(this AzureStorageMetricsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings SetSasToken(this AzureStorageMetricsShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings ResetSasToken(this AzureStorageMetricsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings SetDebug(this AzureStorageMetricsShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings ResetDebug(this AzureStorageMetricsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings SetHelp(this AzureStorageMetricsShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings ResetHelp(this AzureStorageMetricsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings SetOutput(this AzureStorageMetricsShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings ResetOutput(this AzureStorageMetricsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings SetQuery(this AzureStorageMetricsShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings ResetQuery(this AzureStorageMetricsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings SetVerbose(this AzureStorageMetricsShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMetricsShowSettings ResetVerbose(this AzureStorageMetricsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageMetricsUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageMetricsUpdateSettingsExtensions
    {
        #region Retention
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.Retention"/>.</em></p><p>Number of days for which to retain metrics. 0 to disable. Applies to both hour and minute metrics if both are specified.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetRetention(this AzureStorageMetricsUpdateSettings toolSettings, int? retention)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Retention = retention;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.Retention"/>.</em></p><p>Number of days for which to retain metrics. 0 to disable. Applies to both hour and minute metrics if both are specified.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetRetention(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Retention = null;
            return toolSettings;
        }
        #endregion
        #region Services
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.Services"/>.</em></p><p>The storage services from which to retrieve metrics info: (b)lob (q)ueue (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetServices(this AzureStorageMetricsUpdateSettings toolSettings, string services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = services;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.Services"/>.</em></p><p>The storage services from which to retrieve metrics info: (b)lob (q)ueue (t)able. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetServices(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Services = null;
            return toolSettings;
        }
        #endregion
        #region Api
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.Api"/>.</em></p><p>Specify whether to include API in metrics. Applies to both hour and minute metrics if both are specified. Must be specified if hour or minute metrics are enabled and being updated.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetApi(this AzureStorageMetricsUpdateSettings toolSettings, bool? api)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Api = api;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.Api"/>.</em></p><p>Specify whether to include API in metrics. Applies to both hour and minute metrics if both are specified. Must be specified if hour or minute metrics are enabled and being updated.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetApi(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Api = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageMetricsUpdateSettings.Api"/>.</em></p><p>Specify whether to include API in metrics. Applies to both hour and minute metrics if both are specified. Must be specified if hour or minute metrics are enabled and being updated.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings EnableApi(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Api = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageMetricsUpdateSettings.Api"/>.</em></p><p>Specify whether to include API in metrics. Applies to both hour and minute metrics if both are specified. Must be specified if hour or minute metrics are enabled and being updated.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings DisableApi(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Api = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageMetricsUpdateSettings.Api"/>.</em></p><p>Specify whether to include API in metrics. Applies to both hour and minute metrics if both are specified. Must be specified if hour or minute metrics are enabled and being updated.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ToggleApi(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Api = !toolSettings.Api;
            return toolSettings;
        }
        #endregion
        #region Hour
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.Hour"/>.</em></p><p>Update the hourly metrics.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetHour(this AzureStorageMetricsUpdateSettings toolSettings, bool? hour)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hour = hour;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.Hour"/>.</em></p><p>Update the hourly metrics.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetHour(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hour = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageMetricsUpdateSettings.Hour"/>.</em></p><p>Update the hourly metrics.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings EnableHour(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hour = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageMetricsUpdateSettings.Hour"/>.</em></p><p>Update the hourly metrics.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings DisableHour(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hour = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageMetricsUpdateSettings.Hour"/>.</em></p><p>Update the hourly metrics.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ToggleHour(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hour = !toolSettings.Hour;
            return toolSettings;
        }
        #endregion
        #region Minute
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.Minute"/>.</em></p><p>Update the by-minute metrics.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetMinute(this AzureStorageMetricsUpdateSettings toolSettings, bool? minute)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Minute = minute;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.Minute"/>.</em></p><p>Update the by-minute metrics.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetMinute(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Minute = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageMetricsUpdateSettings.Minute"/>.</em></p><p>Update the by-minute metrics.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings EnableMinute(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Minute = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageMetricsUpdateSettings.Minute"/>.</em></p><p>Update the by-minute metrics.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings DisableMinute(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Minute = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageMetricsUpdateSettings.Minute"/>.</em></p><p>Update the by-minute metrics.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ToggleMinute(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Minute = !toolSettings.Minute;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetTimeout(this AzureStorageMetricsUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetTimeout(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetAccountKey(this AzureStorageMetricsUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetAccountKey(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetAccountName(this AzureStorageMetricsUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetAccountName(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetConnectionString(this AzureStorageMetricsUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetConnectionString(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetSasToken(this AzureStorageMetricsUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetSasToken(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetDebug(this AzureStorageMetricsUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetDebug(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetHelp(this AzureStorageMetricsUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetHelp(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetOutput(this AzureStorageMetricsUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetOutput(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetQuery(this AzureStorageMetricsUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetQuery(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageMetricsUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings SetVerbose(this AzureStorageMetricsUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageMetricsUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageMetricsUpdateSettings ResetVerbose(this AzureStorageMetricsUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileMetadataShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileMetadataShowSettingsExtensions
    {
        #region Path
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetPath(this AzureStorageFileMetadataShowSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetPath(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetShareName(this AzureStorageFileMetadataShowSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetShareName(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetSnapshot(this AzureStorageFileMetadataShowSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetSnapshot(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetTimeout(this AzureStorageFileMetadataShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetTimeout(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetAccountKey(this AzureStorageFileMetadataShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetAccountKey(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetAccountName(this AzureStorageFileMetadataShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetAccountName(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetConnectionString(this AzureStorageFileMetadataShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetConnectionString(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetSasToken(this AzureStorageFileMetadataShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetSasToken(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetDebug(this AzureStorageFileMetadataShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetDebug(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetHelp(this AzureStorageFileMetadataShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetHelp(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetOutput(this AzureStorageFileMetadataShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetOutput(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetQuery(this AzureStorageFileMetadataShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetQuery(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings SetVerbose(this AzureStorageFileMetadataShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataShowSettings ResetVerbose(this AzureStorageFileMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileMetadataUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileMetadataUpdateSettingsExtensions
    {
        #region Path
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetPath(this AzureStorageFileMetadataUpdateSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataUpdateSettings.Path"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ResetPath(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetShareName(this AzureStorageFileMetadataUpdateSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataUpdateSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ResetShareName(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetMetadata(this AzureStorageFileMetadataUpdateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageFileMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ClearMetadata(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageFileMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings AddMetadatum(this AzureStorageFileMetadataUpdateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageFileMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings RemoveMetadatum(this AzureStorageFileMetadataUpdateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageFileMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetMetadatum(this AzureStorageFileMetadataUpdateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetTimeout(this AzureStorageFileMetadataUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ResetTimeout(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetAccountKey(this AzureStorageFileMetadataUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ResetAccountKey(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetAccountName(this AzureStorageFileMetadataUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ResetAccountName(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetConnectionString(this AzureStorageFileMetadataUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ResetConnectionString(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetSasToken(this AzureStorageFileMetadataUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ResetSasToken(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetDebug(this AzureStorageFileMetadataUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ResetDebug(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetHelp(this AzureStorageFileMetadataUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ResetHelp(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetOutput(this AzureStorageFileMetadataUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ResetOutput(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetQuery(this AzureStorageFileMetadataUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ResetQuery(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileMetadataUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings SetVerbose(this AzureStorageFileMetadataUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileMetadataUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileMetadataUpdateSettings ResetVerbose(this AzureStorageFileMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileCopyCancelSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileCopyCancelSettingsExtensions
    {
        #region CopyId
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.CopyId"/>.</em></p><p>Copy identifier provided in the copy.id of the original copy_file operation.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetCopyId(this AzureStorageFileCopyCancelSettings toolSettings, string copyId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CopyId = copyId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.CopyId"/>.</em></p><p>Copy identifier provided in the copy.id of the original copy_file operation.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetCopyId(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CopyId = null;
            return toolSettings;
        }
        #endregion
        #region DestinationPath
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.DestinationPath"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetDestinationPath(this AzureStorageFileCopyCancelSettings toolSettings, string destinationPath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationPath = destinationPath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.DestinationPath"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetDestinationPath(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationPath = null;
            return toolSettings;
        }
        #endregion
        #region DestinationShare
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.DestinationShare"/>.</em></p><p>Name of the destination share. The share must exist.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetDestinationShare(this AzureStorageFileCopyCancelSettings toolSettings, string destinationShare)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationShare = destinationShare;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.DestinationShare"/>.</em></p><p>Name of the destination share. The share must exist.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetDestinationShare(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationShare = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetTimeout(this AzureStorageFileCopyCancelSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetTimeout(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetAccountKey(this AzureStorageFileCopyCancelSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetAccountKey(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetAccountName(this AzureStorageFileCopyCancelSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetAccountName(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetConnectionString(this AzureStorageFileCopyCancelSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetConnectionString(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetSasToken(this AzureStorageFileCopyCancelSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetSasToken(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetDebug(this AzureStorageFileCopyCancelSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetDebug(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetHelp(this AzureStorageFileCopyCancelSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetHelp(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetOutput(this AzureStorageFileCopyCancelSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetOutput(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetQuery(this AzureStorageFileCopyCancelSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetQuery(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyCancelSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings SetVerbose(this AzureStorageFileCopyCancelSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyCancelSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileCopyCancelSettings ResetVerbose(this AzureStorageFileCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileCopyStartSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileCopyStartSettingsExtensions
    {
        #region DestinationPath
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.DestinationPath"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetDestinationPath(this AzureStorageFileCopyStartSettings toolSettings, string destinationPath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationPath = destinationPath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.DestinationPath"/>.</em></p><p>The path to the file within the file share.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetDestinationPath(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationPath = null;
            return toolSettings;
        }
        #endregion
        #region DestinationShare
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.DestinationShare"/>.</em></p><p>Name of the destination share. The share must exist.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetDestinationShare(this AzureStorageFileCopyStartSettings toolSettings, string destinationShare)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationShare = destinationShare;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.DestinationShare"/>.</em></p><p>Name of the destination share. The share must exist.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetDestinationShare(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationShare = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetMetadata(this AzureStorageFileCopyStartSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageFileCopyStartSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ClearMetadata(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageFileCopyStartSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings AddMetadatum(this AzureStorageFileCopyStartSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageFileCopyStartSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings RemoveMetadatum(this AzureStorageFileCopyStartSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageFileCopyStartSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetMetadatum(this AzureStorageFileCopyStartSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetTimeout(this AzureStorageFileCopyStartSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetTimeout(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region SourceAccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.SourceAccountKey"/>.</em></p><p>The storage account key of the source blob.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetSourceAccountKey(this AzureStorageFileCopyStartSettings toolSettings, string sourceAccountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountKey = sourceAccountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.SourceAccountKey"/>.</em></p><p>The storage account key of the source blob.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetSourceAccountKey(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountKey = null;
            return toolSettings;
        }
        #endregion
        #region SourceAccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.SourceAccountName"/>.</em></p><p>The storage account name of the source blob.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetSourceAccountName(this AzureStorageFileCopyStartSettings toolSettings, string sourceAccountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountName = sourceAccountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.SourceAccountName"/>.</em></p><p>The storage account name of the source blob.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetSourceAccountName(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountName = null;
            return toolSettings;
        }
        #endregion
        #region SourceBlob
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.SourceBlob"/>.</em></p><p>The blob name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetSourceBlob(this AzureStorageFileCopyStartSettings toolSettings, string sourceBlob)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceBlob = sourceBlob;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.SourceBlob"/>.</em></p><p>The blob name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetSourceBlob(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceBlob = null;
            return toolSettings;
        }
        #endregion
        #region SourceContainer
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.SourceContainer"/>.</em></p><p>The container name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetSourceContainer(this AzureStorageFileCopyStartSettings toolSettings, string sourceContainer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceContainer = sourceContainer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.SourceContainer"/>.</em></p><p>The container name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetSourceContainer(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceContainer = null;
            return toolSettings;
        }
        #endregion
        #region SourcePath
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.SourcePath"/>.</em></p><p>The file path for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetSourcePath(this AzureStorageFileCopyStartSettings toolSettings, string sourcePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourcePath = sourcePath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.SourcePath"/>.</em></p><p>The file path for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetSourcePath(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourcePath = null;
            return toolSettings;
        }
        #endregion
        #region SourceSas
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.SourceSas"/>.</em></p><p>The shared access signature for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetSourceSas(this AzureStorageFileCopyStartSettings toolSettings, string sourceSas)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSas = sourceSas;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.SourceSas"/>.</em></p><p>The shared access signature for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetSourceSas(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSas = null;
            return toolSettings;
        }
        #endregion
        #region SourceShare
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.SourceShare"/>.</em></p><p>The share name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetSourceShare(this AzureStorageFileCopyStartSettings toolSettings, string sourceShare)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceShare = sourceShare;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.SourceShare"/>.</em></p><p>The share name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetSourceShare(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceShare = null;
            return toolSettings;
        }
        #endregion
        #region SourceSnapshot
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.SourceSnapshot"/>.</em></p><p>The blob snapshot for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetSourceSnapshot(this AzureStorageFileCopyStartSettings toolSettings, string sourceSnapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSnapshot = sourceSnapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.SourceSnapshot"/>.</em></p><p>The blob snapshot for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetSourceSnapshot(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSnapshot = null;
            return toolSettings;
        }
        #endregion
        #region SourceUri
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.SourceUri"/>.</em></p><p>A URL of up to 2 KB in length that specifies an Azure file or blob. The value should be URL-encoded as it would appear in a request URI. If the source is in another account, the source must either be public or must be authenticated via a shared access signature. If the source is public, no authentication is required. Examples: <a href="https://myaccount.file.core.windows.net/myshare/mydir/myfile">https://myaccount.file.core.windows.net/myshare/mydir/myfile</a> <a href="https://otheraccount.file.core.windows.net/myshare/mydir/myfile?sastoken">https://otheraccount.file.core.windows.net/myshare/mydir/myfile?sastoken</a>.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetSourceUri(this AzureStorageFileCopyStartSettings toolSettings, string sourceUri)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceUri = sourceUri;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.SourceUri"/>.</em></p><p>A URL of up to 2 KB in length that specifies an Azure file or blob. The value should be URL-encoded as it would appear in a request URI. If the source is in another account, the source must either be public or must be authenticated via a shared access signature. If the source is public, no authentication is required. Examples: <a href="https://myaccount.file.core.windows.net/myshare/mydir/myfile">https://myaccount.file.core.windows.net/myshare/mydir/myfile</a> <a href="https://otheraccount.file.core.windows.net/myshare/mydir/myfile?sastoken">https://otheraccount.file.core.windows.net/myshare/mydir/myfile?sastoken</a>.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetSourceUri(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceUri = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetAccountKey(this AzureStorageFileCopyStartSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetAccountKey(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetAccountName(this AzureStorageFileCopyStartSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetAccountName(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetConnectionString(this AzureStorageFileCopyStartSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetConnectionString(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetSasToken(this AzureStorageFileCopyStartSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetSasToken(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetDebug(this AzureStorageFileCopyStartSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetDebug(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetHelp(this AzureStorageFileCopyStartSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetHelp(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetOutput(this AzureStorageFileCopyStartSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetOutput(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetQuery(this AzureStorageFileCopyStartSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetQuery(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings SetVerbose(this AzureStorageFileCopyStartSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartSettings ResetVerbose(this AzureStorageFileCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageFileCopyStartBatchSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageFileCopyStartBatchSettingsExtensions
    {
        #region DestinationPath
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.DestinationPath"/>.</em></p><p>The directory where the source data is copied to. If omitted, data is copied to the root directory.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetDestinationPath(this AzureStorageFileCopyStartBatchSettings toolSettings, string destinationPath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationPath = destinationPath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.DestinationPath"/>.</em></p><p>The directory where the source data is copied to. If omitted, data is copied to the root directory.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetDestinationPath(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationPath = null;
            return toolSettings;
        }
        #endregion
        #region DestinationShare
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.DestinationShare"/>.</em></p><p>The file share where the source data is copied to.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetDestinationShare(this AzureStorageFileCopyStartBatchSettings toolSettings, string destinationShare)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationShare = destinationShare;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.DestinationShare"/>.</em></p><p>The file share where the source data is copied to.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetDestinationShare(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationShare = null;
            return toolSettings;
        }
        #endregion
        #region Dryrun
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.Dryrun"/>.</em></p><p>List the files and blobs to be copied. No actual data transfer will occur.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetDryrun(this AzureStorageFileCopyStartBatchSettings toolSettings, string dryrun)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = dryrun;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.Dryrun"/>.</em></p><p>List the files and blobs to be copied. No actual data transfer will occur.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetDryrun(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetMetadata(this AzureStorageFileCopyStartBatchSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageFileCopyStartBatchSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ClearMetadata(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageFileCopyStartBatchSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings AddMetadatum(this AzureStorageFileCopyStartBatchSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageFileCopyStartBatchSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings RemoveMetadatum(this AzureStorageFileCopyStartBatchSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageFileCopyStartBatchSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetMetadatum(this AzureStorageFileCopyStartBatchSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Pattern
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.Pattern"/>.</em></p><p>The pattern used for globbing files and blobs. The supported patterns are '*', '?', '[seq', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetPattern(this AzureStorageFileCopyStartBatchSettings toolSettings, string pattern)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = pattern;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.Pattern"/>.</em></p><p>The pattern used for globbing files and blobs. The supported patterns are '*', '?', '[seq', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetPattern(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetTimeout(this AzureStorageFileCopyStartBatchSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetTimeout(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region SourceAccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.SourceAccountKey"/>.</em></p><p>The account key for the source storage account. If omitted, the active login is used to determine the account key.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetSourceAccountKey(this AzureStorageFileCopyStartBatchSettings toolSettings, string sourceAccountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountKey = sourceAccountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.SourceAccountKey"/>.</em></p><p>The account key for the source storage account. If omitted, the active login is used to determine the account key.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetSourceAccountKey(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountKey = null;
            return toolSettings;
        }
        #endregion
        #region SourceAccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.SourceAccountName"/>.</em></p><p>The source storage account to copy the data from. If omitted, the destination account is used.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetSourceAccountName(this AzureStorageFileCopyStartBatchSettings toolSettings, string sourceAccountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountName = sourceAccountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.SourceAccountName"/>.</em></p><p>The source storage account to copy the data from. If omitted, the destination account is used.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetSourceAccountName(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountName = null;
            return toolSettings;
        }
        #endregion
        #region SourceContainer
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.SourceContainer"/>.</em></p><p>The source container blobs are copied from.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetSourceContainer(this AzureStorageFileCopyStartBatchSettings toolSettings, string sourceContainer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceContainer = sourceContainer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.SourceContainer"/>.</em></p><p>The source container blobs are copied from.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetSourceContainer(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceContainer = null;
            return toolSettings;
        }
        #endregion
        #region SourceSas
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.SourceSas"/>.</em></p><p>The shared access signature for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetSourceSas(this AzureStorageFileCopyStartBatchSettings toolSettings, string sourceSas)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSas = sourceSas;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.SourceSas"/>.</em></p><p>The shared access signature for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetSourceSas(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSas = null;
            return toolSettings;
        }
        #endregion
        #region SourceShare
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.SourceShare"/>.</em></p><p>The source share files are copied from.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetSourceShare(this AzureStorageFileCopyStartBatchSettings toolSettings, string sourceShare)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceShare = sourceShare;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.SourceShare"/>.</em></p><p>The source share files are copied from.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetSourceShare(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceShare = null;
            return toolSettings;
        }
        #endregion
        #region SourceUri
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.SourceUri"/>.</em></p><p>A URI that specifies a the source file share or blob container.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetSourceUri(this AzureStorageFileCopyStartBatchSettings toolSettings, string sourceUri)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceUri = sourceUri;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.SourceUri"/>.</em></p><p>A URI that specifies a the source file share or blob container.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetSourceUri(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceUri = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetAccountKey(this AzureStorageFileCopyStartBatchSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetAccountKey(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetAccountName(this AzureStorageFileCopyStartBatchSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetAccountName(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetConnectionString(this AzureStorageFileCopyStartBatchSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetConnectionString(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetSasToken(this AzureStorageFileCopyStartBatchSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetSasToken(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetDebug(this AzureStorageFileCopyStartBatchSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetDebug(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetHelp(this AzureStorageFileCopyStartBatchSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetHelp(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetOutput(this AzureStorageFileCopyStartBatchSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetOutput(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetQuery(this AzureStorageFileCopyStartBatchSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetQuery(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageFileCopyStartBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings SetVerbose(this AzureStorageFileCopyStartBatchSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageFileCopyStartBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageFileCopyStartBatchSettings ResetVerbose(this AzureStorageFileCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerLegalHoldClearSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerLegalHoldClearSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldClearSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings SetAccountName(this AzureStorageContainerLegalHoldClearSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldClearSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings ResetAccountName(this AzureStorageContainerLegalHoldClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldClearSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings SetContainerName(this AzureStorageContainerLegalHoldClearSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldClearSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings ResetContainerName(this AzureStorageContainerLegalHoldClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldClearSettings.Tags"/>.</em></p><p>Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings SetTags(this AzureStorageContainerLegalHoldClearSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldClearSettings.Tags"/>.</em></p><p>Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings ResetTags(this AzureStorageContainerLegalHoldClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldClearSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings SetResourceGroup(this AzureStorageContainerLegalHoldClearSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldClearSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings ResetResourceGroup(this AzureStorageContainerLegalHoldClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldClearSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings SetDebug(this AzureStorageContainerLegalHoldClearSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldClearSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings ResetDebug(this AzureStorageContainerLegalHoldClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldClearSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings SetHelp(this AzureStorageContainerLegalHoldClearSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldClearSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings ResetHelp(this AzureStorageContainerLegalHoldClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldClearSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings SetOutput(this AzureStorageContainerLegalHoldClearSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldClearSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings ResetOutput(this AzureStorageContainerLegalHoldClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldClearSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings SetQuery(this AzureStorageContainerLegalHoldClearSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldClearSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings ResetQuery(this AzureStorageContainerLegalHoldClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldClearSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings SetVerbose(this AzureStorageContainerLegalHoldClearSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldClearSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldClearSettings ResetVerbose(this AzureStorageContainerLegalHoldClearSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerLegalHoldSetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerLegalHoldSetSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldSetSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings SetAccountName(this AzureStorageContainerLegalHoldSetSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldSetSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings ResetAccountName(this AzureStorageContainerLegalHoldSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldSetSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings SetContainerName(this AzureStorageContainerLegalHoldSetSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldSetSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings ResetContainerName(this AzureStorageContainerLegalHoldSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldSetSettings.Tags"/>.</em></p><p>Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings SetTags(this AzureStorageContainerLegalHoldSetSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldSetSettings.Tags"/>.</em></p><p>Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings ResetTags(this AzureStorageContainerLegalHoldSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldSetSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings SetResourceGroup(this AzureStorageContainerLegalHoldSetSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldSetSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings ResetResourceGroup(this AzureStorageContainerLegalHoldSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings SetDebug(this AzureStorageContainerLegalHoldSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings ResetDebug(this AzureStorageContainerLegalHoldSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings SetHelp(this AzureStorageContainerLegalHoldSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings ResetHelp(this AzureStorageContainerLegalHoldSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings SetOutput(this AzureStorageContainerLegalHoldSetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings ResetOutput(this AzureStorageContainerLegalHoldSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldSetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings SetQuery(this AzureStorageContainerLegalHoldSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldSetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings ResetQuery(this AzureStorageContainerLegalHoldSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings SetVerbose(this AzureStorageContainerLegalHoldSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldSetSettings ResetVerbose(this AzureStorageContainerLegalHoldSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerLegalHoldShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerLegalHoldShowSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldShowSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings SetAccountName(this AzureStorageContainerLegalHoldShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldShowSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings ResetAccountName(this AzureStorageContainerLegalHoldShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldShowSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings SetContainerName(this AzureStorageContainerLegalHoldShowSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldShowSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings ResetContainerName(this AzureStorageContainerLegalHoldShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings SetResourceGroup(this AzureStorageContainerLegalHoldShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings ResetResourceGroup(this AzureStorageContainerLegalHoldShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings SetDebug(this AzureStorageContainerLegalHoldShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings ResetDebug(this AzureStorageContainerLegalHoldShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings SetHelp(this AzureStorageContainerLegalHoldShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings ResetHelp(this AzureStorageContainerLegalHoldShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings SetOutput(this AzureStorageContainerLegalHoldShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings ResetOutput(this AzureStorageContainerLegalHoldShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings SetQuery(this AzureStorageContainerLegalHoldShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings ResetQuery(this AzureStorageContainerLegalHoldShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLegalHoldShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings SetVerbose(this AzureStorageContainerLegalHoldShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLegalHoldShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLegalHoldShowSettings ResetVerbose(this AzureStorageContainerLegalHoldShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerLeaseAcquireSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerLeaseAcquireSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetContainerName(this AzureStorageContainerLeaseAcquireSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetContainerName(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetAuthMode(this AzureStorageContainerLeaseAcquireSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetAuthMode(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseDuration
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.LeaseDuration"/>.</em></p><p>Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change. Default is -1 (infinite lease).</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetLeaseDuration(this AzureStorageContainerLeaseAcquireSettings toolSettings, string leaseDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseDuration = leaseDuration;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.LeaseDuration"/>.</em></p><p>Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change. Default is -1 (infinite lease).</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetLeaseDuration(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseDuration = null;
            return toolSettings;
        }
        #endregion
        #region ProposedLeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.ProposedLeaseId"/>.</em></p><p>Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetProposedLeaseId(this AzureStorageContainerLeaseAcquireSettings toolSettings, string proposedLeaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProposedLeaseId = proposedLeaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.ProposedLeaseId"/>.</em></p><p>Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetProposedLeaseId(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProposedLeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetTimeout(this AzureStorageContainerLeaseAcquireSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetTimeout(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetIfModifiedSince(this AzureStorageContainerLeaseAcquireSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetIfModifiedSince(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetIfUnmodifiedSince(this AzureStorageContainerLeaseAcquireSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetIfUnmodifiedSince(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetAccountKey(this AzureStorageContainerLeaseAcquireSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetAccountKey(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetAccountName(this AzureStorageContainerLeaseAcquireSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetAccountName(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetConnectionString(this AzureStorageContainerLeaseAcquireSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetConnectionString(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetSasToken(this AzureStorageContainerLeaseAcquireSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetSasToken(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetDebug(this AzureStorageContainerLeaseAcquireSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetDebug(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetHelp(this AzureStorageContainerLeaseAcquireSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetHelp(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetOutput(this AzureStorageContainerLeaseAcquireSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetOutput(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetQuery(this AzureStorageContainerLeaseAcquireSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetQuery(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseAcquireSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings SetVerbose(this AzureStorageContainerLeaseAcquireSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseAcquireSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseAcquireSettings ResetVerbose(this AzureStorageContainerLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerLeaseBreakSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerLeaseBreakSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetContainerName(this AzureStorageContainerLeaseBreakSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetContainerName(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetAuthMode(this AzureStorageContainerLeaseBreakSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetAuthMode(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseBreakPeriod
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.LeaseBreakPeriod"/>.</em></p><p>This is the proposed duration of seconds that the lease should continue before it is broken, between 0 and 60 seconds. This break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease will not be available before the break period has expired, but the lease may be held for longer than the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks immediately.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetLeaseBreakPeriod(this AzureStorageContainerLeaseBreakSettings toolSettings, string leaseBreakPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseBreakPeriod = leaseBreakPeriod;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.LeaseBreakPeriod"/>.</em></p><p>This is the proposed duration of seconds that the lease should continue before it is broken, between 0 and 60 seconds. This break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease will not be available before the break period has expired, but the lease may be held for longer than the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks immediately.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetLeaseBreakPeriod(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseBreakPeriod = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetTimeout(this AzureStorageContainerLeaseBreakSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetTimeout(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetIfModifiedSince(this AzureStorageContainerLeaseBreakSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetIfModifiedSince(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetIfUnmodifiedSince(this AzureStorageContainerLeaseBreakSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetIfUnmodifiedSince(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetAccountKey(this AzureStorageContainerLeaseBreakSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetAccountKey(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetAccountName(this AzureStorageContainerLeaseBreakSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetAccountName(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetConnectionString(this AzureStorageContainerLeaseBreakSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetConnectionString(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetSasToken(this AzureStorageContainerLeaseBreakSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetSasToken(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetDebug(this AzureStorageContainerLeaseBreakSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetDebug(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetHelp(this AzureStorageContainerLeaseBreakSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetHelp(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetOutput(this AzureStorageContainerLeaseBreakSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetOutput(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetQuery(this AzureStorageContainerLeaseBreakSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetQuery(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseBreakSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings SetVerbose(this AzureStorageContainerLeaseBreakSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseBreakSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseBreakSettings ResetVerbose(this AzureStorageContainerLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerLeaseChangeSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerLeaseChangeSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetContainerName(this AzureStorageContainerLeaseChangeSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetContainerName(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.LeaseId"/>.</em></p><p>Lease ID for active lease.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetLeaseId(this AzureStorageContainerLeaseChangeSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.LeaseId"/>.</em></p><p>Lease ID for active lease.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetLeaseId(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region ProposedLeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.ProposedLeaseId"/>.</em></p><p>Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetProposedLeaseId(this AzureStorageContainerLeaseChangeSettings toolSettings, string proposedLeaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProposedLeaseId = proposedLeaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.ProposedLeaseId"/>.</em></p><p>Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetProposedLeaseId(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProposedLeaseId = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetAuthMode(this AzureStorageContainerLeaseChangeSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetAuthMode(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetTimeout(this AzureStorageContainerLeaseChangeSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetTimeout(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetIfModifiedSince(this AzureStorageContainerLeaseChangeSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetIfModifiedSince(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetIfUnmodifiedSince(this AzureStorageContainerLeaseChangeSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetIfUnmodifiedSince(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetAccountKey(this AzureStorageContainerLeaseChangeSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetAccountKey(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetAccountName(this AzureStorageContainerLeaseChangeSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetAccountName(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetConnectionString(this AzureStorageContainerLeaseChangeSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetConnectionString(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetSasToken(this AzureStorageContainerLeaseChangeSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetSasToken(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetDebug(this AzureStorageContainerLeaseChangeSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetDebug(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetHelp(this AzureStorageContainerLeaseChangeSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetHelp(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetOutput(this AzureStorageContainerLeaseChangeSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetOutput(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetQuery(this AzureStorageContainerLeaseChangeSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetQuery(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseChangeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings SetVerbose(this AzureStorageContainerLeaseChangeSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseChangeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseChangeSettings ResetVerbose(this AzureStorageContainerLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerLeaseReleaseSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerLeaseReleaseSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetContainerName(this AzureStorageContainerLeaseReleaseSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetContainerName(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.LeaseId"/>.</em></p><p>Lease ID for active lease.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetLeaseId(this AzureStorageContainerLeaseReleaseSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.LeaseId"/>.</em></p><p>Lease ID for active lease.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetLeaseId(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetAuthMode(this AzureStorageContainerLeaseReleaseSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetAuthMode(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetTimeout(this AzureStorageContainerLeaseReleaseSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetTimeout(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetIfModifiedSince(this AzureStorageContainerLeaseReleaseSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetIfModifiedSince(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetIfUnmodifiedSince(this AzureStorageContainerLeaseReleaseSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetIfUnmodifiedSince(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetAccountKey(this AzureStorageContainerLeaseReleaseSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetAccountKey(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetAccountName(this AzureStorageContainerLeaseReleaseSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetAccountName(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetConnectionString(this AzureStorageContainerLeaseReleaseSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetConnectionString(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetSasToken(this AzureStorageContainerLeaseReleaseSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetSasToken(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetDebug(this AzureStorageContainerLeaseReleaseSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetDebug(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetHelp(this AzureStorageContainerLeaseReleaseSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetHelp(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetOutput(this AzureStorageContainerLeaseReleaseSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetOutput(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetQuery(this AzureStorageContainerLeaseReleaseSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetQuery(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseReleaseSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings SetVerbose(this AzureStorageContainerLeaseReleaseSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseReleaseSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseReleaseSettings ResetVerbose(this AzureStorageContainerLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerLeaseRenewSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerLeaseRenewSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetContainerName(this AzureStorageContainerLeaseRenewSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetContainerName(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.LeaseId"/>.</em></p><p>Lease ID for active lease.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetLeaseId(this AzureStorageContainerLeaseRenewSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.LeaseId"/>.</em></p><p>Lease ID for active lease.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetLeaseId(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetAuthMode(this AzureStorageContainerLeaseRenewSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetAuthMode(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetTimeout(this AzureStorageContainerLeaseRenewSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetTimeout(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetIfModifiedSince(this AzureStorageContainerLeaseRenewSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetIfModifiedSince(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetIfUnmodifiedSince(this AzureStorageContainerLeaseRenewSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetIfUnmodifiedSince(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetAccountKey(this AzureStorageContainerLeaseRenewSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetAccountKey(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetAccountName(this AzureStorageContainerLeaseRenewSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetAccountName(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetConnectionString(this AzureStorageContainerLeaseRenewSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetConnectionString(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetSasToken(this AzureStorageContainerLeaseRenewSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetSasToken(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetDebug(this AzureStorageContainerLeaseRenewSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetDebug(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetHelp(this AzureStorageContainerLeaseRenewSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetHelp(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetOutput(this AzureStorageContainerLeaseRenewSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetOutput(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetQuery(this AzureStorageContainerLeaseRenewSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetQuery(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerLeaseRenewSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings SetVerbose(this AzureStorageContainerLeaseRenewSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerLeaseRenewSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerLeaseRenewSettings ResetVerbose(this AzureStorageContainerLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerMetadataShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerMetadataShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetName(this AzureStorageContainerMetadataShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetName(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetAuthMode(this AzureStorageContainerMetadataShowSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetAuthMode(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.LeaseId"/>.</em></p><p>If specified, get_container_metadata only succeeds if the container's lease is active and matches this ID.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetLeaseId(this AzureStorageContainerMetadataShowSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.LeaseId"/>.</em></p><p>If specified, get_container_metadata only succeeds if the container's lease is active and matches this ID.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetLeaseId(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetTimeout(this AzureStorageContainerMetadataShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetTimeout(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetAccountKey(this AzureStorageContainerMetadataShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetAccountKey(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetAccountName(this AzureStorageContainerMetadataShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetAccountName(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetConnectionString(this AzureStorageContainerMetadataShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetConnectionString(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetSasToken(this AzureStorageContainerMetadataShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetSasToken(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetDebug(this AzureStorageContainerMetadataShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetDebug(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetHelp(this AzureStorageContainerMetadataShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetHelp(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetOutput(this AzureStorageContainerMetadataShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetOutput(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetQuery(this AzureStorageContainerMetadataShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetQuery(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings SetVerbose(this AzureStorageContainerMetadataShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataShowSettings ResetVerbose(this AzureStorageContainerMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerMetadataUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerMetadataUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetName(this AzureStorageContainerMetadataUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.Name"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetName(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetAuthMode(this AzureStorageContainerMetadataUpdateSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetAuthMode(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.LeaseId"/>.</em></p><p>If specified, set_container_metadata only succeeds if the container's lease is active and matches this ID.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetLeaseId(this AzureStorageContainerMetadataUpdateSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.LeaseId"/>.</em></p><p>If specified, set_container_metadata only succeeds if the container's lease is active and matches this ID.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetLeaseId(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetMetadata(this AzureStorageContainerMetadataUpdateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageContainerMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ClearMetadata(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageContainerMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings AddMetadatum(this AzureStorageContainerMetadataUpdateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageContainerMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings RemoveMetadatum(this AzureStorageContainerMetadataUpdateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageContainerMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetMetadatum(this AzureStorageContainerMetadataUpdateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetTimeout(this AzureStorageContainerMetadataUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetTimeout(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetIfModifiedSince(this AzureStorageContainerMetadataUpdateSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetIfModifiedSince(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetAccountKey(this AzureStorageContainerMetadataUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetAccountKey(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetAccountName(this AzureStorageContainerMetadataUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetAccountName(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetConnectionString(this AzureStorageContainerMetadataUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetConnectionString(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetSasToken(this AzureStorageContainerMetadataUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetSasToken(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetDebug(this AzureStorageContainerMetadataUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetDebug(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetHelp(this AzureStorageContainerMetadataUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetHelp(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetOutput(this AzureStorageContainerMetadataUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetOutput(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetQuery(this AzureStorageContainerMetadataUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetQuery(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerMetadataUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings SetVerbose(this AzureStorageContainerMetadataUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerMetadataUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerMetadataUpdateSettings ResetVerbose(this AzureStorageContainerMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerImmutabilityPolicyCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerImmutabilityPolicyCreateSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings SetAccountName(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings ResetAccountName(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings SetContainerName(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings ResetContainerName(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Period
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.Period"/>.</em></p><p>The immutability period for the blobs in the container since the policy creation, in days.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings SetPeriod(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings, string period)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Period = period;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.Period"/>.</em></p><p>The immutability period for the blobs in the container since the policy creation, in days.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings ResetPeriod(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Period = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings SetResourceGroup(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings ResetResourceGroup(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.IfMatch"/>.</em></p><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings SetIfMatch(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.IfMatch"/>.</em></p><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings ResetIfMatch(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings SetDebug(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings ResetDebug(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings SetHelp(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings ResetHelp(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings SetOutput(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings ResetOutput(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings SetQuery(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings ResetQuery(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings SetVerbose(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyCreateSettings ResetVerbose(this AzureStorageContainerImmutabilityPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerImmutabilityPolicyDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerImmutabilityPolicyDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings SetAccountName(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings ResetAccountName(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings SetContainerName(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings ResetContainerName(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings SetResourceGroup(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings ResetResourceGroup(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.IfMatch"/>.</em></p><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings SetIfMatch(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.IfMatch"/>.</em></p><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings ResetIfMatch(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings SetDebug(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings ResetDebug(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings SetHelp(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings ResetHelp(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings SetOutput(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings ResetOutput(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings SetQuery(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings ResetQuery(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings SetVerbose(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyDeleteSettings ResetVerbose(this AzureStorageContainerImmutabilityPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerImmutabilityPolicyExtendSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerImmutabilityPolicyExtendSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings SetAccountName(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings ResetAccountName(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings SetContainerName(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings ResetContainerName(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Period
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.Period"/>.</em></p><p>The immutability period for the blobs in the container since the policy creation, in days.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings SetPeriod(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings, string period)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Period = period;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.Period"/>.</em></p><p>The immutability period for the blobs in the container since the policy creation, in days.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings ResetPeriod(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Period = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings SetResourceGroup(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings ResetResourceGroup(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.IfMatch"/>.</em></p><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings SetIfMatch(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.IfMatch"/>.</em></p><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings ResetIfMatch(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings SetDebug(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings ResetDebug(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings SetHelp(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings ResetHelp(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings SetOutput(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings ResetOutput(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings SetQuery(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings ResetQuery(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings SetVerbose(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyExtendSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyExtendSettings ResetVerbose(this AzureStorageContainerImmutabilityPolicyExtendSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerImmutabilityPolicyLockSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerImmutabilityPolicyLockSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings SetAccountName(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings ResetAccountName(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings SetContainerName(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings ResetContainerName(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings SetResourceGroup(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings ResetResourceGroup(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.IfMatch"/>.</em></p><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings SetIfMatch(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.IfMatch"/>.</em></p><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings ResetIfMatch(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings SetDebug(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings ResetDebug(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings SetHelp(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings ResetHelp(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings SetOutput(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings ResetOutput(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings SetQuery(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings ResetQuery(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings SetVerbose(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyLockSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyLockSettings ResetVerbose(this AzureStorageContainerImmutabilityPolicyLockSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerImmutabilityPolicyShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerImmutabilityPolicyShowSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings SetAccountName(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.AccountName"/>.</em></p><p>The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings ResetAccountName(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings SetContainerName(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings ResetContainerName(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings SetResourceGroup(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings ResetResourceGroup(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.IfMatch"/>.</em></p><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings SetIfMatch(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.IfMatch"/>.</em></p><p>The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings ResetIfMatch(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings SetDebug(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings ResetDebug(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings SetHelp(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings ResetHelp(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings SetOutput(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings ResetOutput(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings SetQuery(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings ResetQuery(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings SetVerbose(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerImmutabilityPolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerImmutabilityPolicyShowSettings ResetVerbose(this AzureStorageContainerImmutabilityPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerPolicyCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerPolicyCreateSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetContainerName(this AzureStorageContainerPolicyCreateSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetContainerName(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetName(this AzureStorageContainerPolicyCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetName(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetAuthMode(this AzureStorageContainerPolicyCreateSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetAuthMode(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetExpiry(this AzureStorageContainerPolicyCreateSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetExpiry(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.LeaseId"/>.</em></p><p>The container lease ID.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetLeaseId(this AzureStorageContainerPolicyCreateSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.LeaseId"/>.</em></p><p>The container lease ID.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetLeaseId(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.Permissions"/>.</em></p><p>Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetPermissions(this AzureStorageContainerPolicyCreateSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.Permissions"/>.</em></p><p>Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetPermissions(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetStart(this AzureStorageContainerPolicyCreateSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetStart(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetAccountKey(this AzureStorageContainerPolicyCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetAccountKey(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetAccountName(this AzureStorageContainerPolicyCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetAccountName(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetConnectionString(this AzureStorageContainerPolicyCreateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetConnectionString(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetSasToken(this AzureStorageContainerPolicyCreateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetSasToken(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetDebug(this AzureStorageContainerPolicyCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetDebug(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetHelp(this AzureStorageContainerPolicyCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetHelp(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetOutput(this AzureStorageContainerPolicyCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetOutput(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetQuery(this AzureStorageContainerPolicyCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetQuery(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings SetVerbose(this AzureStorageContainerPolicyCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyCreateSettings ResetVerbose(this AzureStorageContainerPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerPolicyDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerPolicyDeleteSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetContainerName(this AzureStorageContainerPolicyDeleteSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetContainerName(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetName(this AzureStorageContainerPolicyDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetName(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetAuthMode(this AzureStorageContainerPolicyDeleteSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetAuthMode(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.LeaseId"/>.</em></p><p>The container lease ID.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetLeaseId(this AzureStorageContainerPolicyDeleteSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.LeaseId"/>.</em></p><p>The container lease ID.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetLeaseId(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetAccountKey(this AzureStorageContainerPolicyDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetAccountKey(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetAccountName(this AzureStorageContainerPolicyDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetAccountName(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetConnectionString(this AzureStorageContainerPolicyDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetConnectionString(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetSasToken(this AzureStorageContainerPolicyDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetSasToken(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetDebug(this AzureStorageContainerPolicyDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetDebug(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetHelp(this AzureStorageContainerPolicyDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetHelp(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetOutput(this AzureStorageContainerPolicyDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetOutput(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetQuery(this AzureStorageContainerPolicyDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetQuery(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings SetVerbose(this AzureStorageContainerPolicyDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyDeleteSettings ResetVerbose(this AzureStorageContainerPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerPolicyListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerPolicyListSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyListSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings SetContainerName(this AzureStorageContainerPolicyListSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyListSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings ResetContainerName(this AzureStorageContainerPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyListSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings SetAuthMode(this AzureStorageContainerPolicyListSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyListSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings ResetAuthMode(this AzureStorageContainerPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyListSettings.LeaseId"/>.</em></p><p>The container lease ID.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings SetLeaseId(this AzureStorageContainerPolicyListSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyListSettings.LeaseId"/>.</em></p><p>The container lease ID.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings ResetLeaseId(this AzureStorageContainerPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings SetAccountKey(this AzureStorageContainerPolicyListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings ResetAccountKey(this AzureStorageContainerPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings SetAccountName(this AzureStorageContainerPolicyListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings ResetAccountName(this AzureStorageContainerPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings SetConnectionString(this AzureStorageContainerPolicyListSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings ResetConnectionString(this AzureStorageContainerPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings SetSasToken(this AzureStorageContainerPolicyListSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings ResetSasToken(this AzureStorageContainerPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings SetDebug(this AzureStorageContainerPolicyListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings ResetDebug(this AzureStorageContainerPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings SetHelp(this AzureStorageContainerPolicyListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings ResetHelp(this AzureStorageContainerPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings SetOutput(this AzureStorageContainerPolicyListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings ResetOutput(this AzureStorageContainerPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings SetQuery(this AzureStorageContainerPolicyListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings ResetQuery(this AzureStorageContainerPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings SetVerbose(this AzureStorageContainerPolicyListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyListSettings ResetVerbose(this AzureStorageContainerPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerPolicyShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerPolicyShowSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetContainerName(this AzureStorageContainerPolicyShowSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetContainerName(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetName(this AzureStorageContainerPolicyShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetName(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetAuthMode(this AzureStorageContainerPolicyShowSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetAuthMode(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.LeaseId"/>.</em></p><p>The container lease ID.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetLeaseId(this AzureStorageContainerPolicyShowSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.LeaseId"/>.</em></p><p>The container lease ID.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetLeaseId(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetAccountKey(this AzureStorageContainerPolicyShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetAccountKey(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetAccountName(this AzureStorageContainerPolicyShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetAccountName(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetConnectionString(this AzureStorageContainerPolicyShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetConnectionString(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetSasToken(this AzureStorageContainerPolicyShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetSasToken(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetDebug(this AzureStorageContainerPolicyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetDebug(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetHelp(this AzureStorageContainerPolicyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetHelp(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetOutput(this AzureStorageContainerPolicyShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetOutput(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetQuery(this AzureStorageContainerPolicyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetQuery(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings SetVerbose(this AzureStorageContainerPolicyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyShowSettings ResetVerbose(this AzureStorageContainerPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageContainerPolicyUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageContainerPolicyUpdateSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetContainerName(this AzureStorageContainerPolicyUpdateSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetContainerName(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetName(this AzureStorageContainerPolicyUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetName(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetAuthMode(this AzureStorageContainerPolicyUpdateSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetAuthMode(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetExpiry(this AzureStorageContainerPolicyUpdateSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetExpiry(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.LeaseId"/>.</em></p><p>The container lease ID.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetLeaseId(this AzureStorageContainerPolicyUpdateSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.LeaseId"/>.</em></p><p>The container lease ID.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetLeaseId(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.Permissions"/>.</em></p><p>Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetPermissions(this AzureStorageContainerPolicyUpdateSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.Permissions"/>.</em></p><p>Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetPermissions(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetStart(this AzureStorageContainerPolicyUpdateSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetStart(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetAccountKey(this AzureStorageContainerPolicyUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetAccountKey(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetAccountName(this AzureStorageContainerPolicyUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetAccountName(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetConnectionString(this AzureStorageContainerPolicyUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetConnectionString(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetSasToken(this AzureStorageContainerPolicyUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetSasToken(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetDebug(this AzureStorageContainerPolicyUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetDebug(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetHelp(this AzureStorageContainerPolicyUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetHelp(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetOutput(this AzureStorageContainerPolicyUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetOutput(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetQuery(this AzureStorageContainerPolicyUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetQuery(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageContainerPolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings SetVerbose(this AzureStorageContainerPolicyUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageContainerPolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageContainerPolicyUpdateSettings ResetVerbose(this AzureStorageContainerPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageShareMetadataShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageShareMetadataShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataShowSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings SetName(this AzureStorageShareMetadataShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataShowSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings ResetName(this AzureStorageShareMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataShowSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings SetSnapshot(this AzureStorageShareMetadataShowSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataShowSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings ResetSnapshot(this AzureStorageShareMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings SetTimeout(this AzureStorageShareMetadataShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings ResetTimeout(this AzureStorageShareMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings SetAccountKey(this AzureStorageShareMetadataShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings ResetAccountKey(this AzureStorageShareMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings SetAccountName(this AzureStorageShareMetadataShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings ResetAccountName(this AzureStorageShareMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings SetConnectionString(this AzureStorageShareMetadataShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings ResetConnectionString(this AzureStorageShareMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings SetSasToken(this AzureStorageShareMetadataShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings ResetSasToken(this AzureStorageShareMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings SetDebug(this AzureStorageShareMetadataShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings ResetDebug(this AzureStorageShareMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings SetHelp(this AzureStorageShareMetadataShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings ResetHelp(this AzureStorageShareMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings SetOutput(this AzureStorageShareMetadataShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings ResetOutput(this AzureStorageShareMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings SetQuery(this AzureStorageShareMetadataShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings ResetQuery(this AzureStorageShareMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings SetVerbose(this AzureStorageShareMetadataShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataShowSettings ResetVerbose(this AzureStorageShareMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageShareMetadataUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageShareMetadataUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataUpdateSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetName(this AzureStorageShareMetadataUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataUpdateSettings.Name"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings ResetName(this AzureStorageShareMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataUpdateSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetMetadata(this AzureStorageShareMetadataUpdateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageShareMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings ClearMetadata(this AzureStorageShareMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageShareMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings AddMetadatum(this AzureStorageShareMetadataUpdateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageShareMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings RemoveMetadatum(this AzureStorageShareMetadataUpdateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageShareMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetMetadatum(this AzureStorageShareMetadataUpdateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetTimeout(this AzureStorageShareMetadataUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings ResetTimeout(this AzureStorageShareMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetAccountKey(this AzureStorageShareMetadataUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings ResetAccountKey(this AzureStorageShareMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetAccountName(this AzureStorageShareMetadataUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings ResetAccountName(this AzureStorageShareMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetConnectionString(this AzureStorageShareMetadataUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings ResetConnectionString(this AzureStorageShareMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetSasToken(this AzureStorageShareMetadataUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings ResetSasToken(this AzureStorageShareMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetDebug(this AzureStorageShareMetadataUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings ResetDebug(this AzureStorageShareMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetHelp(this AzureStorageShareMetadataUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings ResetHelp(this AzureStorageShareMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetOutput(this AzureStorageShareMetadataUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings ResetOutput(this AzureStorageShareMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetQuery(this AzureStorageShareMetadataUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings ResetQuery(this AzureStorageShareMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageShareMetadataUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings SetVerbose(this AzureStorageShareMetadataUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageShareMetadataUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageShareMetadataUpdateSettings ResetVerbose(this AzureStorageShareMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageSharePolicyCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageSharePolicyCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetName(this AzureStorageSharePolicyCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetName(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetShareName(this AzureStorageSharePolicyCreateSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetShareName(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetExpiry(this AzureStorageSharePolicyCreateSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetExpiry(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.Permissions"/>.</em></p><p>Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetPermissions(this AzureStorageSharePolicyCreateSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.Permissions"/>.</em></p><p>Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetPermissions(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetStart(this AzureStorageSharePolicyCreateSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetStart(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetAccountKey(this AzureStorageSharePolicyCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetAccountKey(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetAccountName(this AzureStorageSharePolicyCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetAccountName(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetConnectionString(this AzureStorageSharePolicyCreateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetConnectionString(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetSasToken(this AzureStorageSharePolicyCreateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetSasToken(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetDebug(this AzureStorageSharePolicyCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetDebug(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetHelp(this AzureStorageSharePolicyCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetHelp(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetOutput(this AzureStorageSharePolicyCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetOutput(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetQuery(this AzureStorageSharePolicyCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetQuery(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings SetVerbose(this AzureStorageSharePolicyCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyCreateSettings ResetVerbose(this AzureStorageSharePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageSharePolicyDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageSharePolicyDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyDeleteSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings SetName(this AzureStorageSharePolicyDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyDeleteSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings ResetName(this AzureStorageSharePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyDeleteSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings SetShareName(this AzureStorageSharePolicyDeleteSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyDeleteSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings ResetShareName(this AzureStorageSharePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings SetAccountKey(this AzureStorageSharePolicyDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings ResetAccountKey(this AzureStorageSharePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings SetAccountName(this AzureStorageSharePolicyDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings ResetAccountName(this AzureStorageSharePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings SetConnectionString(this AzureStorageSharePolicyDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings ResetConnectionString(this AzureStorageSharePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings SetSasToken(this AzureStorageSharePolicyDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings ResetSasToken(this AzureStorageSharePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings SetDebug(this AzureStorageSharePolicyDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings ResetDebug(this AzureStorageSharePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings SetHelp(this AzureStorageSharePolicyDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings ResetHelp(this AzureStorageSharePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings SetOutput(this AzureStorageSharePolicyDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings ResetOutput(this AzureStorageSharePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings SetQuery(this AzureStorageSharePolicyDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings ResetQuery(this AzureStorageSharePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings SetVerbose(this AzureStorageSharePolicyDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyDeleteSettings ResetVerbose(this AzureStorageSharePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageSharePolicyListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageSharePolicyListSettingsExtensions
    {
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyListSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings SetShareName(this AzureStorageSharePolicyListSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyListSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings ResetShareName(this AzureStorageSharePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings SetAccountKey(this AzureStorageSharePolicyListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings ResetAccountKey(this AzureStorageSharePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings SetAccountName(this AzureStorageSharePolicyListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings ResetAccountName(this AzureStorageSharePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings SetConnectionString(this AzureStorageSharePolicyListSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings ResetConnectionString(this AzureStorageSharePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings SetSasToken(this AzureStorageSharePolicyListSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings ResetSasToken(this AzureStorageSharePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings SetDebug(this AzureStorageSharePolicyListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings ResetDebug(this AzureStorageSharePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings SetHelp(this AzureStorageSharePolicyListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings ResetHelp(this AzureStorageSharePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings SetOutput(this AzureStorageSharePolicyListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings ResetOutput(this AzureStorageSharePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings SetQuery(this AzureStorageSharePolicyListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings ResetQuery(this AzureStorageSharePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings SetVerbose(this AzureStorageSharePolicyListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyListSettings ResetVerbose(this AzureStorageSharePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageSharePolicyShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageSharePolicyShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyShowSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings SetName(this AzureStorageSharePolicyShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyShowSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings ResetName(this AzureStorageSharePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyShowSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings SetShareName(this AzureStorageSharePolicyShowSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyShowSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings ResetShareName(this AzureStorageSharePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings SetAccountKey(this AzureStorageSharePolicyShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings ResetAccountKey(this AzureStorageSharePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings SetAccountName(this AzureStorageSharePolicyShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings ResetAccountName(this AzureStorageSharePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings SetConnectionString(this AzureStorageSharePolicyShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings ResetConnectionString(this AzureStorageSharePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings SetSasToken(this AzureStorageSharePolicyShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings ResetSasToken(this AzureStorageSharePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings SetDebug(this AzureStorageSharePolicyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings ResetDebug(this AzureStorageSharePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings SetHelp(this AzureStorageSharePolicyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings ResetHelp(this AzureStorageSharePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings SetOutput(this AzureStorageSharePolicyShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings ResetOutput(this AzureStorageSharePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings SetQuery(this AzureStorageSharePolicyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings ResetQuery(this AzureStorageSharePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings SetVerbose(this AzureStorageSharePolicyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyShowSettings ResetVerbose(this AzureStorageSharePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageSharePolicyUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageSharePolicyUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetName(this AzureStorageSharePolicyUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetName(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetShareName(this AzureStorageSharePolicyUpdateSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetShareName(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetExpiry(this AzureStorageSharePolicyUpdateSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetExpiry(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.Permissions"/>.</em></p><p>Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetPermissions(this AzureStorageSharePolicyUpdateSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.Permissions"/>.</em></p><p>Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetPermissions(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetStart(this AzureStorageSharePolicyUpdateSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetStart(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetAccountKey(this AzureStorageSharePolicyUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetAccountKey(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetAccountName(this AzureStorageSharePolicyUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetAccountName(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetConnectionString(this AzureStorageSharePolicyUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetConnectionString(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetSasToken(this AzureStorageSharePolicyUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetSasToken(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetDebug(this AzureStorageSharePolicyUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetDebug(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetHelp(this AzureStorageSharePolicyUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetHelp(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetOutput(this AzureStorageSharePolicyUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetOutput(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetQuery(this AzureStorageSharePolicyUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetQuery(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageSharePolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings SetVerbose(this AzureStorageSharePolicyUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageSharePolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageSharePolicyUpdateSettings ResetVerbose(this AzureStorageSharePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageDirectoryMetadataShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageDirectoryMetadataShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetName(this AzureStorageDirectoryMetadataShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetName(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetShareName(this AzureStorageDirectoryMetadataShowSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetShareName(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetSnapshot(this AzureStorageDirectoryMetadataShowSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.Snapshot"/>.</em></p><p>A string that represents the snapshot version, if applicable.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetSnapshot(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetTimeout(this AzureStorageDirectoryMetadataShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetTimeout(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetAccountKey(this AzureStorageDirectoryMetadataShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetAccountKey(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetAccountName(this AzureStorageDirectoryMetadataShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetAccountName(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetConnectionString(this AzureStorageDirectoryMetadataShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetConnectionString(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetSasToken(this AzureStorageDirectoryMetadataShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetSasToken(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetDebug(this AzureStorageDirectoryMetadataShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetDebug(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetHelp(this AzureStorageDirectoryMetadataShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetHelp(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetOutput(this AzureStorageDirectoryMetadataShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetOutput(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetQuery(this AzureStorageDirectoryMetadataShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetQuery(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings SetVerbose(this AzureStorageDirectoryMetadataShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataShowSettings ResetVerbose(this AzureStorageDirectoryMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageDirectoryMetadataUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageDirectoryMetadataUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetName(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Name"/>.</em></p><p>The directory name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ResetName(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ShareName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetShareName(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string shareName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = shareName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataUpdateSettings.ShareName"/>.</em></p><p>The file share name.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ResetShareName(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShareName = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetMetadata(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageDirectoryMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ClearMetadata(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageDirectoryMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings AddMetadatum(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageDirectoryMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings RemoveMetadatum(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageDirectoryMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetMetadatum(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetTimeout(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ResetTimeout(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetAccountKey(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ResetAccountKey(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetAccountName(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ResetAccountName(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetConnectionString(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ResetConnectionString(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetSasToken(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ResetSasToken(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetDebug(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ResetDebug(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetHelp(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ResetHelp(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetOutput(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ResetOutput(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetQuery(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ResetQuery(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings SetVerbose(this AzureStorageDirectoryMetadataUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageDirectoryMetadataUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageDirectoryMetadataUpdateSettings ResetVerbose(this AzureStorageDirectoryMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountKeysListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountKeysListSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysListSettings.AccountName"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings SetAccountName(this AzureStorageAccountKeysListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysListSettings.AccountName"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings ResetAccountName(this AzureStorageAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings SetResourceGroup(this AzureStorageAccountKeysListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings ResetResourceGroup(this AzureStorageAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings SetDebug(this AzureStorageAccountKeysListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings ResetDebug(this AzureStorageAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings SetHelp(this AzureStorageAccountKeysListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings ResetHelp(this AzureStorageAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings SetOutput(this AzureStorageAccountKeysListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings ResetOutput(this AzureStorageAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings SetQuery(this AzureStorageAccountKeysListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings ResetQuery(this AzureStorageAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings SetVerbose(this AzureStorageAccountKeysListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysListSettings ResetVerbose(this AzureStorageAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountKeysRenewSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountKeysRenewSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysRenewSettings.AccountName"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings SetAccountName(this AzureStorageAccountKeysRenewSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysRenewSettings.AccountName"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings ResetAccountName(this AzureStorageAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Key
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysRenewSettings.Key"/>.</em></p><p>The key to regenerate.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings SetKey(this AzureStorageAccountKeysRenewSettings toolSettings, StorageAccountKey key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysRenewSettings.Key"/>.</em></p><p>The key to regenerate.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings ResetKey(this AzureStorageAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysRenewSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings SetResourceGroup(this AzureStorageAccountKeysRenewSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysRenewSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings ResetResourceGroup(this AzureStorageAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysRenewSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings SetDebug(this AzureStorageAccountKeysRenewSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysRenewSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings ResetDebug(this AzureStorageAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysRenewSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings SetHelp(this AzureStorageAccountKeysRenewSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysRenewSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings ResetHelp(this AzureStorageAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysRenewSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings SetOutput(this AzureStorageAccountKeysRenewSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysRenewSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings ResetOutput(this AzureStorageAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysRenewSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings SetQuery(this AzureStorageAccountKeysRenewSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysRenewSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings ResetQuery(this AzureStorageAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountKeysRenewSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings SetVerbose(this AzureStorageAccountKeysRenewSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountKeysRenewSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountKeysRenewSettings ResetVerbose(this AzureStorageAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountNetworkRuleAddSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountNetworkRuleAddSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleAddSettings.AccountName"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings SetAccountName(this AzureStorageAccountNetworkRuleAddSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleAddSettings.AccountName"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings ResetAccountName(this AzureStorageAccountNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Action
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleAddSettings.Action"/>.</em></p><p>The action of virtual network rule.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings SetAction(this AzureStorageAccountNetworkRuleAddSettings toolSettings, string action)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Action = action;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleAddSettings.Action"/>.</em></p><p>The action of virtual network rule.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings ResetAction(this AzureStorageAccountNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Action = null;
            return toolSettings;
        }
        #endregion
        #region IpAddress
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleAddSettings.IpAddress"/>.</em></p><p>IPv4 address or CIDR range.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings SetIpAddress(this AzureStorageAccountNetworkRuleAddSettings toolSettings, string ipAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpAddress = ipAddress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleAddSettings.IpAddress"/>.</em></p><p>IPv4 address or CIDR range.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings ResetIpAddress(this AzureStorageAccountNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpAddress = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleAddSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings SetResourceGroup(this AzureStorageAccountNetworkRuleAddSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleAddSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings ResetResourceGroup(this AzureStorageAccountNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subnet
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleAddSettings.Subnet"/>.</em></p><p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings SetSubnet(this AzureStorageAccountNetworkRuleAddSettings toolSettings, string subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = subnet;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleAddSettings.Subnet"/>.</em></p><p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings ResetSubnet(this AzureStorageAccountNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = null;
            return toolSettings;
        }
        #endregion
        #region VnetName
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleAddSettings.VnetName"/>.</em></p><p>Name of a virtual network.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings SetVnetName(this AzureStorageAccountNetworkRuleAddSettings toolSettings, string vnetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = vnetName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleAddSettings.VnetName"/>.</em></p><p>Name of a virtual network.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings ResetVnetName(this AzureStorageAccountNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleAddSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings SetDebug(this AzureStorageAccountNetworkRuleAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleAddSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings ResetDebug(this AzureStorageAccountNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleAddSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings SetHelp(this AzureStorageAccountNetworkRuleAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleAddSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings ResetHelp(this AzureStorageAccountNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleAddSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings SetOutput(this AzureStorageAccountNetworkRuleAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleAddSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings ResetOutput(this AzureStorageAccountNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleAddSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings SetQuery(this AzureStorageAccountNetworkRuleAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleAddSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings ResetQuery(this AzureStorageAccountNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleAddSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings SetVerbose(this AzureStorageAccountNetworkRuleAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleAddSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleAddSettings ResetVerbose(this AzureStorageAccountNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountNetworkRuleListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountNetworkRuleListSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleListSettings.AccountName"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings SetAccountName(this AzureStorageAccountNetworkRuleListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleListSettings.AccountName"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings ResetAccountName(this AzureStorageAccountNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings SetResourceGroup(this AzureStorageAccountNetworkRuleListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings ResetResourceGroup(this AzureStorageAccountNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings SetDebug(this AzureStorageAccountNetworkRuleListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings ResetDebug(this AzureStorageAccountNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings SetHelp(this AzureStorageAccountNetworkRuleListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings ResetHelp(this AzureStorageAccountNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings SetOutput(this AzureStorageAccountNetworkRuleListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings ResetOutput(this AzureStorageAccountNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings SetQuery(this AzureStorageAccountNetworkRuleListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings ResetQuery(this AzureStorageAccountNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings SetVerbose(this AzureStorageAccountNetworkRuleListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleListSettings ResetVerbose(this AzureStorageAccountNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageAccountNetworkRuleRemoveSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageAccountNetworkRuleRemoveSettingsExtensions
    {
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.AccountName"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings SetAccountName(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.AccountName"/>.</em></p><p>The storage account name.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings ResetAccountName(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IpAddress
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.IpAddress"/>.</em></p><p>IPv4 address or CIDR range.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings SetIpAddress(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings, string ipAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpAddress = ipAddress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.IpAddress"/>.</em></p><p>IPv4 address or CIDR range.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings ResetIpAddress(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpAddress = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings SetResourceGroup(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings ResetResourceGroup(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subnet
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.Subnet"/>.</em></p><p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings SetSubnet(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings, string subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = subnet;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.Subnet"/>.</em></p><p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings ResetSubnet(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = null;
            return toolSettings;
        }
        #endregion
        #region VnetName
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.VnetName"/>.</em></p><p>Name of a virtual network.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings SetVnetName(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings, string vnetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = vnetName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.VnetName"/>.</em></p><p>Name of a virtual network.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings ResetVnetName(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings SetDebug(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings ResetDebug(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings SetHelp(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings ResetHelp(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings SetOutput(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings ResetOutput(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings SetQuery(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings ResetQuery(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings SetVerbose(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageAccountNetworkRuleRemoveSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageAccountNetworkRuleRemoveSettings ResetVerbose(this AzureStorageAccountNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueueMetadataShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueueMetadataShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataShowSettings.Name"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings SetName(this AzureStorageQueueMetadataShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataShowSettings.Name"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings ResetName(this AzureStorageQueueMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings SetAuthMode(this AzureStorageQueueMetadataShowSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings ResetAuthMode(this AzureStorageQueueMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings SetTimeout(this AzureStorageQueueMetadataShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings ResetTimeout(this AzureStorageQueueMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings SetAccountKey(this AzureStorageQueueMetadataShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings ResetAccountKey(this AzureStorageQueueMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings SetAccountName(this AzureStorageQueueMetadataShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings ResetAccountName(this AzureStorageQueueMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings SetConnectionString(this AzureStorageQueueMetadataShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings ResetConnectionString(this AzureStorageQueueMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings SetSasToken(this AzureStorageQueueMetadataShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings ResetSasToken(this AzureStorageQueueMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings SetDebug(this AzureStorageQueueMetadataShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings ResetDebug(this AzureStorageQueueMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings SetHelp(this AzureStorageQueueMetadataShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings ResetHelp(this AzureStorageQueueMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings SetOutput(this AzureStorageQueueMetadataShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings ResetOutput(this AzureStorageQueueMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings SetQuery(this AzureStorageQueueMetadataShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings ResetQuery(this AzureStorageQueueMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings SetVerbose(this AzureStorageQueueMetadataShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataShowSettings ResetVerbose(this AzureStorageQueueMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueueMetadataUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueueMetadataUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.Name"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetName(this AzureStorageQueueMetadataUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataUpdateSettings.Name"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ResetName(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetAuthMode(this AzureStorageQueueMetadataUpdateSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ResetAuthMode(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetMetadata(this AzureStorageQueueMetadataUpdateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageQueueMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ClearMetadata(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageQueueMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings AddMetadatum(this AzureStorageQueueMetadataUpdateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageQueueMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings RemoveMetadatum(this AzureStorageQueueMetadataUpdateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageQueueMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetMetadatum(this AzureStorageQueueMetadataUpdateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetTimeout(this AzureStorageQueueMetadataUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ResetTimeout(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetAccountKey(this AzureStorageQueueMetadataUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ResetAccountKey(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetAccountName(this AzureStorageQueueMetadataUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ResetAccountName(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetConnectionString(this AzureStorageQueueMetadataUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ResetConnectionString(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetSasToken(this AzureStorageQueueMetadataUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ResetSasToken(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetDebug(this AzureStorageQueueMetadataUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ResetDebug(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetHelp(this AzureStorageQueueMetadataUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ResetHelp(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetOutput(this AzureStorageQueueMetadataUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ResetOutput(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetQuery(this AzureStorageQueueMetadataUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ResetQuery(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueueMetadataUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings SetVerbose(this AzureStorageQueueMetadataUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueueMetadataUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueueMetadataUpdateSettings ResetVerbose(this AzureStorageQueueMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueuePolicyCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueuePolicyCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetName(this AzureStorageQueuePolicyCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetName(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region QueueName
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetQueueName(this AzureStorageQueuePolicyCreateSettings toolSettings, string queueName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = queueName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetQueueName(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetAuthMode(this AzureStorageQueuePolicyCreateSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetAuthMode(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetExpiry(this AzureStorageQueuePolicyCreateSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetExpiry(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.Permissions"/>.</em></p><p>Allowed values: (a)dd (p)rocess (r)ead (u)pdate. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetPermissions(this AzureStorageQueuePolicyCreateSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.Permissions"/>.</em></p><p>Allowed values: (a)dd (p)rocess (r)ead (u)pdate. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetPermissions(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetStart(this AzureStorageQueuePolicyCreateSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetStart(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetAccountKey(this AzureStorageQueuePolicyCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetAccountKey(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetAccountName(this AzureStorageQueuePolicyCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetAccountName(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetConnectionString(this AzureStorageQueuePolicyCreateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetConnectionString(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetSasToken(this AzureStorageQueuePolicyCreateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetSasToken(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetDebug(this AzureStorageQueuePolicyCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetDebug(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetHelp(this AzureStorageQueuePolicyCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetHelp(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetOutput(this AzureStorageQueuePolicyCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetOutput(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetQuery(this AzureStorageQueuePolicyCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetQuery(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings SetVerbose(this AzureStorageQueuePolicyCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyCreateSettings ResetVerbose(this AzureStorageQueuePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueuePolicyDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueuePolicyDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyDeleteSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings SetName(this AzureStorageQueuePolicyDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyDeleteSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings ResetName(this AzureStorageQueuePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region QueueName
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyDeleteSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings SetQueueName(this AzureStorageQueuePolicyDeleteSettings toolSettings, string queueName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = queueName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyDeleteSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings ResetQueueName(this AzureStorageQueuePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyDeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings SetAuthMode(this AzureStorageQueuePolicyDeleteSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyDeleteSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings ResetAuthMode(this AzureStorageQueuePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings SetAccountKey(this AzureStorageQueuePolicyDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings ResetAccountKey(this AzureStorageQueuePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings SetAccountName(this AzureStorageQueuePolicyDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings ResetAccountName(this AzureStorageQueuePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings SetConnectionString(this AzureStorageQueuePolicyDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings ResetConnectionString(this AzureStorageQueuePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings SetSasToken(this AzureStorageQueuePolicyDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings ResetSasToken(this AzureStorageQueuePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings SetDebug(this AzureStorageQueuePolicyDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings ResetDebug(this AzureStorageQueuePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings SetHelp(this AzureStorageQueuePolicyDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings ResetHelp(this AzureStorageQueuePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings SetOutput(this AzureStorageQueuePolicyDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings ResetOutput(this AzureStorageQueuePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings SetQuery(this AzureStorageQueuePolicyDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings ResetQuery(this AzureStorageQueuePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings SetVerbose(this AzureStorageQueuePolicyDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyDeleteSettings ResetVerbose(this AzureStorageQueuePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueuePolicyListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueuePolicyListSettingsExtensions
    {
        #region QueueName
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyListSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings SetQueueName(this AzureStorageQueuePolicyListSettings toolSettings, string queueName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = queueName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyListSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings ResetQueueName(this AzureStorageQueuePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyListSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings SetAuthMode(this AzureStorageQueuePolicyListSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyListSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings ResetAuthMode(this AzureStorageQueuePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings SetAccountKey(this AzureStorageQueuePolicyListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings ResetAccountKey(this AzureStorageQueuePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings SetAccountName(this AzureStorageQueuePolicyListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings ResetAccountName(this AzureStorageQueuePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings SetConnectionString(this AzureStorageQueuePolicyListSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings ResetConnectionString(this AzureStorageQueuePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings SetSasToken(this AzureStorageQueuePolicyListSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings ResetSasToken(this AzureStorageQueuePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings SetDebug(this AzureStorageQueuePolicyListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings ResetDebug(this AzureStorageQueuePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings SetHelp(this AzureStorageQueuePolicyListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings ResetHelp(this AzureStorageQueuePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings SetOutput(this AzureStorageQueuePolicyListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings ResetOutput(this AzureStorageQueuePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings SetQuery(this AzureStorageQueuePolicyListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings ResetQuery(this AzureStorageQueuePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings SetVerbose(this AzureStorageQueuePolicyListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyListSettings ResetVerbose(this AzureStorageQueuePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueuePolicyShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueuePolicyShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyShowSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings SetName(this AzureStorageQueuePolicyShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyShowSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings ResetName(this AzureStorageQueuePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region QueueName
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyShowSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings SetQueueName(this AzureStorageQueuePolicyShowSettings toolSettings, string queueName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = queueName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyShowSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings ResetQueueName(this AzureStorageQueuePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings SetAuthMode(this AzureStorageQueuePolicyShowSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings ResetAuthMode(this AzureStorageQueuePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings SetAccountKey(this AzureStorageQueuePolicyShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings ResetAccountKey(this AzureStorageQueuePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings SetAccountName(this AzureStorageQueuePolicyShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings ResetAccountName(this AzureStorageQueuePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings SetConnectionString(this AzureStorageQueuePolicyShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings ResetConnectionString(this AzureStorageQueuePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings SetSasToken(this AzureStorageQueuePolicyShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings ResetSasToken(this AzureStorageQueuePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings SetDebug(this AzureStorageQueuePolicyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings ResetDebug(this AzureStorageQueuePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings SetHelp(this AzureStorageQueuePolicyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings ResetHelp(this AzureStorageQueuePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings SetOutput(this AzureStorageQueuePolicyShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings ResetOutput(this AzureStorageQueuePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings SetQuery(this AzureStorageQueuePolicyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings ResetQuery(this AzureStorageQueuePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings SetVerbose(this AzureStorageQueuePolicyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyShowSettings ResetVerbose(this AzureStorageQueuePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageQueuePolicyUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageQueuePolicyUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetName(this AzureStorageQueuePolicyUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetName(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region QueueName
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetQueueName(this AzureStorageQueuePolicyUpdateSettings toolSettings, string queueName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = queueName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.QueueName"/>.</em></p><p>The queue name.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetQueueName(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueueName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetAuthMode(this AzureStorageQueuePolicyUpdateSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetAuthMode(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetExpiry(this AzureStorageQueuePolicyUpdateSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetExpiry(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.Permissions"/>.</em></p><p>Allowed values: (a)dd (p)rocess (r)ead (u)pdate. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetPermissions(this AzureStorageQueuePolicyUpdateSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.Permissions"/>.</em></p><p>Allowed values: (a)dd (p)rocess (r)ead (u)pdate. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetPermissions(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetStart(this AzureStorageQueuePolicyUpdateSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetStart(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetAccountKey(this AzureStorageQueuePolicyUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetAccountKey(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetAccountName(this AzureStorageQueuePolicyUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetAccountName(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetConnectionString(this AzureStorageQueuePolicyUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetConnectionString(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetSasToken(this AzureStorageQueuePolicyUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetSasToken(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetDebug(this AzureStorageQueuePolicyUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetDebug(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetHelp(this AzureStorageQueuePolicyUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetHelp(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetOutput(this AzureStorageQueuePolicyUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetOutput(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetQuery(this AzureStorageQueuePolicyUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetQuery(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageQueuePolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings SetVerbose(this AzureStorageQueuePolicyUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageQueuePolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageQueuePolicyUpdateSettings ResetVerbose(this AzureStorageQueuePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageTablePolicyCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageTablePolicyCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetName(this AzureStorageTablePolicyCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetName(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region TableName
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.TableName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetTableName(this AzureStorageTablePolicyCreateSettings toolSettings, string tableName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = tableName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.TableName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetTableName(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetExpiry(this AzureStorageTablePolicyCreateSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetExpiry(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.Permissions"/>.</em></p><p>Allowed values: (r)ead/query (a)dd (u)pdate (d)elete. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetPermissions(this AzureStorageTablePolicyCreateSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.Permissions"/>.</em></p><p>Allowed values: (r)ead/query (a)dd (u)pdate (d)elete. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetPermissions(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetStart(this AzureStorageTablePolicyCreateSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetStart(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetAccountKey(this AzureStorageTablePolicyCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetAccountKey(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetAccountName(this AzureStorageTablePolicyCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetAccountName(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetConnectionString(this AzureStorageTablePolicyCreateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetConnectionString(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetSasToken(this AzureStorageTablePolicyCreateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetSasToken(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetDebug(this AzureStorageTablePolicyCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetDebug(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetHelp(this AzureStorageTablePolicyCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetHelp(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetOutput(this AzureStorageTablePolicyCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetOutput(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetQuery(this AzureStorageTablePolicyCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetQuery(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings SetVerbose(this AzureStorageTablePolicyCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyCreateSettings ResetVerbose(this AzureStorageTablePolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageTablePolicyDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageTablePolicyDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyDeleteSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings SetName(this AzureStorageTablePolicyDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyDeleteSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings ResetName(this AzureStorageTablePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region TableName
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyDeleteSettings.TableName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings SetTableName(this AzureStorageTablePolicyDeleteSettings toolSettings, string tableName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = tableName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyDeleteSettings.TableName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings ResetTableName(this AzureStorageTablePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings SetAccountKey(this AzureStorageTablePolicyDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyDeleteSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings ResetAccountKey(this AzureStorageTablePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings SetAccountName(this AzureStorageTablePolicyDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyDeleteSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings ResetAccountName(this AzureStorageTablePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings SetConnectionString(this AzureStorageTablePolicyDeleteSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyDeleteSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings ResetConnectionString(this AzureStorageTablePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings SetSasToken(this AzureStorageTablePolicyDeleteSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyDeleteSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings ResetSasToken(this AzureStorageTablePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings SetDebug(this AzureStorageTablePolicyDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings ResetDebug(this AzureStorageTablePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings SetHelp(this AzureStorageTablePolicyDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings ResetHelp(this AzureStorageTablePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings SetOutput(this AzureStorageTablePolicyDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings ResetOutput(this AzureStorageTablePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings SetQuery(this AzureStorageTablePolicyDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings ResetQuery(this AzureStorageTablePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings SetVerbose(this AzureStorageTablePolicyDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyDeleteSettings ResetVerbose(this AzureStorageTablePolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageTablePolicyListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageTablePolicyListSettingsExtensions
    {
        #region TableName
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyListSettings.TableName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings SetTableName(this AzureStorageTablePolicyListSettings toolSettings, string tableName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = tableName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyListSettings.TableName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings ResetTableName(this AzureStorageTablePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings SetAccountKey(this AzureStorageTablePolicyListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyListSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings ResetAccountKey(this AzureStorageTablePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings SetAccountName(this AzureStorageTablePolicyListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyListSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings ResetAccountName(this AzureStorageTablePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings SetConnectionString(this AzureStorageTablePolicyListSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyListSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings ResetConnectionString(this AzureStorageTablePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings SetSasToken(this AzureStorageTablePolicyListSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyListSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings ResetSasToken(this AzureStorageTablePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings SetDebug(this AzureStorageTablePolicyListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings ResetDebug(this AzureStorageTablePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings SetHelp(this AzureStorageTablePolicyListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings ResetHelp(this AzureStorageTablePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings SetOutput(this AzureStorageTablePolicyListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings ResetOutput(this AzureStorageTablePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings SetQuery(this AzureStorageTablePolicyListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings ResetQuery(this AzureStorageTablePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings SetVerbose(this AzureStorageTablePolicyListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyListSettings ResetVerbose(this AzureStorageTablePolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageTablePolicyShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageTablePolicyShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyShowSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings SetName(this AzureStorageTablePolicyShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyShowSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings ResetName(this AzureStorageTablePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region TableName
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyShowSettings.TableName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings SetTableName(this AzureStorageTablePolicyShowSettings toolSettings, string tableName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = tableName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyShowSettings.TableName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings ResetTableName(this AzureStorageTablePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings SetAccountKey(this AzureStorageTablePolicyShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings ResetAccountKey(this AzureStorageTablePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings SetAccountName(this AzureStorageTablePolicyShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings ResetAccountName(this AzureStorageTablePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings SetConnectionString(this AzureStorageTablePolicyShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings ResetConnectionString(this AzureStorageTablePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings SetSasToken(this AzureStorageTablePolicyShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings ResetSasToken(this AzureStorageTablePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings SetDebug(this AzureStorageTablePolicyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings ResetDebug(this AzureStorageTablePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings SetHelp(this AzureStorageTablePolicyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings ResetHelp(this AzureStorageTablePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings SetOutput(this AzureStorageTablePolicyShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings ResetOutput(this AzureStorageTablePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings SetQuery(this AzureStorageTablePolicyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings ResetQuery(this AzureStorageTablePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings SetVerbose(this AzureStorageTablePolicyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyShowSettings ResetVerbose(this AzureStorageTablePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageTablePolicyUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageTablePolicyUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetName(this AzureStorageTablePolicyUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.Name"/>.</em></p><p>The stored access policy name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetName(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region TableName
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.TableName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetTableName(this AzureStorageTablePolicyUpdateSettings toolSettings, string tableName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = tableName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.TableName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetTableName(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TableName = null;
            return toolSettings;
        }
        #endregion
        #region Expiry
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetExpiry(this AzureStorageTablePolicyUpdateSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.Expiry"/>.</em></p><p>Expiration UTC datetime in (Y-m-d'T'H:M:S'Z').</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetExpiry(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.Permissions"/>.</em></p><p>Allowed values: (r)ead/query (a)dd (u)pdate (d)elete. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetPermissions(this AzureStorageTablePolicyUpdateSettings toolSettings, string permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.Permissions"/>.</em></p><p>Allowed values: (r)ead/query (a)dd (u)pdate (d)elete. Can be combined.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetPermissions(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region Start
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetStart(this AzureStorageTablePolicyUpdateSettings toolSettings, string start)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = start;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.Start"/>.</em></p><p>Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetStart(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Start = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetAccountKey(this AzureStorageTablePolicyUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetAccountKey(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetAccountName(this AzureStorageTablePolicyUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetAccountName(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetConnectionString(this AzureStorageTablePolicyUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetConnectionString(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetSasToken(this AzureStorageTablePolicyUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetSasToken(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetDebug(this AzureStorageTablePolicyUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetDebug(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetHelp(this AzureStorageTablePolicyUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetHelp(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetOutput(this AzureStorageTablePolicyUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetOutput(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetQuery(this AzureStorageTablePolicyUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetQuery(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageTablePolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings SetVerbose(this AzureStorageTablePolicyUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageTablePolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageTablePolicyUpdateSettings ResetVerbose(this AzureStorageTablePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobLeaseAcquireSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobLeaseAcquireSettingsExtensions
    {
        #region BlobName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.BlobName"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetBlobName(this AzureStorageBlobLeaseAcquireSettings toolSettings, string blobName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobName = blobName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.BlobName"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetBlobName(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetContainerName(this AzureStorageBlobLeaseAcquireSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetContainerName(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetAuthMode(this AzureStorageBlobLeaseAcquireSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetAuthMode(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseDuration
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.LeaseDuration"/>.</em></p><p>Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change. Default is -1 (infinite lease).</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetLeaseDuration(this AzureStorageBlobLeaseAcquireSettings toolSettings, string leaseDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseDuration = leaseDuration;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.LeaseDuration"/>.</em></p><p>Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change. Default is -1 (infinite lease).</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetLeaseDuration(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseDuration = null;
            return toolSettings;
        }
        #endregion
        #region ProposedLeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.ProposedLeaseId"/>.</em></p><p>Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetProposedLeaseId(this AzureStorageBlobLeaseAcquireSettings toolSettings, string proposedLeaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProposedLeaseId = proposedLeaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.ProposedLeaseId"/>.</em></p><p>Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetProposedLeaseId(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProposedLeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetTimeout(this AzureStorageBlobLeaseAcquireSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetTimeout(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetIfMatch(this AzureStorageBlobLeaseAcquireSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetIfMatch(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetIfModifiedSince(this AzureStorageBlobLeaseAcquireSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetIfModifiedSince(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetIfNoneMatch(this AzureStorageBlobLeaseAcquireSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetIfNoneMatch(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetIfUnmodifiedSince(this AzureStorageBlobLeaseAcquireSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetIfUnmodifiedSince(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetAccountKey(this AzureStorageBlobLeaseAcquireSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetAccountKey(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetAccountName(this AzureStorageBlobLeaseAcquireSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetAccountName(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetConnectionString(this AzureStorageBlobLeaseAcquireSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetConnectionString(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetSasToken(this AzureStorageBlobLeaseAcquireSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetSasToken(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetDebug(this AzureStorageBlobLeaseAcquireSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetDebug(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetHelp(this AzureStorageBlobLeaseAcquireSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetHelp(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetOutput(this AzureStorageBlobLeaseAcquireSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetOutput(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetQuery(this AzureStorageBlobLeaseAcquireSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetQuery(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseAcquireSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings SetVerbose(this AzureStorageBlobLeaseAcquireSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseAcquireSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseAcquireSettings ResetVerbose(this AzureStorageBlobLeaseAcquireSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobLeaseBreakSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobLeaseBreakSettingsExtensions
    {
        #region BlobName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.BlobName"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetBlobName(this AzureStorageBlobLeaseBreakSettings toolSettings, string blobName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobName = blobName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.BlobName"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetBlobName(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetContainerName(this AzureStorageBlobLeaseBreakSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetContainerName(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetAuthMode(this AzureStorageBlobLeaseBreakSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetAuthMode(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseBreakPeriod
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.LeaseBreakPeriod"/>.</em></p><p>For a break operation, this is the proposed duration of seconds that the lease should continue before it is broken, between 0 and 60 seconds. This break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease will not be available before the break period has expired, but the lease may be held for longer than the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks immediately.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetLeaseBreakPeriod(this AzureStorageBlobLeaseBreakSettings toolSettings, string leaseBreakPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseBreakPeriod = leaseBreakPeriod;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.LeaseBreakPeriod"/>.</em></p><p>For a break operation, this is the proposed duration of seconds that the lease should continue before it is broken, between 0 and 60 seconds. This break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease will not be available before the break period has expired, but the lease may be held for longer than the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks immediately.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetLeaseBreakPeriod(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseBreakPeriod = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetTimeout(this AzureStorageBlobLeaseBreakSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetTimeout(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetIfMatch(this AzureStorageBlobLeaseBreakSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetIfMatch(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetIfModifiedSince(this AzureStorageBlobLeaseBreakSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetIfModifiedSince(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetIfNoneMatch(this AzureStorageBlobLeaseBreakSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetIfNoneMatch(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetIfUnmodifiedSince(this AzureStorageBlobLeaseBreakSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetIfUnmodifiedSince(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetAccountKey(this AzureStorageBlobLeaseBreakSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetAccountKey(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetAccountName(this AzureStorageBlobLeaseBreakSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetAccountName(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetConnectionString(this AzureStorageBlobLeaseBreakSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetConnectionString(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetSasToken(this AzureStorageBlobLeaseBreakSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetSasToken(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetDebug(this AzureStorageBlobLeaseBreakSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetDebug(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetHelp(this AzureStorageBlobLeaseBreakSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetHelp(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetOutput(this AzureStorageBlobLeaseBreakSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetOutput(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetQuery(this AzureStorageBlobLeaseBreakSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetQuery(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseBreakSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings SetVerbose(this AzureStorageBlobLeaseBreakSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseBreakSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseBreakSettings ResetVerbose(this AzureStorageBlobLeaseBreakSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobLeaseChangeSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobLeaseChangeSettingsExtensions
    {
        #region BlobName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.BlobName"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetBlobName(this AzureStorageBlobLeaseChangeSettings toolSettings, string blobName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobName = blobName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.BlobName"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetBlobName(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetContainerName(this AzureStorageBlobLeaseChangeSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetContainerName(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetLeaseId(this AzureStorageBlobLeaseChangeSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetLeaseId(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region ProposedLeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.ProposedLeaseId"/>.</em></p><p>Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetProposedLeaseId(this AzureStorageBlobLeaseChangeSettings toolSettings, string proposedLeaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProposedLeaseId = proposedLeaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.ProposedLeaseId"/>.</em></p><p>Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetProposedLeaseId(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProposedLeaseId = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetAuthMode(this AzureStorageBlobLeaseChangeSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetAuthMode(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetTimeout(this AzureStorageBlobLeaseChangeSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetTimeout(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetIfMatch(this AzureStorageBlobLeaseChangeSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetIfMatch(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetIfModifiedSince(this AzureStorageBlobLeaseChangeSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetIfModifiedSince(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetIfNoneMatch(this AzureStorageBlobLeaseChangeSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetIfNoneMatch(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetIfUnmodifiedSince(this AzureStorageBlobLeaseChangeSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetIfUnmodifiedSince(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetAccountKey(this AzureStorageBlobLeaseChangeSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetAccountKey(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetAccountName(this AzureStorageBlobLeaseChangeSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetAccountName(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetConnectionString(this AzureStorageBlobLeaseChangeSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetConnectionString(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetSasToken(this AzureStorageBlobLeaseChangeSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetSasToken(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetDebug(this AzureStorageBlobLeaseChangeSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetDebug(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetHelp(this AzureStorageBlobLeaseChangeSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetHelp(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetOutput(this AzureStorageBlobLeaseChangeSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetOutput(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetQuery(this AzureStorageBlobLeaseChangeSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetQuery(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseChangeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings SetVerbose(this AzureStorageBlobLeaseChangeSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseChangeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseChangeSettings ResetVerbose(this AzureStorageBlobLeaseChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobLeaseReleaseSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobLeaseReleaseSettingsExtensions
    {
        #region BlobName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.BlobName"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetBlobName(this AzureStorageBlobLeaseReleaseSettings toolSettings, string blobName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobName = blobName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.BlobName"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetBlobName(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetContainerName(this AzureStorageBlobLeaseReleaseSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetContainerName(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.LeaseId"/>.</em></p><p>Lease ID for active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetLeaseId(this AzureStorageBlobLeaseReleaseSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.LeaseId"/>.</em></p><p>Lease ID for active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetLeaseId(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetAuthMode(this AzureStorageBlobLeaseReleaseSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetAuthMode(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetTimeout(this AzureStorageBlobLeaseReleaseSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetTimeout(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetIfMatch(this AzureStorageBlobLeaseReleaseSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetIfMatch(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetIfModifiedSince(this AzureStorageBlobLeaseReleaseSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetIfModifiedSince(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetIfNoneMatch(this AzureStorageBlobLeaseReleaseSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetIfNoneMatch(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetIfUnmodifiedSince(this AzureStorageBlobLeaseReleaseSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetIfUnmodifiedSince(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetAccountKey(this AzureStorageBlobLeaseReleaseSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetAccountKey(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetAccountName(this AzureStorageBlobLeaseReleaseSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetAccountName(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetConnectionString(this AzureStorageBlobLeaseReleaseSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetConnectionString(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetSasToken(this AzureStorageBlobLeaseReleaseSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetSasToken(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetDebug(this AzureStorageBlobLeaseReleaseSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetDebug(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetHelp(this AzureStorageBlobLeaseReleaseSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetHelp(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetOutput(this AzureStorageBlobLeaseReleaseSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetOutput(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetQuery(this AzureStorageBlobLeaseReleaseSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetQuery(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseReleaseSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings SetVerbose(this AzureStorageBlobLeaseReleaseSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseReleaseSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseReleaseSettings ResetVerbose(this AzureStorageBlobLeaseReleaseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobLeaseRenewSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobLeaseRenewSettingsExtensions
    {
        #region BlobName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.BlobName"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetBlobName(this AzureStorageBlobLeaseRenewSettings toolSettings, string blobName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobName = blobName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.BlobName"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetBlobName(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetContainerName(this AzureStorageBlobLeaseRenewSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetContainerName(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.LeaseId"/>.</em></p><p>Lease ID for active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetLeaseId(this AzureStorageBlobLeaseRenewSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.LeaseId"/>.</em></p><p>Lease ID for active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetLeaseId(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetAuthMode(this AzureStorageBlobLeaseRenewSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetAuthMode(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetTimeout(this AzureStorageBlobLeaseRenewSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetTimeout(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetIfMatch(this AzureStorageBlobLeaseRenewSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetIfMatch(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetIfModifiedSince(this AzureStorageBlobLeaseRenewSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetIfModifiedSince(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetIfNoneMatch(this AzureStorageBlobLeaseRenewSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetIfNoneMatch(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetIfUnmodifiedSince(this AzureStorageBlobLeaseRenewSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetIfUnmodifiedSince(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetAccountKey(this AzureStorageBlobLeaseRenewSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetAccountKey(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetAccountName(this AzureStorageBlobLeaseRenewSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetAccountName(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetConnectionString(this AzureStorageBlobLeaseRenewSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetConnectionString(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetSasToken(this AzureStorageBlobLeaseRenewSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetSasToken(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetDebug(this AzureStorageBlobLeaseRenewSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetDebug(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetHelp(this AzureStorageBlobLeaseRenewSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetHelp(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetOutput(this AzureStorageBlobLeaseRenewSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetOutput(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetQuery(this AzureStorageBlobLeaseRenewSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetQuery(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobLeaseRenewSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings SetVerbose(this AzureStorageBlobLeaseRenewSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobLeaseRenewSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobLeaseRenewSettings ResetVerbose(this AzureStorageBlobLeaseRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobMetadataShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobMetadataShowSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetContainerName(this AzureStorageBlobMetadataShowSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetContainerName(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetName(this AzureStorageBlobMetadataShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetName(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetAuthMode(this AzureStorageBlobMetadataShowSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetAuthMode(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetLeaseId(this AzureStorageBlobMetadataShowSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetLeaseId(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Snapshot
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.Snapshot"/>.</em></p><p>The snapshot parameter is an opaque value that, when present, specifies the blob snapshot to retrieve.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetSnapshot(this AzureStorageBlobMetadataShowSettings toolSettings, string snapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = snapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.Snapshot"/>.</em></p><p>The snapshot parameter is an opaque value that, when present, specifies the blob snapshot to retrieve.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetSnapshot(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Snapshot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetTimeout(this AzureStorageBlobMetadataShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetTimeout(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetIfMatch(this AzureStorageBlobMetadataShowSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetIfMatch(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetIfModifiedSince(this AzureStorageBlobMetadataShowSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetIfModifiedSince(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetIfNoneMatch(this AzureStorageBlobMetadataShowSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetIfNoneMatch(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetIfUnmodifiedSince(this AzureStorageBlobMetadataShowSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetIfUnmodifiedSince(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetAccountKey(this AzureStorageBlobMetadataShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetAccountKey(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetAccountName(this AzureStorageBlobMetadataShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetAccountName(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetConnectionString(this AzureStorageBlobMetadataShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetConnectionString(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetSasToken(this AzureStorageBlobMetadataShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetSasToken(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetDebug(this AzureStorageBlobMetadataShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetDebug(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetHelp(this AzureStorageBlobMetadataShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetHelp(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetOutput(this AzureStorageBlobMetadataShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetOutput(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetQuery(this AzureStorageBlobMetadataShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetQuery(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings SetVerbose(this AzureStorageBlobMetadataShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataShowSettings ResetVerbose(this AzureStorageBlobMetadataShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobMetadataUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobMetadataUpdateSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetContainerName(this AzureStorageBlobMetadataUpdateSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetContainerName(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetName(this AzureStorageBlobMetadataUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetName(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetAuthMode(this AzureStorageBlobMetadataUpdateSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetAuthMode(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetLeaseId(this AzureStorageBlobMetadataUpdateSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.LeaseId"/>.</em></p><p>Required if the blob has an active lease.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetLeaseId(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetMetadata(this AzureStorageBlobMetadataUpdateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageBlobMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ClearMetadata(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageBlobMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings AddMetadatum(this AzureStorageBlobMetadataUpdateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageBlobMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings RemoveMetadatum(this AzureStorageBlobMetadataUpdateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageBlobMetadataUpdateSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetMetadatum(this AzureStorageBlobMetadataUpdateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetTimeout(this AzureStorageBlobMetadataUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetTimeout(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetIfMatch(this AzureStorageBlobMetadataUpdateSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.IfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag matches the value specified.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetIfMatch(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetIfModifiedSince(this AzureStorageBlobMetadataUpdateSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.IfModifiedSince"/>.</em></p><p>Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetIfModifiedSince(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetIfNoneMatch(this AzureStorageBlobMetadataUpdateSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.IfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetIfNoneMatch(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetIfUnmodifiedSince(this AzureStorageBlobMetadataUpdateSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.IfUnmodifiedSince"/>.</em></p><p>Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z').</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetIfUnmodifiedSince(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetAccountKey(this AzureStorageBlobMetadataUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetAccountKey(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetAccountName(this AzureStorageBlobMetadataUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetAccountName(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetConnectionString(this AzureStorageBlobMetadataUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetConnectionString(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetSasToken(this AzureStorageBlobMetadataUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetSasToken(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetDebug(this AzureStorageBlobMetadataUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetDebug(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetHelp(this AzureStorageBlobMetadataUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetHelp(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetOutput(this AzureStorageBlobMetadataUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetOutput(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetQuery(this AzureStorageBlobMetadataUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetQuery(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobMetadataUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings SetVerbose(this AzureStorageBlobMetadataUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobMetadataUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobMetadataUpdateSettings ResetVerbose(this AzureStorageBlobMetadataUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobCopyCancelSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobCopyCancelSettingsExtensions
    {
        #region CopyId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.CopyId"/>.</em></p><p>Copy identifier provided in the copy.id of the original copy_blob operation.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetCopyId(this AzureStorageBlobCopyCancelSettings toolSettings, string copyId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CopyId = copyId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.CopyId"/>.</em></p><p>Copy identifier provided in the copy.id of the original copy_blob operation.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetCopyId(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CopyId = null;
            return toolSettings;
        }
        #endregion
        #region DestinationBlob
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.DestinationBlob"/>.</em></p><p>Name of the destination blob. If the exists, it will be overwritten.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetDestinationBlob(this AzureStorageBlobCopyCancelSettings toolSettings, string destinationBlob)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationBlob = destinationBlob;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.DestinationBlob"/>.</em></p><p>Name of the destination blob. If the exists, it will be overwritten.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetDestinationBlob(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationBlob = null;
            return toolSettings;
        }
        #endregion
        #region DestinationContainer
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.DestinationContainer"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetDestinationContainer(this AzureStorageBlobCopyCancelSettings toolSettings, string destinationContainer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationContainer = destinationContainer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.DestinationContainer"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetDestinationContainer(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationContainer = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetAuthMode(this AzureStorageBlobCopyCancelSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetAuthMode(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.LeaseId"/>.</em></p><p>Required if the destination blob has an active infinite lease.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetLeaseId(this AzureStorageBlobCopyCancelSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.LeaseId"/>.</em></p><p>Required if the destination blob has an active infinite lease.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetLeaseId(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetTimeout(this AzureStorageBlobCopyCancelSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetTimeout(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetAccountKey(this AzureStorageBlobCopyCancelSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetAccountKey(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetAccountName(this AzureStorageBlobCopyCancelSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetAccountName(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetConnectionString(this AzureStorageBlobCopyCancelSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetConnectionString(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetSasToken(this AzureStorageBlobCopyCancelSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetSasToken(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetDebug(this AzureStorageBlobCopyCancelSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetDebug(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetHelp(this AzureStorageBlobCopyCancelSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetHelp(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetOutput(this AzureStorageBlobCopyCancelSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetOutput(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetQuery(this AzureStorageBlobCopyCancelSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetQuery(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyCancelSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings SetVerbose(this AzureStorageBlobCopyCancelSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyCancelSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyCancelSettings ResetVerbose(this AzureStorageBlobCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobCopyStartSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobCopyStartSettingsExtensions
    {
        #region DestinationBlob
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.DestinationBlob"/>.</em></p><p>Name of the destination blob. If the exists, it will be overwritten.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetDestinationBlob(this AzureStorageBlobCopyStartSettings toolSettings, string destinationBlob)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationBlob = destinationBlob;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.DestinationBlob"/>.</em></p><p>Name of the destination blob. If the exists, it will be overwritten.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetDestinationBlob(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationBlob = null;
            return toolSettings;
        }
        #endregion
        #region DestinationContainer
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.DestinationContainer"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetDestinationContainer(this AzureStorageBlobCopyStartSettings toolSettings, string destinationContainer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationContainer = destinationContainer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.DestinationContainer"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetDestinationContainer(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationContainer = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetAuthMode(this AzureStorageBlobCopyStartSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetAuthMode(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region DestinationLeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.DestinationLeaseId"/>.</em></p><p>The lease ID specified for this header must match the lease ID of the destination blob. If the request does not include the lease ID or it is not valid, the operation fails with status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetDestinationLeaseId(this AzureStorageBlobCopyStartSettings toolSettings, string destinationLeaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationLeaseId = destinationLeaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.DestinationLeaseId"/>.</em></p><p>The lease ID specified for this header must match the lease ID of the destination blob. If the request does not include the lease ID or it is not valid, the operation fails with status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetDestinationLeaseId(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationLeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetMetadata(this AzureStorageBlobCopyStartSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageBlobCopyStartSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ClearMetadata(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageBlobCopyStartSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings AddMetadatum(this AzureStorageBlobCopyStartSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageBlobCopyStartSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings RemoveMetadatum(this AzureStorageBlobCopyStartSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageBlobCopyStartSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetMetadatum(this AzureStorageBlobCopyStartSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetTimeout(this AzureStorageBlobCopyStartSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetTimeout(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region SourceAccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceAccountKey"/>.</em></p><p>The storage account key of the source blob.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceAccountKey(this AzureStorageBlobCopyStartSettings toolSettings, string sourceAccountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountKey = sourceAccountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceAccountKey"/>.</em></p><p>The storage account key of the source blob.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceAccountKey(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountKey = null;
            return toolSettings;
        }
        #endregion
        #region SourceAccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceAccountName"/>.</em></p><p>The storage account name of the source blob.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceAccountName(this AzureStorageBlobCopyStartSettings toolSettings, string sourceAccountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountName = sourceAccountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceAccountName"/>.</em></p><p>The storage account name of the source blob.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceAccountName(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountName = null;
            return toolSettings;
        }
        #endregion
        #region SourceBlob
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceBlob"/>.</em></p><p>The blob name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceBlob(this AzureStorageBlobCopyStartSettings toolSettings, string sourceBlob)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceBlob = sourceBlob;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceBlob"/>.</em></p><p>The blob name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceBlob(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceBlob = null;
            return toolSettings;
        }
        #endregion
        #region SourceContainer
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceContainer"/>.</em></p><p>The container name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceContainer(this AzureStorageBlobCopyStartSettings toolSettings, string sourceContainer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceContainer = sourceContainer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceContainer"/>.</em></p><p>The container name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceContainer(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceContainer = null;
            return toolSettings;
        }
        #endregion
        #region SourceLeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceLeaseId"/>.</em></p><p>Specify this to perform the Copy Blob operation only if the lease ID given matches the active lease ID of the source blob.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceLeaseId(this AzureStorageBlobCopyStartSettings toolSettings, string sourceLeaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceLeaseId = sourceLeaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceLeaseId"/>.</em></p><p>Specify this to perform the Copy Blob operation only if the lease ID given matches the active lease ID of the source blob.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceLeaseId(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceLeaseId = null;
            return toolSettings;
        }
        #endregion
        #region SourcePath
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourcePath"/>.</em></p><p>The file path for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourcePath(this AzureStorageBlobCopyStartSettings toolSettings, string sourcePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourcePath = sourcePath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourcePath"/>.</em></p><p>The file path for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourcePath(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourcePath = null;
            return toolSettings;
        }
        #endregion
        #region SourceSas
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceSas"/>.</em></p><p>The shared access signature for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceSas(this AzureStorageBlobCopyStartSettings toolSettings, string sourceSas)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSas = sourceSas;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceSas"/>.</em></p><p>The shared access signature for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceSas(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSas = null;
            return toolSettings;
        }
        #endregion
        #region SourceShare
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceShare"/>.</em></p><p>The share name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceShare(this AzureStorageBlobCopyStartSettings toolSettings, string sourceShare)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceShare = sourceShare;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceShare"/>.</em></p><p>The share name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceShare(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceShare = null;
            return toolSettings;
        }
        #endregion
        #region SourceSnapshot
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceSnapshot"/>.</em></p><p>The blob snapshot for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceSnapshot(this AzureStorageBlobCopyStartSettings toolSettings, string sourceSnapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSnapshot = sourceSnapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceSnapshot"/>.</em></p><p>The blob snapshot for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceSnapshot(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSnapshot = null;
            return toolSettings;
        }
        #endregion
        #region SourceUri
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceUri"/>.</em></p><p>A URL of up to 2 KB in length that specifies an Azure file or blob. The value should be URL-encoded as it would appear in a request URI. If the source is in another account, the source must either be public or must be authenticated via a shared access signature. If the source is public, no authentication is required. Examples: <a href="https://myaccount.blob.core.windows.net/mycontainer/myblob">https://myaccount.blob.core.windows.net/mycontainer/myblob</a> <a href="https://myaccount.blob.core.windows.net/mycontainer/myblob">https://myaccount.blob.core.windows.net/mycontainer/myblob</a>?snapshot=&lt;DateTime&gt; <a href="https://otheraccount.blob.core.windows.net/mycontainer/myblob?sastoken">https://otheraccount.blob.core.windows.net/mycontainer/myblob?sastoken</a>.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceUri(this AzureStorageBlobCopyStartSettings toolSettings, string sourceUri)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceUri = sourceUri;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceUri"/>.</em></p><p>A URL of up to 2 KB in length that specifies an Azure file or blob. The value should be URL-encoded as it would appear in a request URI. If the source is in another account, the source must either be public or must be authenticated via a shared access signature. If the source is public, no authentication is required. Examples: <a href="https://myaccount.blob.core.windows.net/mycontainer/myblob">https://myaccount.blob.core.windows.net/mycontainer/myblob</a> <a href="https://myaccount.blob.core.windows.net/mycontainer/myblob">https://myaccount.blob.core.windows.net/mycontainer/myblob</a>?snapshot=&lt;DateTime&gt; <a href="https://otheraccount.blob.core.windows.net/mycontainer/myblob?sastoken">https://otheraccount.blob.core.windows.net/mycontainer/myblob?sastoken</a>.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceUri(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceUri = null;
            return toolSettings;
        }
        #endregion
        #region DestinationIfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.DestinationIfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value matches the ETag value for an existing destination blob. If the ETag for the destination blob does not match the ETag specified for If-Match, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetDestinationIfMatch(this AzureStorageBlobCopyStartSettings toolSettings, string destinationIfMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfMatch = destinationIfMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.DestinationIfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value matches the ETag value for an existing destination blob. If the ETag for the destination blob does not match the ETag specified for If-Match, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetDestinationIfMatch(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfMatch = null;
            return toolSettings;
        }
        #endregion
        #region DestinationIfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.DestinationIfModifiedSince"/>.</em></p><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has been modified since the specified date/time. If the destination blob has not been modified, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetDestinationIfModifiedSince(this AzureStorageBlobCopyStartSettings toolSettings, string destinationIfModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfModifiedSince = destinationIfModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.DestinationIfModifiedSince"/>.</em></p><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has been modified since the specified date/time. If the destination blob has not been modified, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetDestinationIfModifiedSince(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region DestinationIfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.DestinationIfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value does not match the ETag value for the destination blob. Specify the wildcard character (*) to perform the operation only if the destination blob does not exist. If the specified condition isn't met, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetDestinationIfNoneMatch(this AzureStorageBlobCopyStartSettings toolSettings, string destinationIfNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfNoneMatch = destinationIfNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.DestinationIfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value does not match the ETag value for the destination blob. Specify the wildcard character (*) to perform the operation only if the destination blob does not exist. If the specified condition isn't met, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetDestinationIfNoneMatch(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region DestinationIfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.DestinationIfUnmodifiedSince"/>.</em></p><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has not been modified since the specified date/time. If the destination blob has been modified, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetDestinationIfUnmodifiedSince(this AzureStorageBlobCopyStartSettings toolSettings, string destinationIfUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfUnmodifiedSince = destinationIfUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.DestinationIfUnmodifiedSince"/>.</em></p><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has not been modified since the specified date/time. If the destination blob has been modified, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetDestinationIfUnmodifiedSince(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region SourceIfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceIfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this conditional header to copy the source blob only if its ETag matches the value specified. If the ETag values do not match, the Blob service returns status code 412 (Precondition Failed). This header cannot be specified if the source is an Azure File.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceIfMatch(this AzureStorageBlobCopyStartSettings toolSettings, string sourceIfMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceIfMatch = sourceIfMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceIfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this conditional header to copy the source blob only if its ETag matches the value specified. If the ETag values do not match, the Blob service returns status code 412 (Precondition Failed). This header cannot be specified if the source is an Azure File.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceIfMatch(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceIfMatch = null;
            return toolSettings;
        }
        #endregion
        #region SourceIfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceIfModifiedSince"/>.</em></p><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the source blob has been modified since the specified date/time.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceIfModifiedSince(this AzureStorageBlobCopyStartSettings toolSettings, string sourceIfModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceIfModifiedSince = sourceIfModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceIfModifiedSince"/>.</em></p><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the source blob has been modified since the specified date/time.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceIfModifiedSince(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceIfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region SourceIfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceIfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this conditional header to copy the blob only if its ETag does not match the value specified. If the values are identical, the Blob service returns status code 412 (Precondition Failed). This header cannot be specified if the source is an Azure File.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceIfNoneMatch(this AzureStorageBlobCopyStartSettings toolSettings, string sourceIfNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceIfNoneMatch = sourceIfNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceIfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify this conditional header to copy the blob only if its ETag does not match the value specified. If the values are identical, the Blob service returns status code 412 (Precondition Failed). This header cannot be specified if the source is an Azure File.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceIfNoneMatch(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceIfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region SourceIfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SourceIfUnmodifiedSince"/>.</em></p><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the source blob has not been modified since the specified date/time.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSourceIfUnmodifiedSince(this AzureStorageBlobCopyStartSettings toolSettings, string sourceIfUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceIfUnmodifiedSince = sourceIfUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SourceIfUnmodifiedSince"/>.</em></p><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the source blob has not been modified since the specified date/time.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSourceIfUnmodifiedSince(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceIfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetAccountKey(this AzureStorageBlobCopyStartSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetAccountKey(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetAccountName(this AzureStorageBlobCopyStartSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetAccountName(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetConnectionString(this AzureStorageBlobCopyStartSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetConnectionString(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetSasToken(this AzureStorageBlobCopyStartSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetSasToken(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetDebug(this AzureStorageBlobCopyStartSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetDebug(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetHelp(this AzureStorageBlobCopyStartSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetHelp(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetOutput(this AzureStorageBlobCopyStartSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetOutput(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetQuery(this AzureStorageBlobCopyStartSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetQuery(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings SetVerbose(this AzureStorageBlobCopyStartSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartSettings ResetVerbose(this AzureStorageBlobCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobCopyStartBatchSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobCopyStartBatchSettingsExtensions
    {
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetAuthMode(this AzureStorageBlobCopyStartBatchSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetAuthMode(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region DestinationContainer
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.DestinationContainer"/>.</em></p><p>The blob container where the selected source files or blobs will be copied to.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetDestinationContainer(this AzureStorageBlobCopyStartBatchSettings toolSettings, string destinationContainer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationContainer = destinationContainer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.DestinationContainer"/>.</em></p><p>The blob container where the selected source files or blobs will be copied to.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetDestinationContainer(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationContainer = null;
            return toolSettings;
        }
        #endregion
        #region DestinationPath
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.DestinationPath"/>.</em></p><p>The destination path that will be appended to the blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetDestinationPath(this AzureStorageBlobCopyStartBatchSettings toolSettings, string destinationPath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationPath = destinationPath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.DestinationPath"/>.</em></p><p>The destination path that will be appended to the blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetDestinationPath(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationPath = null;
            return toolSettings;
        }
        #endregion
        #region Dryrun
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.Dryrun"/>.</em></p><p>List the files or blobs to be uploaded. No actual data transfer will occur.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetDryrun(this AzureStorageBlobCopyStartBatchSettings toolSettings, string dryrun)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = dryrun;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.Dryrun"/>.</em></p><p>List the files or blobs to be uploaded. No actual data transfer will occur.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetDryrun(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dryrun = null;
            return toolSettings;
        }
        #endregion
        #region Pattern
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.Pattern"/>.</em></p><p>The pattern used for globbing files or blobs in the source. The supported patterns are '*', '?', '[seq', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetPattern(this AzureStorageBlobCopyStartBatchSettings toolSettings, string pattern)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = pattern;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.Pattern"/>.</em></p><p>The pattern used for globbing files or blobs in the source. The supported patterns are '*', '?', '[seq', and '[!seq]'.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetPattern(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pattern = null;
            return toolSettings;
        }
        #endregion
        #region SourceAccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.SourceAccountKey"/>.</em></p><p>The account key for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetSourceAccountKey(this AzureStorageBlobCopyStartBatchSettings toolSettings, string sourceAccountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountKey = sourceAccountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.SourceAccountKey"/>.</em></p><p>The account key for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetSourceAccountKey(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountKey = null;
            return toolSettings;
        }
        #endregion
        #region SourceAccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.SourceAccountName"/>.</em></p><p>The source storage account from which the files or blobs are copied to the destination. If omitted, the source account is used.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetSourceAccountName(this AzureStorageBlobCopyStartBatchSettings toolSettings, string sourceAccountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountName = sourceAccountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.SourceAccountName"/>.</em></p><p>The source storage account from which the files or blobs are copied to the destination. If omitted, the source account is used.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetSourceAccountName(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountName = null;
            return toolSettings;
        }
        #endregion
        #region SourceContainer
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.SourceContainer"/>.</em></p><p>The source container from which blobs are copied.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetSourceContainer(this AzureStorageBlobCopyStartBatchSettings toolSettings, string sourceContainer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceContainer = sourceContainer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.SourceContainer"/>.</em></p><p>The source container from which blobs are copied.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetSourceContainer(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceContainer = null;
            return toolSettings;
        }
        #endregion
        #region SourceSas
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.SourceSas"/>.</em></p><p>The shared access signature for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetSourceSas(this AzureStorageBlobCopyStartBatchSettings toolSettings, string sourceSas)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSas = sourceSas;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.SourceSas"/>.</em></p><p>The shared access signature for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetSourceSas(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSas = null;
            return toolSettings;
        }
        #endregion
        #region SourceShare
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.SourceShare"/>.</em></p><p>The source share from which files are copied.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetSourceShare(this AzureStorageBlobCopyStartBatchSettings toolSettings, string sourceShare)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceShare = sourceShare;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.SourceShare"/>.</em></p><p>The source share from which files are copied.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetSourceShare(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceShare = null;
            return toolSettings;
        }
        #endregion
        #region SourceUri
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.SourceUri"/>.</em></p><p>A URI specifying a file share or blob container from which the files or blobs are copied.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetSourceUri(this AzureStorageBlobCopyStartBatchSettings toolSettings, string sourceUri)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceUri = sourceUri;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.SourceUri"/>.</em></p><p>A URI specifying a file share or blob container from which the files or blobs are copied.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetSourceUri(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceUri = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetAccountKey(this AzureStorageBlobCopyStartBatchSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetAccountKey(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetAccountName(this AzureStorageBlobCopyStartBatchSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetAccountName(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetConnectionString(this AzureStorageBlobCopyStartBatchSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetConnectionString(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetSasToken(this AzureStorageBlobCopyStartBatchSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetSasToken(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetDebug(this AzureStorageBlobCopyStartBatchSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetDebug(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetHelp(this AzureStorageBlobCopyStartBatchSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetHelp(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetOutput(this AzureStorageBlobCopyStartBatchSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetOutput(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetQuery(this AzureStorageBlobCopyStartBatchSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetQuery(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobCopyStartBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings SetVerbose(this AzureStorageBlobCopyStartBatchSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobCopyStartBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobCopyStartBatchSettings ResetVerbose(this AzureStorageBlobCopyStartBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobServicePropertiesShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobServicePropertiesShowSettingsExtensions
    {
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings SetAuthMode(this AzureStorageBlobServicePropertiesShowSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings ResetAuthMode(this AzureStorageBlobServicePropertiesShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings SetTimeout(this AzureStorageBlobServicePropertiesShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings ResetTimeout(this AzureStorageBlobServicePropertiesShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings SetAccountKey(this AzureStorageBlobServicePropertiesShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings ResetAccountKey(this AzureStorageBlobServicePropertiesShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings SetAccountName(this AzureStorageBlobServicePropertiesShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings ResetAccountName(this AzureStorageBlobServicePropertiesShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings SetConnectionString(this AzureStorageBlobServicePropertiesShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings ResetConnectionString(this AzureStorageBlobServicePropertiesShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings SetSasToken(this AzureStorageBlobServicePropertiesShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings ResetSasToken(this AzureStorageBlobServicePropertiesShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings SetDebug(this AzureStorageBlobServicePropertiesShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings ResetDebug(this AzureStorageBlobServicePropertiesShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings SetHelp(this AzureStorageBlobServicePropertiesShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings ResetHelp(this AzureStorageBlobServicePropertiesShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings SetOutput(this AzureStorageBlobServicePropertiesShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings ResetOutput(this AzureStorageBlobServicePropertiesShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings SetQuery(this AzureStorageBlobServicePropertiesShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings ResetQuery(this AzureStorageBlobServicePropertiesShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings SetVerbose(this AzureStorageBlobServicePropertiesShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesShowSettings ResetVerbose(this AzureStorageBlobServicePropertiesShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobIncrementalCopyCancelSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobIncrementalCopyCancelSettingsExtensions
    {
        #region ContainerName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetContainerName(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string containerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = containerName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.ContainerName"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetContainerName(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerName = null;
            return toolSettings;
        }
        #endregion
        #region CopyId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.CopyId"/>.</em></p><p>Copy identifier provided in the copy.id of the original copy_blob operation.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetCopyId(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string copyId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CopyId = copyId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.CopyId"/>.</em></p><p>Copy identifier provided in the copy.id of the original copy_blob operation.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetCopyId(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CopyId = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetName(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Name"/>.</em></p><p>The blob name.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetName(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetAuthMode(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetAuthMode(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region LeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.LeaseId"/>.</em></p><p>Required if the destination blob has an active infinite lease.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetLeaseId(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string leaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = leaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.LeaseId"/>.</em></p><p>Required if the destination blob has an active infinite lease.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetLeaseId(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetTimeout(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetTimeout(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetAccountKey(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetAccountKey(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetAccountName(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetAccountName(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetConnectionString(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetConnectionString(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetSasToken(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetSasToken(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetDebug(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetDebug(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetHelp(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetHelp(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetOutput(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetOutput(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetQuery(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetQuery(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings SetVerbose(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyCancelSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyCancelSettings ResetVerbose(this AzureStorageBlobIncrementalCopyCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobIncrementalCopyStartSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobIncrementalCopyStartSettingsExtensions
    {
        #region DestinationBlob
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationBlob"/>.</em></p><p>Name of the destination blob. If the exists, it will be overwritten.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetDestinationBlob(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string destinationBlob)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationBlob = destinationBlob;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationBlob"/>.</em></p><p>Name of the destination blob. If the exists, it will be overwritten.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetDestinationBlob(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationBlob = null;
            return toolSettings;
        }
        #endregion
        #region DestinationContainer
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationContainer"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetDestinationContainer(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string destinationContainer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationContainer = destinationContainer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationContainer"/>.</em></p><p>The container name.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetDestinationContainer(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationContainer = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetAuthMode(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetAuthMode(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region DestinationLeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationLeaseId"/>.</em></p><p>The lease ID specified for this header must match the lease ID of the destination blob. If the request does not include the lease ID or it is not valid, the operation fails with status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetDestinationLeaseId(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string destinationLeaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationLeaseId = destinationLeaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationLeaseId"/>.</em></p><p>The lease ID specified for this header must match the lease ID of the destination blob. If the request does not include the lease ID or it is not valid, the operation fails with status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetDestinationLeaseId(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationLeaseId = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Metadata"/> to a new dictionary.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetMetadata(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureStorageBlobIncrementalCopyStartSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ClearMetadata(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureStorageBlobIncrementalCopyStartSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings AddMetadatum(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureStorageBlobIncrementalCopyStartSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings RemoveMetadatum(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureStorageBlobIncrementalCopyStartSettings.Metadata"/>.</em></p><p>Metadata in space-separated key=value pairs. This overwrites any existing metadata.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetMetadatum(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetTimeout(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetTimeout(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region SourceAccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceAccountKey"/>.</em></p><p>The storage account key of the source blob.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetSourceAccountKey(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string sourceAccountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountKey = sourceAccountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceAccountKey"/>.</em></p><p>The storage account key of the source blob.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetSourceAccountKey(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountKey = null;
            return toolSettings;
        }
        #endregion
        #region SourceAccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceAccountName"/>.</em></p><p>The storage account name of the source blob.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetSourceAccountName(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string sourceAccountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountName = sourceAccountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceAccountName"/>.</em></p><p>The storage account name of the source blob.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetSourceAccountName(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceAccountName = null;
            return toolSettings;
        }
        #endregion
        #region SourceBlob
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceBlob"/>.</em></p><p>The blob name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetSourceBlob(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string sourceBlob)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceBlob = sourceBlob;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceBlob"/>.</em></p><p>The blob name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetSourceBlob(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceBlob = null;
            return toolSettings;
        }
        #endregion
        #region SourceContainer
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceContainer"/>.</em></p><p>The container name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetSourceContainer(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string sourceContainer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceContainer = sourceContainer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceContainer"/>.</em></p><p>The container name for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetSourceContainer(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceContainer = null;
            return toolSettings;
        }
        #endregion
        #region SourceLeaseId
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceLeaseId"/>.</em></p><p>Specify this to perform the Copy Blob operation only if the lease ID given matches the active lease ID of the source blob.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetSourceLeaseId(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string sourceLeaseId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceLeaseId = sourceLeaseId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceLeaseId"/>.</em></p><p>Specify this to perform the Copy Blob operation only if the lease ID given matches the active lease ID of the source blob.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetSourceLeaseId(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceLeaseId = null;
            return toolSettings;
        }
        #endregion
        #region SourceSas
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceSas"/>.</em></p><p>The shared access signature for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetSourceSas(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string sourceSas)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSas = sourceSas;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceSas"/>.</em></p><p>The shared access signature for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetSourceSas(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSas = null;
            return toolSettings;
        }
        #endregion
        #region SourceSnapshot
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceSnapshot"/>.</em></p><p>The blob snapshot for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetSourceSnapshot(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string sourceSnapshot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSnapshot = sourceSnapshot;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceSnapshot"/>.</em></p><p>The blob snapshot for the source storage account.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetSourceSnapshot(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceSnapshot = null;
            return toolSettings;
        }
        #endregion
        #region SourceUri
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceUri"/>.</em></p><p>A URL of up to 2 KB in length that specifies an Azure page blob. The value should be URL-encoded as it would appear in a request URI. The copy source must be a snapshot and include a valid SAS token or be public. Example: <a href="https://myaccount.blob.core.windows.net/mycontainer/myblob">https://myaccount.blob.core.windows.net/mycontainer/myblob</a>?snapshot=&amp;lt;DateTime&amp;gt;&amp;amp;sastoken.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetSourceUri(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string sourceUri)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceUri = sourceUri;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SourceUri"/>.</em></p><p>A URL of up to 2 KB in length that specifies an Azure page blob. The value should be URL-encoded as it would appear in a request URI. The copy source must be a snapshot and include a valid SAS token or be public. Example: <a href="https://myaccount.blob.core.windows.net/mycontainer/myblob">https://myaccount.blob.core.windows.net/mycontainer/myblob</a>?snapshot=&amp;lt;DateTime&amp;gt;&amp;amp;sastoken.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetSourceUri(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceUri = null;
            return toolSettings;
        }
        #endregion
        #region DestinationIfMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationIfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value matches the ETag value for an existing destination blob. If the ETag for the destination blob does not match the ETag specified for If-Match, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetDestinationIfMatch(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string destinationIfMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfMatch = destinationIfMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationIfMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value matches the ETag value for an existing destination blob. If the ETag for the destination blob does not match the ETag specified for If-Match, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetDestinationIfMatch(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfMatch = null;
            return toolSettings;
        }
        #endregion
        #region DestinationIfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationIfModifiedSince"/>.</em></p><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has been modified since the specified date/time. If the destination blob has not been modified, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetDestinationIfModifiedSince(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string destinationIfModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfModifiedSince = destinationIfModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationIfModifiedSince"/>.</em></p><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has been modified since the specified date/time. If the destination blob has not been modified, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetDestinationIfModifiedSince(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region DestinationIfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationIfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value does not match the ETag value for the destination blob. Specify the wildcard character (*) to perform the operation only if the destination blob does not exist. If the specified condition isn't met, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetDestinationIfNoneMatch(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string destinationIfNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfNoneMatch = destinationIfNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationIfNoneMatch"/>.</em></p><p>An ETag value, or the wildcard character (*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value does not match the ETag value for the destination blob. Specify the wildcard character (*) to perform the operation only if the destination blob does not exist. If the specified condition isn't met, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetDestinationIfNoneMatch(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region DestinationIfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationIfUnmodifiedSince"/>.</em></p><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has not been modified since the specified ate/time. If the destination blob has been modified, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetDestinationIfUnmodifiedSince(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string destinationIfUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfUnmodifiedSince = destinationIfUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.DestinationIfUnmodifiedSince"/>.</em></p><p>A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has not been modified since the specified ate/time. If the destination blob has been modified, the Blob service returns status code 412 (Precondition Failed).</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetDestinationIfUnmodifiedSince(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationIfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetAccountKey(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetAccountKey(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetAccountName(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetAccountName(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetConnectionString(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetConnectionString(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetSasToken(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetSasToken(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetDebug(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetDebug(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetHelp(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetHelp(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetOutput(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetOutput(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetQuery(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetQuery(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings SetVerbose(this AzureStorageBlobIncrementalCopyStartSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobIncrementalCopyStartSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobIncrementalCopyStartSettings ResetVerbose(this AzureStorageBlobIncrementalCopyStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobServicePropertiesDeletePolicyShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobServicePropertiesDeletePolicyShowSettingsExtensions
    {
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings SetAuthMode(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings ResetAuthMode(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings SetTimeout(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.Timeout"/>.</em></p><p>Request timeout in seconds. Applies to each call to the service.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings ResetTimeout(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings SetAccountKey(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings ResetAccountKey(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings SetAccountName(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings ResetAccountName(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings SetConnectionString(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings ResetConnectionString(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings SetSasToken(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings ResetSasToken(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings SetDebug(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings ResetDebug(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings SetHelp(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings ResetHelp(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings SetOutput(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings ResetOutput(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings SetQuery(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings ResetQuery(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings SetVerbose(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyShowSettings ResetVerbose(this AzureStorageBlobServicePropertiesDeletePolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureStorageBlobServicePropertiesDeletePolicyUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureStorageBlobServicePropertiesDeletePolicyUpdateSettingsExtensions
    {
        #region AuthMode
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings SetAuthMode(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings, StorageQueueAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.AuthMode"/>.</em></p><p>The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ResetAuthMode(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region DaysRetained
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.DaysRetained"/>.</em></p><p>Number of days that soft-deleted blob will be retained. Must be in range [1,365].</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings SetDaysRetained(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings, int? daysRetained)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DaysRetained = daysRetained;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.DaysRetained"/>.</em></p><p>Number of days that soft-deleted blob will be retained. Must be in range [1,365].</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ResetDaysRetained(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DaysRetained = null;
            return toolSettings;
        }
        #endregion
        #region Enable
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Enable"/>.</em></p><p>Enables/disables soft-delete.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings SetEnable(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings, bool? enable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enable = enable;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Enable"/>.</em></p><p>Enables/disables soft-delete.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ResetEnable(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enable = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Enable"/>.</em></p><p>Enables/disables soft-delete.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings EnableEnable(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enable = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Enable"/>.</em></p><p>Enables/disables soft-delete.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings DisableEnable(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enable = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Enable"/>.</em></p><p>Enables/disables soft-delete.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ToggleEnable(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Enable = !toolSettings.Enable;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings SetAccountKey(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.AccountKey"/>.</em></p><p>Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ResetAccountKey(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings SetAccountName(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.AccountName"/>.</em></p><p>Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ResetAccountName(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ConnectionString
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings SetConnectionString(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings, string connectionString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.ConnectionString"/>.</em></p><p>Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ResetConnectionString(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }
        #endregion
        #region SasToken
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings SetSasToken(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings, string sasToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = sasToken;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.SasToken"/>.</em></p><p>A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ResetSasToken(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SasToken = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings SetDebug(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ResetDebug(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings SetHelp(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ResetHelp(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings SetOutput(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ResetOutput(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings SetQuery(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ResetQuery(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings SetVerbose(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings ResetVerbose(this AzureStorageBlobServicePropertiesDeletePolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region StorageQueueAuthMode
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageQueueAuthMode : Enumeration
    {
        public static StorageQueueAuthMode key = new StorageQueueAuthMode { Value = "key" };
        public static StorageQueueAuthMode login = new StorageQueueAuthMode { Value = "login" };
    }
    #endregion
    #region StorageCorsAddMethods
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageCorsAddMethods : Enumeration
    {
        public static StorageCorsAddMethods delete = new StorageCorsAddMethods { Value = "delete" };
        public static StorageCorsAddMethods get = new StorageCorsAddMethods { Value = "get" };
        public static StorageCorsAddMethods head = new StorageCorsAddMethods { Value = "head" };
        public static StorageCorsAddMethods merge = new StorageCorsAddMethods { Value = "merge" };
        public static StorageCorsAddMethods options = new StorageCorsAddMethods { Value = "options" };
        public static StorageCorsAddMethods post = new StorageCorsAddMethods { Value = "post" };
        public static StorageCorsAddMethods put = new StorageCorsAddMethods { Value = "put" };
    }
    #endregion
    #region StorageBlobDeleteSnapshots
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageBlobDeleteSnapshots : Enumeration
    {
        public static StorageBlobDeleteSnapshots include = new StorageBlobDeleteSnapshots { Value = "include" };
        public static StorageBlobDeleteSnapshots only = new StorageBlobDeleteSnapshots { Value = "only" };
    }
    #endregion
    #region StorageShareDeleteDeleteSnapshots
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageShareDeleteDeleteSnapshots : Enumeration
    {
        public static StorageShareDeleteDeleteSnapshots include = new StorageShareDeleteDeleteSnapshots { Value = "include" };
    }
    #endregion
    #region StorageBlobSetTierType
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageBlobSetTierType : Enumeration
    {
        public static StorageBlobSetTierType block = new StorageBlobSetTierType { Value = "block" };
        public static StorageBlobSetTierType page = new StorageBlobSetTierType { Value = "page" };
    }
    #endregion
    #region StorageBlobType
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageBlobType : Enumeration
    {
        public static StorageBlobType append = new StorageBlobType { Value = "append" };
        public static StorageBlobType block = new StorageBlobType { Value = "block" };
        public static StorageBlobType page = new StorageBlobType { Value = "page" };
    }
    #endregion
    #region StorageBlobUploadTier
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageBlobUploadTier : Enumeration
    {
        public static StorageBlobUploadTier p10 = new StorageBlobUploadTier { Value = "p10" };
        public static StorageBlobUploadTier p20 = new StorageBlobUploadTier { Value = "p20" };
        public static StorageBlobUploadTier p30 = new StorageBlobUploadTier { Value = "p30" };
        public static StorageBlobUploadTier p4 = new StorageBlobUploadTier { Value = "p4" };
        public static StorageBlobUploadTier p40 = new StorageBlobUploadTier { Value = "p40" };
        public static StorageBlobUploadTier p50 = new StorageBlobUploadTier { Value = "p50" };
        public static StorageBlobUploadTier p6 = new StorageBlobUploadTier { Value = "p6" };
        public static StorageBlobUploadTier p60 = new StorageBlobUploadTier { Value = "p60" };
    }
    #endregion
    #region StorageBlobProtocol
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageBlobProtocol : Enumeration
    {
        public static StorageBlobProtocol http = new StorageBlobProtocol { Value = "http" };
        public static StorageBlobProtocol https = new StorageBlobProtocol { Value = "https" };
    }
    #endregion
    #region StorageAccountAccessTier
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageAccountAccessTier : Enumeration
    {
        public static StorageAccountAccessTier cool = new StorageAccountAccessTier { Value = "cool" };
        public static StorageAccountAccessTier hot = new StorageAccountAccessTier { Value = "hot" };
    }
    #endregion
    #region StorageAccountEncryptionServices
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageAccountEncryptionServices : Enumeration
    {
        public static StorageAccountEncryptionServices blob = new StorageAccountEncryptionServices { Value = "blob" };
        public static StorageAccountEncryptionServices file = new StorageAccountEncryptionServices { Value = "file" };
        public static StorageAccountEncryptionServices queue = new StorageAccountEncryptionServices { Value = "queue" };
        public static StorageAccountEncryptionServices table = new StorageAccountEncryptionServices { Value = "table" };
    }
    #endregion
    #region StorageAccountCreateKind
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageAccountCreateKind : Enumeration
    {
        public static StorageAccountCreateKind blobstorage = new StorageAccountCreateKind { Value = "blobstorage" };
        public static StorageAccountCreateKind storage = new StorageAccountCreateKind { Value = "storage" };
        public static StorageAccountCreateKind storagev2 = new StorageAccountCreateKind { Value = "storagev2" };
    }
    #endregion
    #region StorageAccountSku
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageAccountSku : Enumeration
    {
        public static StorageAccountSku premium_lrs = new StorageAccountSku { Value = "premium_lrs" };
        public static StorageAccountSku standard_grs = new StorageAccountSku { Value = "standard_grs" };
        public static StorageAccountSku standard_lrs = new StorageAccountSku { Value = "standard_lrs" };
        public static StorageAccountSku standard_ragrs = new StorageAccountSku { Value = "standard_ragrs" };
        public static StorageAccountSku standard_zrs = new StorageAccountSku { Value = "standard_zrs" };
    }
    #endregion
    #region StorageAccountBypass
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageAccountBypass : Enumeration
    {
        public static StorageAccountBypass azureservices = new StorageAccountBypass { Value = "azureservices" };
        public static StorageAccountBypass logging = new StorageAccountBypass { Value = "logging" };
        public static StorageAccountBypass metrics = new StorageAccountBypass { Value = "metrics" };
        public static StorageAccountBypass none = new StorageAccountBypass { Value = "none" };
    }
    #endregion
    #region StorageAccountDefaultAction
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageAccountDefaultAction : Enumeration
    {
        public static StorageAccountDefaultAction allow = new StorageAccountDefaultAction { Value = "allow" };
        public static StorageAccountDefaultAction deny = new StorageAccountDefaultAction { Value = "deny" };
    }
    #endregion
    #region StorageAccountKey
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageAccountKey : Enumeration
    {
        public static StorageAccountKey primary = new StorageAccountKey { Value = "primary" };
        public static StorageAccountKey secondary = new StorageAccountKey { Value = "secondary" };
    }
    #endregion
    #region StorageAccountUpdateEncryptionKeySource
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageAccountUpdateEncryptionKeySource : Enumeration
    {
        public static StorageAccountUpdateEncryptionKeySource microsoft_keyvault = new StorageAccountUpdateEncryptionKeySource { Value = "microsoft.keyvault" };
        public static StorageAccountUpdateEncryptionKeySource microsoft_storage = new StorageAccountUpdateEncryptionKeySource { Value = "microsoft.storage" };
    }
    #endregion
    #region StorageEntityInsertIfExists
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageEntityInsertIfExists : Enumeration
    {
        public static StorageEntityInsertIfExists fail = new StorageEntityInsertIfExists { Value = "fail" };
        public static StorageEntityInsertIfExists merge = new StorageEntityInsertIfExists { Value = "merge" };
        public static StorageEntityInsertIfExists replace = new StorageEntityInsertIfExists { Value = "replace" };
    }
    #endregion
    #region StorageEntityQueryAccept
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageEntityQueryAccept : Enumeration
    {
        public static StorageEntityQueryAccept full = new StorageEntityQueryAccept { Value = "full" };
        public static StorageEntityQueryAccept minimal = new StorageEntityQueryAccept { Value = "minimal" };
        public static StorageEntityQueryAccept none = new StorageEntityQueryAccept { Value = "none" };
    }
    #endregion
    #region StorageMetricsShowInterval
    /// <summary><p>Used within <see cref="AzureStorageTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class StorageMetricsShowInterval : Enumeration
    {
        public static StorageMetricsShowInterval both = new StorageMetricsShowInterval { Value = "both" };
        public static StorageMetricsShowInterval hour = new StorageMetricsShowInterval { Value = "hour" };
        public static StorageMetricsShowInterval minute = new StorageMetricsShowInterval { Value = "minute" };
    }
    #endregion
}
