// Generated from https://github.com/totollygeek/azure/blob/master/src/Nuke.Azure/specifications/AzureAcr.json
// Generated with Nuke.CodeGeneration version 0.20.1 (Windows,.NETStandard,Version=v2.0)

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Azure
{
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTasks
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public static string AzureAcrPath =>
            ToolPathResolver.TryGetEnvironmentExecutable("AZUREACR_EXE") ??
            ToolPathResolver.GetPathExecutable("az");
        public static Action<OutputType, string> AzureAcrLogger { get; set; } = ProcessTasks.DefaultLogger;
        /// <summary>
        ///   Manage private registries with Azure Container Registries.
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcr(string arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Func<string, string> outputFilter = null)
        {
            var process = ProcessTasks.StartProcess(AzureAcrPath, arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, AzureAcrLogger, outputFilter);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrBuild(AzureAcrBuildSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrBuildSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--auth-mode</c> via <see cref="AzureAcrBuildSettings.AuthMode"/></li>
        ///     <li><c>--build-arg</c> via <see cref="AzureAcrBuildSettings.BuildArg"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrBuildSettings.Debug"/></li>
        ///     <li><c>--file</c> via <see cref="AzureAcrBuildSettings.File"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrBuildSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrBuildSettings.Image"/></li>
        ///     <li><c>--no-format</c> via <see cref="AzureAcrBuildSettings.NoFormat"/></li>
        ///     <li><c>--no-logs</c> via <see cref="AzureAcrBuildSettings.NoLogs"/></li>
        ///     <li><c>--no-push</c> via <see cref="AzureAcrBuildSettings.NoPush"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAcrBuildSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="AzureAcrBuildSettings.Platform"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrBuildSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrBuildSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrBuildSettings.ResourceGroup"/></li>
        ///     <li><c>--secret-build-arg</c> via <see cref="AzureAcrBuildSettings.SecretBuildArg"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrBuildSettings.Subscription"/></li>
        ///     <li><c>--target</c> via <see cref="AzureAcrBuildSettings.Target"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAcrBuildSettings.Timeout"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrBuildSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrBuild(Configure<AzureAcrBuildSettings> configurator)
        {
            return AzureAcrBuild(configurator(new AzureAcrBuildSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--auth-mode</c> via <see cref="AzureAcrBuildSettings.AuthMode"/></li>
        ///     <li><c>--build-arg</c> via <see cref="AzureAcrBuildSettings.BuildArg"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrBuildSettings.Debug"/></li>
        ///     <li><c>--file</c> via <see cref="AzureAcrBuildSettings.File"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrBuildSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrBuildSettings.Image"/></li>
        ///     <li><c>--no-format</c> via <see cref="AzureAcrBuildSettings.NoFormat"/></li>
        ///     <li><c>--no-logs</c> via <see cref="AzureAcrBuildSettings.NoLogs"/></li>
        ///     <li><c>--no-push</c> via <see cref="AzureAcrBuildSettings.NoPush"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAcrBuildSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="AzureAcrBuildSettings.Platform"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrBuildSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrBuildSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrBuildSettings.ResourceGroup"/></li>
        ///     <li><c>--secret-build-arg</c> via <see cref="AzureAcrBuildSettings.SecretBuildArg"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrBuildSettings.Subscription"/></li>
        ///     <li><c>--target</c> via <see cref="AzureAcrBuildSettings.Target"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAcrBuildSettings.Timeout"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrBuildSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrBuildSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrBuild(CombinatorialConfigure<AzureAcrBuildSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrBuild, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrCheckHealth(AzureAcrCheckHealthSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrCheckHealthSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrCheckHealthSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrCheckHealthSettings.Help"/></li>
        ///     <li><c>--ignore-errors</c> via <see cref="AzureAcrCheckHealthSettings.IgnoreErrors"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrCheckHealthSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrCheckHealthSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrCheckHealthSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrCheckHealthSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrCheckHealthSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="AzureAcrCheckHealthSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrCheckHealth(Configure<AzureAcrCheckHealthSettings> configurator)
        {
            return AzureAcrCheckHealth(configurator(new AzureAcrCheckHealthSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrCheckHealthSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrCheckHealthSettings.Help"/></li>
        ///     <li><c>--ignore-errors</c> via <see cref="AzureAcrCheckHealthSettings.IgnoreErrors"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrCheckHealthSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrCheckHealthSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrCheckHealthSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrCheckHealthSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrCheckHealthSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="AzureAcrCheckHealthSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrCheckHealthSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrCheckHealth(CombinatorialConfigure<AzureAcrCheckHealthSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrCheckHealth, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrCheckName(AzureAcrCheckNameSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrCheckNameSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrCheckNameSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrCheckNameSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrCheckNameSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrCheckNameSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrCheckNameSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrCheckNameSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrCheckNameSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrCheckName(Configure<AzureAcrCheckNameSettings> configurator)
        {
            return AzureAcrCheckName(configurator(new AzureAcrCheckNameSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrCheckNameSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrCheckNameSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrCheckNameSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrCheckNameSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrCheckNameSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrCheckNameSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrCheckNameSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrCheckNameSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrCheckName(CombinatorialConfigure<AzureAcrCheckNameSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrCheckName, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrCreate(AzureAcrCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--admin-enabled</c> via <see cref="AzureAcrCreateSettings.AdminEnabled"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrCreateSettings.Debug"/></li>
        ///     <li><c>--default-action</c> via <see cref="AzureAcrCreateSettings.DefaultAction"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrCreateSettings.Help"/></li>
        ///     <li><c>--location</c> via <see cref="AzureAcrCreateSettings.Location"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--sku</c> via <see cref="AzureAcrCreateSettings.Sku"/></li>
        ///     <li><c>--storage-account-name</c> via <see cref="AzureAcrCreateSettings.StorageAccountName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrCreate(Configure<AzureAcrCreateSettings> configurator)
        {
            return AzureAcrCreate(configurator(new AzureAcrCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--admin-enabled</c> via <see cref="AzureAcrCreateSettings.AdminEnabled"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrCreateSettings.Debug"/></li>
        ///     <li><c>--default-action</c> via <see cref="AzureAcrCreateSettings.DefaultAction"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrCreateSettings.Help"/></li>
        ///     <li><c>--location</c> via <see cref="AzureAcrCreateSettings.Location"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--sku</c> via <see cref="AzureAcrCreateSettings.Sku"/></li>
        ///     <li><c>--storage-account-name</c> via <see cref="AzureAcrCreateSettings.StorageAccountName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrCreate(CombinatorialConfigure<AzureAcrCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrCreate, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrDelete(AzureAcrDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrDelete(Configure<AzureAcrDeleteSettings> configurator)
        {
            return AzureAcrDelete(configurator(new AzureAcrDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrDelete(CombinatorialConfigure<AzureAcrDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrDelete, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrImport(AzureAcrImportSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrImportSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrImportSettings.Debug"/></li>
        ///     <li><c>--force</c> via <see cref="AzureAcrImportSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrImportSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrImportSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrImportSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrImportSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrImportSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrImportSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrImportSettings.Registry"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureAcrImportSettings.Repository"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrImportSettings.ResourceGroup"/></li>
        ///     <li><c>--source</c> via <see cref="AzureAcrImportSettings.Source"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrImportSettings.Subscription"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrImportSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrImportSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrImport(Configure<AzureAcrImportSettings> configurator)
        {
            return AzureAcrImport(configurator(new AzureAcrImportSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrImportSettings.Debug"/></li>
        ///     <li><c>--force</c> via <see cref="AzureAcrImportSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrImportSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrImportSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrImportSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrImportSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrImportSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrImportSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrImportSettings.Registry"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureAcrImportSettings.Repository"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrImportSettings.ResourceGroup"/></li>
        ///     <li><c>--source</c> via <see cref="AzureAcrImportSettings.Source"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrImportSettings.Subscription"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrImportSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrImportSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrImportSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrImport(CombinatorialConfigure<AzureAcrImportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrImport, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrList(AzureAcrListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrList(Configure<AzureAcrListSettings> configurator)
        {
            return AzureAcrList(configurator(new AzureAcrListSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrList(CombinatorialConfigure<AzureAcrListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrList, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrLogin(AzureAcrLoginSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrLoginSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrLoginSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrLoginSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrLoginSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrLoginSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrLoginSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrLoginSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrLoginSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrLoginSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrLoginSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrLoginSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrLoginSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrLogin(Configure<AzureAcrLoginSettings> configurator)
        {
            return AzureAcrLogin(configurator(new AzureAcrLoginSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrLoginSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrLoginSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrLoginSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrLoginSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrLoginSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrLoginSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrLoginSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrLoginSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrLoginSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrLoginSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrLoginSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrLoginSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrLogin(CombinatorialConfigure<AzureAcrLoginSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrLogin, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrRun(AzureAcrRunSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrRunSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--auth-mode</c> via <see cref="AzureAcrRunSettings.AuthMode"/></li>
        ///     <li><c>--cmd</c> via <see cref="AzureAcrRunSettings.Cmd"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRunSettings.Debug"/></li>
        ///     <li><c>--file</c> via <see cref="AzureAcrRunSettings.File"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRunSettings.Help"/></li>
        ///     <li><c>--no-format</c> via <see cref="AzureAcrRunSettings.NoFormat"/></li>
        ///     <li><c>--no-logs</c> via <see cref="AzureAcrRunSettings.NoLogs"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAcrRunSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRunSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="AzureAcrRunSettings.Platform"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRunSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrRunSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRunSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrRunSettings.Set"/></li>
        ///     <li><c>--set-secret</c> via <see cref="AzureAcrRunSettings.SetSecret"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRunSettings.Subscription"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAcrRunSettings.Timeout"/></li>
        ///     <li><c>--values</c> via <see cref="AzureAcrRunSettings.Values"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRunSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrRun(Configure<AzureAcrRunSettings> configurator)
        {
            return AzureAcrRun(configurator(new AzureAcrRunSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--auth-mode</c> via <see cref="AzureAcrRunSettings.AuthMode"/></li>
        ///     <li><c>--cmd</c> via <see cref="AzureAcrRunSettings.Cmd"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRunSettings.Debug"/></li>
        ///     <li><c>--file</c> via <see cref="AzureAcrRunSettings.File"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRunSettings.Help"/></li>
        ///     <li><c>--no-format</c> via <see cref="AzureAcrRunSettings.NoFormat"/></li>
        ///     <li><c>--no-logs</c> via <see cref="AzureAcrRunSettings.NoLogs"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAcrRunSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRunSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="AzureAcrRunSettings.Platform"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRunSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrRunSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRunSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrRunSettings.Set"/></li>
        ///     <li><c>--set-secret</c> via <see cref="AzureAcrRunSettings.SetSecret"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRunSettings.Subscription"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAcrRunSettings.Timeout"/></li>
        ///     <li><c>--values</c> via <see cref="AzureAcrRunSettings.Values"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRunSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrRunSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrRun(CombinatorialConfigure<AzureAcrRunSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrRun, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrShow(AzureAcrShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrShow(Configure<AzureAcrShowSettings> configurator)
        {
            return AzureAcrShow(configurator(new AzureAcrShowSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrShow(CombinatorialConfigure<AzureAcrShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrShow, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrShowUsage(AzureAcrShowUsageSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrShowUsageSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrShowUsageSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrShowUsageSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrShowUsageSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrShowUsageSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrShowUsageSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrShowUsageSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrShowUsageSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrShowUsageSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrShowUsage(Configure<AzureAcrShowUsageSettings> configurator)
        {
            return AzureAcrShowUsage(configurator(new AzureAcrShowUsageSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrShowUsageSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrShowUsageSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrShowUsageSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrShowUsageSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrShowUsageSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrShowUsageSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrShowUsageSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrShowUsageSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrShowUsageSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrShowUsage(CombinatorialConfigure<AzureAcrShowUsageSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrShowUsage, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrUpdate(AzureAcrUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureAcrUpdateSettings.Add"/></li>
        ///     <li><c>--admin-enabled</c> via <see cref="AzureAcrUpdateSettings.AdminEnabled"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrUpdateSettings.Debug"/></li>
        ///     <li><c>--default-action</c> via <see cref="AzureAcrUpdateSettings.DefaultAction"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAcrUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAcrUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrUpdateSettings.Set"/></li>
        ///     <li><c>--sku</c> via <see cref="AzureAcrUpdateSettings.Sku"/></li>
        ///     <li><c>--storage-account-name</c> via <see cref="AzureAcrUpdateSettings.StorageAccountName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAcrUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrUpdate(Configure<AzureAcrUpdateSettings> configurator)
        {
            return AzureAcrUpdate(configurator(new AzureAcrUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureAcrUpdateSettings.Add"/></li>
        ///     <li><c>--admin-enabled</c> via <see cref="AzureAcrUpdateSettings.AdminEnabled"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrUpdateSettings.Debug"/></li>
        ///     <li><c>--default-action</c> via <see cref="AzureAcrUpdateSettings.DefaultAction"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAcrUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAcrUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrUpdateSettings.Set"/></li>
        ///     <li><c>--sku</c> via <see cref="AzureAcrUpdateSettings.Sku"/></li>
        ///     <li><c>--storage-account-name</c> via <see cref="AzureAcrUpdateSettings.StorageAccountName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAcrUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrUpdate(CombinatorialConfigure<AzureAcrUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrUpdate, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrConfig(AzureAcrConfigSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrConfigSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrConfigSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrConfigSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrConfigSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrConfigSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrConfigSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrConfig(Configure<AzureAcrConfigSettings> configurator)
        {
            return AzureAcrConfig(configurator(new AzureAcrConfigSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrConfigSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrConfigSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrConfigSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrConfigSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrConfigSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrConfigSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrConfig(CombinatorialConfigure<AzureAcrConfigSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrConfig, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrCredentialRenew(AzureAcrCredentialRenewSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrCredentialRenewSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrCredentialRenewSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrCredentialRenewSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrCredentialRenewSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrCredentialRenewSettings.Output"/></li>
        ///     <li><c>--password-name</c> via <see cref="AzureAcrCredentialRenewSettings.PasswordName"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrCredentialRenewSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrCredentialRenewSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrCredentialRenewSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrCredentialRenewSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrCredentialRenew(Configure<AzureAcrCredentialRenewSettings> configurator)
        {
            return AzureAcrCredentialRenew(configurator(new AzureAcrCredentialRenewSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrCredentialRenewSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrCredentialRenewSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrCredentialRenewSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrCredentialRenewSettings.Output"/></li>
        ///     <li><c>--password-name</c> via <see cref="AzureAcrCredentialRenewSettings.PasswordName"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrCredentialRenewSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrCredentialRenewSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrCredentialRenewSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrCredentialRenewSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrCredentialRenewSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrCredentialRenew(CombinatorialConfigure<AzureAcrCredentialRenewSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrCredentialRenew, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrCredentialShow(AzureAcrCredentialShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrCredentialShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrCredentialShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrCredentialShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrCredentialShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrCredentialShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrCredentialShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrCredentialShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrCredentialShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrCredentialShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrCredentialShow(Configure<AzureAcrCredentialShowSettings> configurator)
        {
            return AzureAcrCredentialShow(configurator(new AzureAcrCredentialShowSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrCredentialShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrCredentialShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrCredentialShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrCredentialShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrCredentialShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrCredentialShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrCredentialShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrCredentialShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrCredentialShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrCredentialShow(CombinatorialConfigure<AzureAcrCredentialShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrCredentialShow, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrHelmDelete(AzureAcrHelmDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrHelmDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrHelmDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrHelmDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrHelmDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrHelmDeleteSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrHelmDeleteSettings.Password"/></li>
        ///     <li><c>--prov</c> via <see cref="AzureAcrHelmDeleteSettings.Prov"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrHelmDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrHelmDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrHelmDeleteSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrHelmDeleteSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrHelmDeleteSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrHelmDeleteSettings.Verbose"/></li>
        ///     <li><c>--version</c> via <see cref="AzureAcrHelmDeleteSettings.Version"/></li>
        ///     <li><c>--yes</c> via <see cref="AzureAcrHelmDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrHelmDelete(Configure<AzureAcrHelmDeleteSettings> configurator)
        {
            return AzureAcrHelmDelete(configurator(new AzureAcrHelmDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrHelmDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrHelmDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrHelmDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrHelmDeleteSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrHelmDeleteSettings.Password"/></li>
        ///     <li><c>--prov</c> via <see cref="AzureAcrHelmDeleteSettings.Prov"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrHelmDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrHelmDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrHelmDeleteSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrHelmDeleteSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrHelmDeleteSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrHelmDeleteSettings.Verbose"/></li>
        ///     <li><c>--version</c> via <see cref="AzureAcrHelmDeleteSettings.Version"/></li>
        ///     <li><c>--yes</c> via <see cref="AzureAcrHelmDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrHelmDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrHelmDelete(CombinatorialConfigure<AzureAcrHelmDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrHelmDelete, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrHelmList(AzureAcrHelmListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrHelmListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrHelmListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrHelmListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrHelmListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrHelmListSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrHelmListSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrHelmListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrHelmListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrHelmListSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrHelmListSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrHelmListSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrHelmListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrHelmList(Configure<AzureAcrHelmListSettings> configurator)
        {
            return AzureAcrHelmList(configurator(new AzureAcrHelmListSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrHelmListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrHelmListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrHelmListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrHelmListSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrHelmListSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrHelmListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrHelmListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrHelmListSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrHelmListSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrHelmListSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrHelmListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrHelmListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrHelmList(CombinatorialConfigure<AzureAcrHelmListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrHelmList, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrHelmPush(AzureAcrHelmPushSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrHelmPushSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrHelmPushSettings.Debug"/></li>
        ///     <li><c>--force</c> via <see cref="AzureAcrHelmPushSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrHelmPushSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrHelmPushSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrHelmPushSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrHelmPushSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrHelmPushSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrHelmPushSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrHelmPushSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrHelmPushSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrHelmPushSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrHelmPushSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrHelmPush(Configure<AzureAcrHelmPushSettings> configurator)
        {
            return AzureAcrHelmPush(configurator(new AzureAcrHelmPushSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrHelmPushSettings.Debug"/></li>
        ///     <li><c>--force</c> via <see cref="AzureAcrHelmPushSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrHelmPushSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrHelmPushSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrHelmPushSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrHelmPushSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrHelmPushSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrHelmPushSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrHelmPushSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrHelmPushSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrHelmPushSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrHelmPushSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrHelmPushSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrHelmPush(CombinatorialConfigure<AzureAcrHelmPushSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrHelmPush, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrHelmShow(AzureAcrHelmShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrHelmShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrHelmShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrHelmShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrHelmShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrHelmShowSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrHelmShowSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrHelmShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrHelmShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrHelmShowSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrHelmShowSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrHelmShowSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrHelmShowSettings.Verbose"/></li>
        ///     <li><c>--version</c> via <see cref="AzureAcrHelmShowSettings.Version"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrHelmShow(Configure<AzureAcrHelmShowSettings> configurator)
        {
            return AzureAcrHelmShow(configurator(new AzureAcrHelmShowSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrHelmShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrHelmShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrHelmShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrHelmShowSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrHelmShowSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrHelmShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrHelmShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrHelmShowSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrHelmShowSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrHelmShowSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrHelmShowSettings.Verbose"/></li>
        ///     <li><c>--version</c> via <see cref="AzureAcrHelmShowSettings.Version"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrHelmShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrHelmShow(CombinatorialConfigure<AzureAcrHelmShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrHelmShow, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrNetworkRuleAdd(AzureAcrNetworkRuleAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrNetworkRuleAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrNetworkRuleAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrNetworkRuleAddSettings.Help"/></li>
        ///     <li><c>--ip-address</c> via <see cref="AzureAcrNetworkRuleAddSettings.IpAddress"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrNetworkRuleAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrNetworkRuleAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrNetworkRuleAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrNetworkRuleAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subnet</c> via <see cref="AzureAcrNetworkRuleAddSettings.Subnet"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrNetworkRuleAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrNetworkRuleAddSettings.Verbose"/></li>
        ///     <li><c>--vnet-name</c> via <see cref="AzureAcrNetworkRuleAddSettings.VnetName"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrNetworkRuleAdd(Configure<AzureAcrNetworkRuleAddSettings> configurator)
        {
            return AzureAcrNetworkRuleAdd(configurator(new AzureAcrNetworkRuleAddSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrNetworkRuleAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrNetworkRuleAddSettings.Help"/></li>
        ///     <li><c>--ip-address</c> via <see cref="AzureAcrNetworkRuleAddSettings.IpAddress"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrNetworkRuleAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrNetworkRuleAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrNetworkRuleAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrNetworkRuleAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subnet</c> via <see cref="AzureAcrNetworkRuleAddSettings.Subnet"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrNetworkRuleAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrNetworkRuleAddSettings.Verbose"/></li>
        ///     <li><c>--vnet-name</c> via <see cref="AzureAcrNetworkRuleAddSettings.VnetName"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrNetworkRuleAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrNetworkRuleAdd(CombinatorialConfigure<AzureAcrNetworkRuleAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrNetworkRuleAdd, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrNetworkRuleList(AzureAcrNetworkRuleListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrNetworkRuleListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrNetworkRuleListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrNetworkRuleListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrNetworkRuleListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrNetworkRuleListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrNetworkRuleListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrNetworkRuleListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrNetworkRuleListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrNetworkRuleListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrNetworkRuleList(Configure<AzureAcrNetworkRuleListSettings> configurator)
        {
            return AzureAcrNetworkRuleList(configurator(new AzureAcrNetworkRuleListSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrNetworkRuleListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrNetworkRuleListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrNetworkRuleListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrNetworkRuleListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrNetworkRuleListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrNetworkRuleListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrNetworkRuleListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrNetworkRuleListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrNetworkRuleListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrNetworkRuleList(CombinatorialConfigure<AzureAcrNetworkRuleListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrNetworkRuleList, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrNetworkRuleRemove(AzureAcrNetworkRuleRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrNetworkRuleRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Help"/></li>
        ///     <li><c>--ip-address</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.IpAddress"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subnet</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Subnet"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Verbose"/></li>
        ///     <li><c>--vnet-name</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.VnetName"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrNetworkRuleRemove(Configure<AzureAcrNetworkRuleRemoveSettings> configurator)
        {
            return AzureAcrNetworkRuleRemove(configurator(new AzureAcrNetworkRuleRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Help"/></li>
        ///     <li><c>--ip-address</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.IpAddress"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subnet</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Subnet"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.Verbose"/></li>
        ///     <li><c>--vnet-name</c> via <see cref="AzureAcrNetworkRuleRemoveSettings.VnetName"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrNetworkRuleRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrNetworkRuleRemove(CombinatorialConfigure<AzureAcrNetworkRuleRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrNetworkRuleRemove, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrPackBuild(AzureAcrPackBuildSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrPackBuildSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--auth-mode</c> via <see cref="AzureAcrPackBuildSettings.AuthMode"/></li>
        ///     <li><c>--builder</c> via <see cref="AzureAcrPackBuildSettings.Builder"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrPackBuildSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrPackBuildSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrPackBuildSettings.Image"/></li>
        ///     <li><c>--no-format</c> via <see cref="AzureAcrPackBuildSettings.NoFormat"/></li>
        ///     <li><c>--no-logs</c> via <see cref="AzureAcrPackBuildSettings.NoLogs"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAcrPackBuildSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrPackBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="AzureAcrPackBuildSettings.Platform"/></li>
        ///     <li><c>--pull</c> via <see cref="AzureAcrPackBuildSettings.Pull"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrPackBuildSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrPackBuildSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrPackBuildSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrPackBuildSettings.Subscription"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAcrPackBuildSettings.Timeout"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrPackBuildSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrPackBuild(Configure<AzureAcrPackBuildSettings> configurator)
        {
            return AzureAcrPackBuild(configurator(new AzureAcrPackBuildSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--auth-mode</c> via <see cref="AzureAcrPackBuildSettings.AuthMode"/></li>
        ///     <li><c>--builder</c> via <see cref="AzureAcrPackBuildSettings.Builder"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrPackBuildSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrPackBuildSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrPackBuildSettings.Image"/></li>
        ///     <li><c>--no-format</c> via <see cref="AzureAcrPackBuildSettings.NoFormat"/></li>
        ///     <li><c>--no-logs</c> via <see cref="AzureAcrPackBuildSettings.NoLogs"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAcrPackBuildSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrPackBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="AzureAcrPackBuildSettings.Platform"/></li>
        ///     <li><c>--pull</c> via <see cref="AzureAcrPackBuildSettings.Pull"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrPackBuildSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrPackBuildSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrPackBuildSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrPackBuildSettings.Subscription"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAcrPackBuildSettings.Timeout"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrPackBuildSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrPackBuildSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrPackBuild(CombinatorialConfigure<AzureAcrPackBuildSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrPackBuild, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrReplicationCreate(AzureAcrReplicationCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrReplicationCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrReplicationCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrReplicationCreateSettings.Help"/></li>
        ///     <li><c>--location</c> via <see cref="AzureAcrReplicationCreateSettings.Location"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrReplicationCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrReplicationCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrReplicationCreateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrReplicationCreateSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrReplicationCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrReplicationCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAcrReplicationCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrReplicationCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrReplicationCreate(Configure<AzureAcrReplicationCreateSettings> configurator)
        {
            return AzureAcrReplicationCreate(configurator(new AzureAcrReplicationCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrReplicationCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrReplicationCreateSettings.Help"/></li>
        ///     <li><c>--location</c> via <see cref="AzureAcrReplicationCreateSettings.Location"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrReplicationCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrReplicationCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrReplicationCreateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrReplicationCreateSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrReplicationCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrReplicationCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAcrReplicationCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrReplicationCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrReplicationCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrReplicationCreate(CombinatorialConfigure<AzureAcrReplicationCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrReplicationCreate, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrReplicationDelete(AzureAcrReplicationDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrReplicationDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrReplicationDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrReplicationDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrReplicationDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrReplicationDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrReplicationDeleteSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrReplicationDeleteSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrReplicationDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrReplicationDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrReplicationDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrReplicationDelete(Configure<AzureAcrReplicationDeleteSettings> configurator)
        {
            return AzureAcrReplicationDelete(configurator(new AzureAcrReplicationDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrReplicationDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrReplicationDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrReplicationDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrReplicationDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrReplicationDeleteSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrReplicationDeleteSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrReplicationDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrReplicationDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrReplicationDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrReplicationDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrReplicationDelete(CombinatorialConfigure<AzureAcrReplicationDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrReplicationDelete, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrReplicationList(AzureAcrReplicationListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrReplicationListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrReplicationListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrReplicationListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrReplicationListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrReplicationListSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrReplicationListSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrReplicationListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrReplicationListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrReplicationListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrReplicationList(Configure<AzureAcrReplicationListSettings> configurator)
        {
            return AzureAcrReplicationList(configurator(new AzureAcrReplicationListSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrReplicationListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrReplicationListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrReplicationListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrReplicationListSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrReplicationListSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrReplicationListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrReplicationListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrReplicationListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrReplicationListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrReplicationList(CombinatorialConfigure<AzureAcrReplicationListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrReplicationList, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrReplicationShow(AzureAcrReplicationShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrReplicationShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrReplicationShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrReplicationShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrReplicationShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrReplicationShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrReplicationShowSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrReplicationShowSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrReplicationShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrReplicationShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrReplicationShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrReplicationShow(Configure<AzureAcrReplicationShowSettings> configurator)
        {
            return AzureAcrReplicationShow(configurator(new AzureAcrReplicationShowSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrReplicationShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrReplicationShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrReplicationShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrReplicationShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrReplicationShowSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrReplicationShowSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrReplicationShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrReplicationShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrReplicationShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrReplicationShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrReplicationShow(CombinatorialConfigure<AzureAcrReplicationShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrReplicationShow, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrReplicationUpdate(AzureAcrReplicationUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrReplicationUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureAcrReplicationUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrReplicationUpdateSettings.Debug"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAcrReplicationUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrReplicationUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrReplicationUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrReplicationUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrReplicationUpdateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrReplicationUpdateSettings.Registry"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAcrReplicationUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrReplicationUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrReplicationUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrReplicationUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAcrReplicationUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrReplicationUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrReplicationUpdate(Configure<AzureAcrReplicationUpdateSettings> configurator)
        {
            return AzureAcrReplicationUpdate(configurator(new AzureAcrReplicationUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureAcrReplicationUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrReplicationUpdateSettings.Debug"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAcrReplicationUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrReplicationUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrReplicationUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrReplicationUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrReplicationUpdateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrReplicationUpdateSettings.Registry"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAcrReplicationUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrReplicationUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrReplicationUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrReplicationUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAcrReplicationUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrReplicationUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrReplicationUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrReplicationUpdate(CombinatorialConfigure<AzureAcrReplicationUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrReplicationUpdate, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryDelete(AzureAcrRepositoryDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrRepositoryDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryDeleteSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrRepositoryDeleteSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryDeleteSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryDeleteSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryDeleteSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureAcrRepositoryDeleteSettings.Repository"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryDeleteSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryDeleteSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryDeleteSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryDeleteSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="AzureAcrRepositoryDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryDelete(Configure<AzureAcrRepositoryDeleteSettings> configurator)
        {
            return AzureAcrRepositoryDelete(configurator(new AzureAcrRepositoryDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryDeleteSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrRepositoryDeleteSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryDeleteSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryDeleteSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryDeleteSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureAcrRepositoryDeleteSettings.Repository"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryDeleteSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryDeleteSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryDeleteSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryDeleteSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="AzureAcrRepositoryDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrRepositoryDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrRepositoryDelete(CombinatorialConfigure<AzureAcrRepositoryDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrRepositoryDelete, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryList(AzureAcrRepositoryListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrRepositoryListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryListSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryListSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryListSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryListSettings.Suffix"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAcrRepositoryListSettings.Top"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryListSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryList(Configure<AzureAcrRepositoryListSettings> configurator)
        {
            return AzureAcrRepositoryList(configurator(new AzureAcrRepositoryListSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryListSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryListSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryListSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryListSettings.Suffix"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAcrRepositoryListSettings.Top"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryListSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrRepositoryListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrRepositoryList(CombinatorialConfigure<AzureAcrRepositoryListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrRepositoryList, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryShow(AzureAcrRepositoryShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrRepositoryShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryShowSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrRepositoryShowSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryShowSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryShowSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryShowSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureAcrRepositoryShowSettings.Repository"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryShowSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryShowSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryShowSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryShow(Configure<AzureAcrRepositoryShowSettings> configurator)
        {
            return AzureAcrRepositoryShow(configurator(new AzureAcrRepositoryShowSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryShowSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrRepositoryShowSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryShowSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryShowSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryShowSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureAcrRepositoryShowSettings.Repository"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryShowSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryShowSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryShowSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrRepositoryShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrRepositoryShow(CombinatorialConfigure<AzureAcrRepositoryShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrRepositoryShow, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryShowManifests(AzureAcrRepositoryShowManifestsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrRepositoryShowManifestsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Debug"/></li>
        ///     <li><c>--detail</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Detail"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Name"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Repository"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Suffix"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Top"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryShowManifests(Configure<AzureAcrRepositoryShowManifestsSettings> configurator)
        {
            return AzureAcrRepositoryShowManifests(configurator(new AzureAcrRepositoryShowManifestsSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Debug"/></li>
        ///     <li><c>--detail</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Detail"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Name"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Repository"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Suffix"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Top"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryShowManifestsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrRepositoryShowManifestsSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrRepositoryShowManifests(CombinatorialConfigure<AzureAcrRepositoryShowManifestsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrRepositoryShowManifests, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryShowTags(AzureAcrRepositoryShowTagsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrRepositoryShowTagsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Debug"/></li>
        ///     <li><c>--detail</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Detail"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Name"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Repository"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryShowTagsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Suffix"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Top"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryShowTags(Configure<AzureAcrRepositoryShowTagsSettings> configurator)
        {
            return AzureAcrRepositoryShowTags(configurator(new AzureAcrRepositoryShowTagsSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Debug"/></li>
        ///     <li><c>--detail</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Detail"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Name"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Query"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Repository"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryShowTagsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Suffix"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Top"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryShowTagsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrRepositoryShowTagsSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrRepositoryShowTags(CombinatorialConfigure<AzureAcrRepositoryShowTagsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrRepositoryShowTags, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryUntag(AzureAcrRepositoryUntagSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrRepositoryUntagSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryUntagSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryUntagSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrRepositoryUntagSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryUntagSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryUntagSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryUntagSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryUntagSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryUntagSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryUntagSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryUntagSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryUntagSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryUntagSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryUntag(Configure<AzureAcrRepositoryUntagSettings> configurator)
        {
            return AzureAcrRepositoryUntag(configurator(new AzureAcrRepositoryUntagSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryUntagSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryUntagSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrRepositoryUntagSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryUntagSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryUntagSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryUntagSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryUntagSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryUntagSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryUntagSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryUntagSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryUntagSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryUntagSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrRepositoryUntagSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrRepositoryUntag(CombinatorialConfigure<AzureAcrRepositoryUntagSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrRepositoryUntag, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryUpdate(AzureAcrRepositoryUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrRepositoryUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryUpdateSettings.Debug"/></li>
        ///     <li><c>--delete-enabled</c> via <see cref="AzureAcrRepositoryUpdateSettings.DeleteEnabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryUpdateSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrRepositoryUpdateSettings.Image"/></li>
        ///     <li><c>--list-enabled</c> via <see cref="AzureAcrRepositoryUpdateSettings.ListEnabled"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryUpdateSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryUpdateSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryUpdateSettings.Query"/></li>
        ///     <li><c>--read-enabled</c> via <see cref="AzureAcrRepositoryUpdateSettings.ReadEnabled"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureAcrRepositoryUpdateSettings.Repository"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryUpdateSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryUpdateSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryUpdateSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryUpdateSettings.Verbose"/></li>
        ///     <li><c>--write-enabled</c> via <see cref="AzureAcrRepositoryUpdateSettings.WriteEnabled"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrRepositoryUpdate(Configure<AzureAcrRepositoryUpdateSettings> configurator)
        {
            return AzureAcrRepositoryUpdate(configurator(new AzureAcrRepositoryUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrRepositoryUpdateSettings.Debug"/></li>
        ///     <li><c>--delete-enabled</c> via <see cref="AzureAcrRepositoryUpdateSettings.DeleteEnabled"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrRepositoryUpdateSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrRepositoryUpdateSettings.Image"/></li>
        ///     <li><c>--list-enabled</c> via <see cref="AzureAcrRepositoryUpdateSettings.ListEnabled"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrRepositoryUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrRepositoryUpdateSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrRepositoryUpdateSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrRepositoryUpdateSettings.Query"/></li>
        ///     <li><c>--read-enabled</c> via <see cref="AzureAcrRepositoryUpdateSettings.ReadEnabled"/></li>
        ///     <li><c>--repository</c> via <see cref="AzureAcrRepositoryUpdateSettings.Repository"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrRepositoryUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrRepositoryUpdateSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrRepositoryUpdateSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrRepositoryUpdateSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrRepositoryUpdateSettings.Verbose"/></li>
        ///     <li><c>--write-enabled</c> via <see cref="AzureAcrRepositoryUpdateSettings.WriteEnabled"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrRepositoryUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrRepositoryUpdate(CombinatorialConfigure<AzureAcrRepositoryUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrRepositoryUpdate, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskCancelRun(AzureAcrTaskCancelRunSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskCancelRunSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskCancelRunSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskCancelRunSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskCancelRunSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskCancelRunSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskCancelRunSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskCancelRunSettings.ResourceGroup"/></li>
        ///     <li><c>--run-id</c> via <see cref="AzureAcrTaskCancelRunSettings.RunId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskCancelRunSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskCancelRunSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskCancelRun(Configure<AzureAcrTaskCancelRunSettings> configurator)
        {
            return AzureAcrTaskCancelRun(configurator(new AzureAcrTaskCancelRunSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskCancelRunSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskCancelRunSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskCancelRunSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskCancelRunSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskCancelRunSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskCancelRunSettings.ResourceGroup"/></li>
        ///     <li><c>--run-id</c> via <see cref="AzureAcrTaskCancelRunSettings.RunId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskCancelRunSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskCancelRunSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskCancelRunSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskCancelRun(CombinatorialConfigure<AzureAcrTaskCancelRunSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskCancelRun, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskCreate(AzureAcrTaskCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--arg</c> via <see cref="AzureAcrTaskCreateSettings.Arg"/></li>
        ///     <li><c>--assign-identity</c> via <see cref="AzureAcrTaskCreateSettings.AssignIdentity"/></li>
        ///     <li><c>--auth-mode</c> via <see cref="AzureAcrTaskCreateSettings.AuthMode"/></li>
        ///     <li><c>--base-image-trigger-enabled</c> via <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerEnabled"/></li>
        ///     <li><c>--base-image-trigger-name</c> via <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerName"/></li>
        ///     <li><c>--base-image-trigger-type</c> via <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerType"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureAcrTaskCreateSettings.Branch"/></li>
        ///     <li><c>--cmd</c> via <see cref="AzureAcrTaskCreateSettings.Cmd"/></li>
        ///     <li><c>--commit-trigger-enabled</c> via <see cref="AzureAcrTaskCreateSettings.CommitTriggerEnabled"/></li>
        ///     <li><c>--context</c> via <see cref="AzureAcrTaskCreateSettings.Context"/></li>
        ///     <li><c>--cpu</c> via <see cref="AzureAcrTaskCreateSettings.Cpu"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskCreateSettings.Debug"/></li>
        ///     <li><c>--file</c> via <see cref="AzureAcrTaskCreateSettings.File"/></li>
        ///     <li><c>--git-access-token</c> via <see cref="AzureAcrTaskCreateSettings.GitAccessToken"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskCreateSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrTaskCreateSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskCreateSettings.Name"/></li>
        ///     <li><c>--no-cache</c> via <see cref="AzureAcrTaskCreateSettings.NoCache"/></li>
        ///     <li><c>--no-push</c> via <see cref="AzureAcrTaskCreateSettings.NoPush"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskCreateSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="AzureAcrTaskCreateSettings.Platform"/></li>
        ///     <li><c>--pull-request-trigger-enabled</c> via <see cref="AzureAcrTaskCreateSettings.PullRequestTriggerEnabled"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskCreateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskCreateSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--secret-arg</c> via <see cref="AzureAcrTaskCreateSettings.SecretArg"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrTaskCreateSettings.Set"/></li>
        ///     <li><c>--set-secret</c> via <see cref="AzureAcrTaskCreateSettings.SetSecret"/></li>
        ///     <li><c>--source-trigger-name</c> via <see cref="AzureAcrTaskCreateSettings.SourceTriggerName"/></li>
        ///     <li><c>--status</c> via <see cref="AzureAcrTaskCreateSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskCreateSettings.Subscription"/></li>
        ///     <li><c>--target</c> via <see cref="AzureAcrTaskCreateSettings.Target"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAcrTaskCreateSettings.Timeout"/></li>
        ///     <li><c>--values</c> via <see cref="AzureAcrTaskCreateSettings.Values"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskCreate(Configure<AzureAcrTaskCreateSettings> configurator)
        {
            return AzureAcrTaskCreate(configurator(new AzureAcrTaskCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--arg</c> via <see cref="AzureAcrTaskCreateSettings.Arg"/></li>
        ///     <li><c>--assign-identity</c> via <see cref="AzureAcrTaskCreateSettings.AssignIdentity"/></li>
        ///     <li><c>--auth-mode</c> via <see cref="AzureAcrTaskCreateSettings.AuthMode"/></li>
        ///     <li><c>--base-image-trigger-enabled</c> via <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerEnabled"/></li>
        ///     <li><c>--base-image-trigger-name</c> via <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerName"/></li>
        ///     <li><c>--base-image-trigger-type</c> via <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerType"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureAcrTaskCreateSettings.Branch"/></li>
        ///     <li><c>--cmd</c> via <see cref="AzureAcrTaskCreateSettings.Cmd"/></li>
        ///     <li><c>--commit-trigger-enabled</c> via <see cref="AzureAcrTaskCreateSettings.CommitTriggerEnabled"/></li>
        ///     <li><c>--context</c> via <see cref="AzureAcrTaskCreateSettings.Context"/></li>
        ///     <li><c>--cpu</c> via <see cref="AzureAcrTaskCreateSettings.Cpu"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskCreateSettings.Debug"/></li>
        ///     <li><c>--file</c> via <see cref="AzureAcrTaskCreateSettings.File"/></li>
        ///     <li><c>--git-access-token</c> via <see cref="AzureAcrTaskCreateSettings.GitAccessToken"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskCreateSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrTaskCreateSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskCreateSettings.Name"/></li>
        ///     <li><c>--no-cache</c> via <see cref="AzureAcrTaskCreateSettings.NoCache"/></li>
        ///     <li><c>--no-push</c> via <see cref="AzureAcrTaskCreateSettings.NoPush"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskCreateSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="AzureAcrTaskCreateSettings.Platform"/></li>
        ///     <li><c>--pull-request-trigger-enabled</c> via <see cref="AzureAcrTaskCreateSettings.PullRequestTriggerEnabled"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskCreateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskCreateSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--secret-arg</c> via <see cref="AzureAcrTaskCreateSettings.SecretArg"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrTaskCreateSettings.Set"/></li>
        ///     <li><c>--set-secret</c> via <see cref="AzureAcrTaskCreateSettings.SetSecret"/></li>
        ///     <li><c>--source-trigger-name</c> via <see cref="AzureAcrTaskCreateSettings.SourceTriggerName"/></li>
        ///     <li><c>--status</c> via <see cref="AzureAcrTaskCreateSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskCreateSettings.Subscription"/></li>
        ///     <li><c>--target</c> via <see cref="AzureAcrTaskCreateSettings.Target"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAcrTaskCreateSettings.Timeout"/></li>
        ///     <li><c>--values</c> via <see cref="AzureAcrTaskCreateSettings.Values"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskCreate(CombinatorialConfigure<AzureAcrTaskCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskCreate, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskDelete(AzureAcrTaskDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskDeleteSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskDeleteSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskDelete(Configure<AzureAcrTaskDeleteSettings> configurator)
        {
            return AzureAcrTaskDelete(configurator(new AzureAcrTaskDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskDeleteSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskDeleteSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskDelete(CombinatorialConfigure<AzureAcrTaskDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskDelete, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskList(AzureAcrTaskListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskListSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskListSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskList(Configure<AzureAcrTaskListSettings> configurator)
        {
            return AzureAcrTaskList(configurator(new AzureAcrTaskListSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskListSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskListSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskList(CombinatorialConfigure<AzureAcrTaskListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskList, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskListRuns(AzureAcrTaskListRunsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskListRunsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskListRunsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskListRunsSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrTaskListRunsSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskListRunsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskListRunsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskListRunsSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskListRunsSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskListRunsSettings.ResourceGroup"/></li>
        ///     <li><c>--run-status</c> via <see cref="AzureAcrTaskListRunsSettings.RunStatus"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskListRunsSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAcrTaskListRunsSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskListRunsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskListRuns(Configure<AzureAcrTaskListRunsSettings> configurator)
        {
            return AzureAcrTaskListRuns(configurator(new AzureAcrTaskListRunsSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskListRunsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskListRunsSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrTaskListRunsSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskListRunsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskListRunsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskListRunsSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskListRunsSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskListRunsSettings.ResourceGroup"/></li>
        ///     <li><c>--run-status</c> via <see cref="AzureAcrTaskListRunsSettings.RunStatus"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskListRunsSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAcrTaskListRunsSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskListRunsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskListRunsSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskListRuns(CombinatorialConfigure<AzureAcrTaskListRunsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskListRuns, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskLogs(AzureAcrTaskLogsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskLogsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskLogsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskLogsSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrTaskLogsSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskLogsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskLogsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskLogsSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskLogsSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskLogsSettings.ResourceGroup"/></li>
        ///     <li><c>--run-id</c> via <see cref="AzureAcrTaskLogsSettings.RunId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskLogsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskLogsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskLogs(Configure<AzureAcrTaskLogsSettings> configurator)
        {
            return AzureAcrTaskLogs(configurator(new AzureAcrTaskLogsSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskLogsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskLogsSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrTaskLogsSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskLogsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskLogsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskLogsSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskLogsSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskLogsSettings.ResourceGroup"/></li>
        ///     <li><c>--run-id</c> via <see cref="AzureAcrTaskLogsSettings.RunId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskLogsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskLogsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskLogsSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskLogs(CombinatorialConfigure<AzureAcrTaskLogsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskLogs, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskRun(AzureAcrTaskRunSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskRunSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskRunSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskRunSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskRunSettings.Name"/></li>
        ///     <li><c>--no-logs</c> via <see cref="AzureAcrTaskRunSettings.NoLogs"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAcrTaskRunSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskRunSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskRunSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskRunSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskRunSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrTaskRunSettings.Set"/></li>
        ///     <li><c>--set-secret</c> via <see cref="AzureAcrTaskRunSettings.SetSecret"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskRunSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskRunSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskRun(Configure<AzureAcrTaskRunSettings> configurator)
        {
            return AzureAcrTaskRun(configurator(new AzureAcrTaskRunSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskRunSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskRunSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskRunSettings.Name"/></li>
        ///     <li><c>--no-logs</c> via <see cref="AzureAcrTaskRunSettings.NoLogs"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAcrTaskRunSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskRunSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskRunSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskRunSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskRunSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrTaskRunSettings.Set"/></li>
        ///     <li><c>--set-secret</c> via <see cref="AzureAcrTaskRunSettings.SetSecret"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskRunSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskRunSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskRunSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskRun(CombinatorialConfigure<AzureAcrTaskRunSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskRun, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskShow(AzureAcrTaskShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskShowSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskShowSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskShowSettings.Verbose"/></li>
        ///     <li><c>--with-secure-properties</c> via <see cref="AzureAcrTaskShowSettings.WithSecureProperties"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskShow(Configure<AzureAcrTaskShowSettings> configurator)
        {
            return AzureAcrTaskShow(configurator(new AzureAcrTaskShowSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskShowSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskShowSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskShowSettings.Verbose"/></li>
        ///     <li><c>--with-secure-properties</c> via <see cref="AzureAcrTaskShowSettings.WithSecureProperties"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskShow(CombinatorialConfigure<AzureAcrTaskShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskShow, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskShowRun(AzureAcrTaskShowRunSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskShowRunSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskShowRunSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskShowRunSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskShowRunSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskShowRunSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskShowRunSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskShowRunSettings.ResourceGroup"/></li>
        ///     <li><c>--run-id</c> via <see cref="AzureAcrTaskShowRunSettings.RunId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskShowRunSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskShowRunSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskShowRun(Configure<AzureAcrTaskShowRunSettings> configurator)
        {
            return AzureAcrTaskShowRun(configurator(new AzureAcrTaskShowRunSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskShowRunSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskShowRunSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskShowRunSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskShowRunSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskShowRunSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskShowRunSettings.ResourceGroup"/></li>
        ///     <li><c>--run-id</c> via <see cref="AzureAcrTaskShowRunSettings.RunId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskShowRunSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskShowRunSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskShowRunSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskShowRun(CombinatorialConfigure<AzureAcrTaskShowRunSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskShowRun, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskUpdate(AzureAcrTaskUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--arg</c> via <see cref="AzureAcrTaskUpdateSettings.Arg"/></li>
        ///     <li><c>--auth-mode</c> via <see cref="AzureAcrTaskUpdateSettings.AuthMode"/></li>
        ///     <li><c>--base-image-trigger-enabled</c> via <see cref="AzureAcrTaskUpdateSettings.BaseImageTriggerEnabled"/></li>
        ///     <li><c>--base-image-trigger-type</c> via <see cref="AzureAcrTaskUpdateSettings.BaseImageTriggerType"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureAcrTaskUpdateSettings.Branch"/></li>
        ///     <li><c>--commit-trigger-enabled</c> via <see cref="AzureAcrTaskUpdateSettings.CommitTriggerEnabled"/></li>
        ///     <li><c>--context</c> via <see cref="AzureAcrTaskUpdateSettings.Context"/></li>
        ///     <li><c>--cpu</c> via <see cref="AzureAcrTaskUpdateSettings.Cpu"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskUpdateSettings.Debug"/></li>
        ///     <li><c>--file</c> via <see cref="AzureAcrTaskUpdateSettings.File"/></li>
        ///     <li><c>--git-access-token</c> via <see cref="AzureAcrTaskUpdateSettings.GitAccessToken"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskUpdateSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrTaskUpdateSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskUpdateSettings.Name"/></li>
        ///     <li><c>--no-cache</c> via <see cref="AzureAcrTaskUpdateSettings.NoCache"/></li>
        ///     <li><c>--no-push</c> via <see cref="AzureAcrTaskUpdateSettings.NoPush"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskUpdateSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="AzureAcrTaskUpdateSettings.Platform"/></li>
        ///     <li><c>--pull-request-trigger-enabled</c> via <see cref="AzureAcrTaskUpdateSettings.PullRequestTriggerEnabled"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskUpdateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskUpdateSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--secret-arg</c> via <see cref="AzureAcrTaskUpdateSettings.SecretArg"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrTaskUpdateSettings.Set"/></li>
        ///     <li><c>--set-secret</c> via <see cref="AzureAcrTaskUpdateSettings.SetSecret"/></li>
        ///     <li><c>--status</c> via <see cref="AzureAcrTaskUpdateSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskUpdateSettings.Subscription"/></li>
        ///     <li><c>--target</c> via <see cref="AzureAcrTaskUpdateSettings.Target"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAcrTaskUpdateSettings.Timeout"/></li>
        ///     <li><c>--values</c> via <see cref="AzureAcrTaskUpdateSettings.Values"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskUpdate(Configure<AzureAcrTaskUpdateSettings> configurator)
        {
            return AzureAcrTaskUpdate(configurator(new AzureAcrTaskUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--arg</c> via <see cref="AzureAcrTaskUpdateSettings.Arg"/></li>
        ///     <li><c>--auth-mode</c> via <see cref="AzureAcrTaskUpdateSettings.AuthMode"/></li>
        ///     <li><c>--base-image-trigger-enabled</c> via <see cref="AzureAcrTaskUpdateSettings.BaseImageTriggerEnabled"/></li>
        ///     <li><c>--base-image-trigger-type</c> via <see cref="AzureAcrTaskUpdateSettings.BaseImageTriggerType"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureAcrTaskUpdateSettings.Branch"/></li>
        ///     <li><c>--commit-trigger-enabled</c> via <see cref="AzureAcrTaskUpdateSettings.CommitTriggerEnabled"/></li>
        ///     <li><c>--context</c> via <see cref="AzureAcrTaskUpdateSettings.Context"/></li>
        ///     <li><c>--cpu</c> via <see cref="AzureAcrTaskUpdateSettings.Cpu"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskUpdateSettings.Debug"/></li>
        ///     <li><c>--file</c> via <see cref="AzureAcrTaskUpdateSettings.File"/></li>
        ///     <li><c>--git-access-token</c> via <see cref="AzureAcrTaskUpdateSettings.GitAccessToken"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskUpdateSettings.Help"/></li>
        ///     <li><c>--image</c> via <see cref="AzureAcrTaskUpdateSettings.Image"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskUpdateSettings.Name"/></li>
        ///     <li><c>--no-cache</c> via <see cref="AzureAcrTaskUpdateSettings.NoCache"/></li>
        ///     <li><c>--no-push</c> via <see cref="AzureAcrTaskUpdateSettings.NoPush"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskUpdateSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="AzureAcrTaskUpdateSettings.Platform"/></li>
        ///     <li><c>--pull-request-trigger-enabled</c> via <see cref="AzureAcrTaskUpdateSettings.PullRequestTriggerEnabled"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskUpdateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskUpdateSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--secret-arg</c> via <see cref="AzureAcrTaskUpdateSettings.SecretArg"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrTaskUpdateSettings.Set"/></li>
        ///     <li><c>--set-secret</c> via <see cref="AzureAcrTaskUpdateSettings.SetSecret"/></li>
        ///     <li><c>--status</c> via <see cref="AzureAcrTaskUpdateSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskUpdateSettings.Subscription"/></li>
        ///     <li><c>--target</c> via <see cref="AzureAcrTaskUpdateSettings.Target"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAcrTaskUpdateSettings.Timeout"/></li>
        ///     <li><c>--values</c> via <see cref="AzureAcrTaskUpdateSettings.Values"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskUpdate(CombinatorialConfigure<AzureAcrTaskUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskUpdate, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskUpdateRun(AzureAcrTaskUpdateRunSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskUpdateRunSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskUpdateRunSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskUpdateRunSettings.Help"/></li>
        ///     <li><c>--no-archive</c> via <see cref="AzureAcrTaskUpdateRunSettings.NoArchive"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskUpdateRunSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskUpdateRunSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskUpdateRunSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskUpdateRunSettings.ResourceGroup"/></li>
        ///     <li><c>--run-id</c> via <see cref="AzureAcrTaskUpdateRunSettings.RunId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskUpdateRunSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskUpdateRunSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskUpdateRun(Configure<AzureAcrTaskUpdateRunSettings> configurator)
        {
            return AzureAcrTaskUpdateRun(configurator(new AzureAcrTaskUpdateRunSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskUpdateRunSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskUpdateRunSettings.Help"/></li>
        ///     <li><c>--no-archive</c> via <see cref="AzureAcrTaskUpdateRunSettings.NoArchive"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskUpdateRunSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskUpdateRunSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskUpdateRunSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskUpdateRunSettings.ResourceGroup"/></li>
        ///     <li><c>--run-id</c> via <see cref="AzureAcrTaskUpdateRunSettings.RunId"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskUpdateRunSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskUpdateRunSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskUpdateRunSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskUpdateRun(CombinatorialConfigure<AzureAcrTaskUpdateRunSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskUpdateRun, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrWebhookCreate(AzureAcrWebhookCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrWebhookCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--actions</c> via <see cref="AzureAcrWebhookCreateSettings.Actions"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookCreateSettings.Debug"/></li>
        ///     <li><c>--headers</c> via <see cref="AzureAcrWebhookCreateSettings.Headers"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookCreateSettings.Help"/></li>
        ///     <li><c>--location</c> via <see cref="AzureAcrWebhookCreateSettings.Location"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookCreateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookCreateSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--scope</c> via <see cref="AzureAcrWebhookCreateSettings.Scope"/></li>
        ///     <li><c>--status</c> via <see cref="AzureAcrWebhookCreateSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAcrWebhookCreateSettings.Tags"/></li>
        ///     <li><c>--uri</c> via <see cref="AzureAcrWebhookCreateSettings.Uri"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrWebhookCreate(Configure<AzureAcrWebhookCreateSettings> configurator)
        {
            return AzureAcrWebhookCreate(configurator(new AzureAcrWebhookCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--actions</c> via <see cref="AzureAcrWebhookCreateSettings.Actions"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookCreateSettings.Debug"/></li>
        ///     <li><c>--headers</c> via <see cref="AzureAcrWebhookCreateSettings.Headers"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookCreateSettings.Help"/></li>
        ///     <li><c>--location</c> via <see cref="AzureAcrWebhookCreateSettings.Location"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookCreateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookCreateSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--scope</c> via <see cref="AzureAcrWebhookCreateSettings.Scope"/></li>
        ///     <li><c>--status</c> via <see cref="AzureAcrWebhookCreateSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAcrWebhookCreateSettings.Tags"/></li>
        ///     <li><c>--uri</c> via <see cref="AzureAcrWebhookCreateSettings.Uri"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrWebhookCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrWebhookCreate(CombinatorialConfigure<AzureAcrWebhookCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrWebhookCreate, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrWebhookDelete(AzureAcrWebhookDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrWebhookDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookDeleteSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookDeleteSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrWebhookDelete(Configure<AzureAcrWebhookDeleteSettings> configurator)
        {
            return AzureAcrWebhookDelete(configurator(new AzureAcrWebhookDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookDeleteSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookDeleteSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrWebhookDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrWebhookDelete(CombinatorialConfigure<AzureAcrWebhookDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrWebhookDelete, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrWebhookGetConfig(AzureAcrWebhookGetConfigSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrWebhookGetConfigSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookGetConfigSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookGetConfigSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookGetConfigSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookGetConfigSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookGetConfigSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookGetConfigSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookGetConfigSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookGetConfigSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookGetConfigSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrWebhookGetConfig(Configure<AzureAcrWebhookGetConfigSettings> configurator)
        {
            return AzureAcrWebhookGetConfig(configurator(new AzureAcrWebhookGetConfigSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookGetConfigSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookGetConfigSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookGetConfigSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookGetConfigSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookGetConfigSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookGetConfigSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookGetConfigSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookGetConfigSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookGetConfigSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrWebhookGetConfigSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrWebhookGetConfig(CombinatorialConfigure<AzureAcrWebhookGetConfigSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrWebhookGetConfig, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrWebhookList(AzureAcrWebhookListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrWebhookListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookListSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookListSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrWebhookList(Configure<AzureAcrWebhookListSettings> configurator)
        {
            return AzureAcrWebhookList(configurator(new AzureAcrWebhookListSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookListSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookListSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrWebhookListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrWebhookList(CombinatorialConfigure<AzureAcrWebhookListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrWebhookList, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrWebhookListEvents(AzureAcrWebhookListEventsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrWebhookListEventsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookListEventsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookListEventsSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookListEventsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookListEventsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookListEventsSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookListEventsSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookListEventsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookListEventsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookListEventsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrWebhookListEvents(Configure<AzureAcrWebhookListEventsSettings> configurator)
        {
            return AzureAcrWebhookListEvents(configurator(new AzureAcrWebhookListEventsSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookListEventsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookListEventsSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookListEventsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookListEventsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookListEventsSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookListEventsSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookListEventsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookListEventsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookListEventsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrWebhookListEventsSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrWebhookListEvents(CombinatorialConfigure<AzureAcrWebhookListEventsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrWebhookListEvents, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrWebhookPing(AzureAcrWebhookPingSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrWebhookPingSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookPingSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookPingSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookPingSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookPingSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookPingSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookPingSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookPingSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookPingSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookPingSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrWebhookPing(Configure<AzureAcrWebhookPingSettings> configurator)
        {
            return AzureAcrWebhookPing(configurator(new AzureAcrWebhookPingSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookPingSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookPingSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookPingSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookPingSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookPingSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookPingSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookPingSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookPingSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookPingSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrWebhookPingSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrWebhookPing(CombinatorialConfigure<AzureAcrWebhookPingSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrWebhookPing, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrWebhookShow(AzureAcrWebhookShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrWebhookShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookShowSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookShowSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrWebhookShow(Configure<AzureAcrWebhookShowSettings> configurator)
        {
            return AzureAcrWebhookShow(configurator(new AzureAcrWebhookShowSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookShowSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookShowSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrWebhookShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrWebhookShow(CombinatorialConfigure<AzureAcrWebhookShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrWebhookShow, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrWebhookUpdate(AzureAcrWebhookUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrWebhookUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--actions</c> via <see cref="AzureAcrWebhookUpdateSettings.Actions"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAcrWebhookUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookUpdateSettings.Debug"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAcrWebhookUpdateSettings.ForceString"/></li>
        ///     <li><c>--headers</c> via <see cref="AzureAcrWebhookUpdateSettings.Headers"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookUpdateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookUpdateSettings.Registry"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAcrWebhookUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--scope</c> via <see cref="AzureAcrWebhookUpdateSettings.Scope"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrWebhookUpdateSettings.Set"/></li>
        ///     <li><c>--status</c> via <see cref="AzureAcrWebhookUpdateSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAcrWebhookUpdateSettings.Tags"/></li>
        ///     <li><c>--uri</c> via <see cref="AzureAcrWebhookUpdateSettings.Uri"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrWebhookUpdate(Configure<AzureAcrWebhookUpdateSettings> configurator)
        {
            return AzureAcrWebhookUpdate(configurator(new AzureAcrWebhookUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--actions</c> via <see cref="AzureAcrWebhookUpdateSettings.Actions"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAcrWebhookUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAcrWebhookUpdateSettings.Debug"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAcrWebhookUpdateSettings.ForceString"/></li>
        ///     <li><c>--headers</c> via <see cref="AzureAcrWebhookUpdateSettings.Headers"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrWebhookUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrWebhookUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrWebhookUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrWebhookUpdateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrWebhookUpdateSettings.Registry"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAcrWebhookUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrWebhookUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--scope</c> via <see cref="AzureAcrWebhookUpdateSettings.Scope"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAcrWebhookUpdateSettings.Set"/></li>
        ///     <li><c>--status</c> via <see cref="AzureAcrWebhookUpdateSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrWebhookUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAcrWebhookUpdateSettings.Tags"/></li>
        ///     <li><c>--uri</c> via <see cref="AzureAcrWebhookUpdateSettings.Uri"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrWebhookUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrWebhookUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrWebhookUpdate(CombinatorialConfigure<AzureAcrWebhookUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrWebhookUpdate, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrConfigContentTrustShow(AzureAcrConfigContentTrustShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrConfigContentTrustShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrConfigContentTrustShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrConfigContentTrustShow(Configure<AzureAcrConfigContentTrustShowSettings> configurator)
        {
            return AzureAcrConfigContentTrustShow(configurator(new AzureAcrConfigContentTrustShowSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrConfigContentTrustShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrConfigContentTrustShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrConfigContentTrustShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrConfigContentTrustShow(CombinatorialConfigure<AzureAcrConfigContentTrustShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrConfigContentTrustShow, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrConfigContentTrustUpdate(AzureAcrConfigContentTrustUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrConfigContentTrustUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--status</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrConfigContentTrustUpdate(Configure<AzureAcrConfigContentTrustUpdateSettings> configurator)
        {
            return AzureAcrConfigContentTrustUpdate(configurator(new AzureAcrConfigContentTrustUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--status</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Status"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrConfigContentTrustUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrConfigContentTrustUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrConfigContentTrustUpdate(CombinatorialConfigure<AzureAcrConfigContentTrustUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrConfigContentTrustUpdate, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrHelmRepoAdd(AzureAcrHelmRepoAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrHelmRepoAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrHelmRepoAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrHelmRepoAddSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrHelmRepoAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrHelmRepoAddSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrHelmRepoAddSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrHelmRepoAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrHelmRepoAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrHelmRepoAddSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrHelmRepoAddSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrHelmRepoAddSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrHelmRepoAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrHelmRepoAdd(Configure<AzureAcrHelmRepoAddSettings> configurator)
        {
            return AzureAcrHelmRepoAdd(configurator(new AzureAcrHelmRepoAddSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrHelmRepoAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrHelmRepoAddSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrHelmRepoAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrHelmRepoAddSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrHelmRepoAddSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrHelmRepoAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrHelmRepoAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrHelmRepoAddSettings.Subscription"/></li>
        ///     <li><c>--suffix</c> via <see cref="AzureAcrHelmRepoAddSettings.Suffix"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrHelmRepoAddSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrHelmRepoAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrHelmRepoAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrHelmRepoAdd(CombinatorialConfigure<AzureAcrHelmRepoAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrHelmRepoAdd, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskCredentialAdd(AzureAcrTaskCredentialAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskCredentialAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskCredentialAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskCredentialAddSettings.Help"/></li>
        ///     <li><c>--login-server</c> via <see cref="AzureAcrTaskCredentialAddSettings.LoginServer"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskCredentialAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskCredentialAddSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrTaskCredentialAddSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskCredentialAddSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskCredentialAddSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskCredentialAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskCredentialAddSettings.Subscription"/></li>
        ///     <li><c>--use-identity</c> via <see cref="AzureAcrTaskCredentialAddSettings.UseIdentity"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrTaskCredentialAddSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskCredentialAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskCredentialAdd(Configure<AzureAcrTaskCredentialAddSettings> configurator)
        {
            return AzureAcrTaskCredentialAdd(configurator(new AzureAcrTaskCredentialAddSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskCredentialAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskCredentialAddSettings.Help"/></li>
        ///     <li><c>--login-server</c> via <see cref="AzureAcrTaskCredentialAddSettings.LoginServer"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskCredentialAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskCredentialAddSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrTaskCredentialAddSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskCredentialAddSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskCredentialAddSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskCredentialAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskCredentialAddSettings.Subscription"/></li>
        ///     <li><c>--use-identity</c> via <see cref="AzureAcrTaskCredentialAddSettings.UseIdentity"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrTaskCredentialAddSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskCredentialAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskCredentialAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskCredentialAdd(CombinatorialConfigure<AzureAcrTaskCredentialAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskCredentialAdd, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskCredentialList(AzureAcrTaskCredentialListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskCredentialListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskCredentialListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskCredentialListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskCredentialListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskCredentialListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskCredentialListSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskCredentialListSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskCredentialListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskCredentialListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskCredentialListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskCredentialList(Configure<AzureAcrTaskCredentialListSettings> configurator)
        {
            return AzureAcrTaskCredentialList(configurator(new AzureAcrTaskCredentialListSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskCredentialListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskCredentialListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskCredentialListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskCredentialListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskCredentialListSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskCredentialListSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskCredentialListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskCredentialListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskCredentialListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskCredentialListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskCredentialList(CombinatorialConfigure<AzureAcrTaskCredentialListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskCredentialList, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskCredentialRemove(AzureAcrTaskCredentialRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskCredentialRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Help"/></li>
        ///     <li><c>--login-server</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.LoginServer"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskCredentialRemove(Configure<AzureAcrTaskCredentialRemoveSettings> configurator)
        {
            return AzureAcrTaskCredentialRemove(configurator(new AzureAcrTaskCredentialRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Help"/></li>
        ///     <li><c>--login-server</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.LoginServer"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskCredentialRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskCredentialRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskCredentialRemove(CombinatorialConfigure<AzureAcrTaskCredentialRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskCredentialRemove, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskCredentialUpdate(AzureAcrTaskCredentialUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskCredentialUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Help"/></li>
        ///     <li><c>--login-server</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.LoginServer"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Subscription"/></li>
        ///     <li><c>--use-identity</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.UseIdentity"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskCredentialUpdate(Configure<AzureAcrTaskCredentialUpdateSettings> configurator)
        {
            return AzureAcrTaskCredentialUpdate(configurator(new AzureAcrTaskCredentialUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Help"/></li>
        ///     <li><c>--login-server</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.LoginServer"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Subscription"/></li>
        ///     <li><c>--use-identity</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.UseIdentity"/></li>
        ///     <li><c>--username</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Username"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskCredentialUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskCredentialUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskCredentialUpdate(CombinatorialConfigure<AzureAcrTaskCredentialUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskCredentialUpdate, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskIdentityAssign(AzureAcrTaskIdentityAssignSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskIdentityAssignSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Help"/></li>
        ///     <li><c>--identities</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Identities"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskIdentityAssignSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskIdentityAssign(Configure<AzureAcrTaskIdentityAssignSettings> configurator)
        {
            return AzureAcrTaskIdentityAssign(configurator(new AzureAcrTaskIdentityAssignSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Help"/></li>
        ///     <li><c>--identities</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Identities"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskIdentityAssignSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskIdentityAssignSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskIdentityAssignSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskIdentityAssign(CombinatorialConfigure<AzureAcrTaskIdentityAssignSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskIdentityAssign, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskIdentityRemove(AzureAcrTaskIdentityRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskIdentityRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Help"/></li>
        ///     <li><c>--identities</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Identities"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskIdentityRemove(Configure<AzureAcrTaskIdentityRemoveSettings> configurator)
        {
            return AzureAcrTaskIdentityRemove(configurator(new AzureAcrTaskIdentityRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Help"/></li>
        ///     <li><c>--identities</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Identities"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskIdentityRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskIdentityRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskIdentityRemove(CombinatorialConfigure<AzureAcrTaskIdentityRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskIdentityRemove, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAcrTaskIdentityShow(AzureAcrTaskIdentityShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAcrTaskIdentityShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskIdentityShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskIdentityShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskIdentityShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskIdentityShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskIdentityShowSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskIdentityShowSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskIdentityShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskIdentityShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskIdentityShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAcrTaskIdentityShow(Configure<AzureAcrTaskIdentityShowSettings> configurator)
        {
            return AzureAcrTaskIdentityShow(configurator(new AzureAcrTaskIdentityShowSettings()));
        }
        /// <summary>
        ///   <p>Manage private registries with Azure Container Registries.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAcrTaskIdentityShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAcrTaskIdentityShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAcrTaskIdentityShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAcrTaskIdentityShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAcrTaskIdentityShowSettings.Query"/></li>
        ///     <li><c>--registry</c> via <see cref="AzureAcrTaskIdentityShowSettings.Registry"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAcrTaskIdentityShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAcrTaskIdentityShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAcrTaskIdentityShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAcrTaskIdentityShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAcrTaskIdentityShow(CombinatorialConfigure<AzureAcrTaskIdentityShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAcrTaskIdentityShow, AzureAcrLogger, degreeOfParallelism, completeOnFailure);
        }
    }
    #region AzureAcrBuildSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrBuildSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Auth mode of the source registry.
        /// </summary>
        public virtual AcrAuthMode AuthMode { get; internal set; }
        /// <summary>
        ///   Build argument in '--build-arg name[=value]' format. Multiples supported by passing --build-arg multiple times.
        /// </summary>
        public virtual string BuildArg { get; internal set; }
        /// <summary>
        ///   The relative path of the the docker file to the source code root folder. Default to 'Dockerfile'.
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   The name and tag of the image using the format: '-t repo/image:tag'. Multiple tags are supported by passing -t multiple times.
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   Indicates whether the logs should be displayed in raw format.
        /// </summary>
        public virtual bool? NoFormat { get; internal set; }
        /// <summary>
        ///   Do not show logs after successfully queuing the build.
        /// </summary>
        public virtual bool? NoLogs { get; internal set; }
        /// <summary>
        ///   Indicates whether the image built should be pushed to the registry.
        /// </summary>
        public virtual bool? NoPush { get; internal set; }
        /// <summary>
        ///   Do not wait for the build to complete and return immediately after queuing the build.
        /// </summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary>
        ///   The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Secret build argument in '--secret-build-arg name[=value]' format. Multiples supported by passing '--secret-build-arg name[=value]' multiple times.
        /// </summary>
        public virtual string SecretBuildArg { get; internal set; }
        /// <summary>
        ///   The name of the target build stage.
        /// </summary>
        public virtual string Target { get; internal set; }
        /// <summary>
        ///   The timeout in seconds.
        /// </summary>
        public virtual string Timeout { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr build")
              .Add("--registry {value}", Registry)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--build-arg {value}", BuildArg)
              .Add("--file {value}", File)
              .Add("--image {value}", Image)
              .Add("--no-format", NoFormat)
              .Add("--no-logs", NoLogs)
              .Add("--no-push", NoPush)
              .Add("--no-wait", NoWait)
              .Add("--platform {value}", Platform)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--secret-build-arg {value}", SecretBuildArg, secret: true)
              .Add("--target {value}", Target)
              .Add("--timeout {value}", Timeout)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrCheckHealthSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrCheckHealthSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   Ignore errors, displaying them only at the final.
        /// </summary>
        public virtual string IgnoreErrors { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Do not prompt for confirmation.
        /// </summary>
        public virtual string Yes { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr check-health")
              .Add("--ignore-errors {value}", IgnoreErrors)
              .Add("--name {value}", Name)
              .Add("--yes {value}", Yes)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrCheckNameSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrCheckNameSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr check-name")
              .Add("--name {value}", Name)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The SKU of the container registry.
        /// </summary>
        public virtual AcrSku Sku { get; internal set; }
        /// <summary>
        ///   Indicates whether the admin user is enabled.
        /// </summary>
        public virtual bool? AdminEnabled { get; internal set; }
        /// <summary>
        ///   Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.
        /// </summary>
        public virtual string Location { get; internal set; }
        /// <summary>
        ///   Provide the name of an existing storage account if you're recreating a container registry over a previous registry created storage account. Only applicable to Classic SKU.
        /// </summary>
        public virtual string StorageAccountName { get; internal set; }
        /// <summary>
        ///   Default action to apply when no rule matches. Only applicable to Premium SKU.
        /// </summary>
        public virtual AcrDefaultAction DefaultAction { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--sku {value}", Sku)
              .Add("--admin-enabled", AdminEnabled)
              .Add("--location {value}", Location)
              .Add("--storage-account-name {value}", StorageAccountName)
              .Add("--default-action {value}", DefaultAction)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr delete")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrImportSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrImportSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The source identifier will be either a source image name or a fully qualified source.
        /// </summary>
        public virtual string Source { get; internal set; }
        /// <summary>
        ///   Overwrite the existing tag of the image to be imported.
        /// </summary>
        public virtual string Force { get; internal set; }
        /// <summary>
        ///   The name and tag of the image using the format: '-t repo/image:tag'. Multiple tags are supported by passing -t multiple times.
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   The password of source container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   The source container registry can be name, login server or resource ID of the source registry.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   The repository name for a manifest-only copy of images. Multiple copies supported by passing --repository multiple times.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The username of source container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr import")
              .Add("--name {value}", Name)
              .Add("--source {value}", Source)
              .Add("--force {value}", Force)
              .Add("--image {value}", Image)
              .Add("--password {value}", Password, secret: true)
              .Add("--registry {value}", Registry)
              .Add("--repository {value}", Repository)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--username {value}", Username)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrListSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrLoginSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrLoginSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr login")
              .Add("--name {value}", Name)
              .Add("--password {value}", Password, secret: true)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--username {value}", Username)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrRunSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrRunSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Auth mode of the source registry.
        /// </summary>
        public virtual AcrAuthMode AuthMode { get; internal set; }
        /// <summary>
        ///   Commands to execute.
        /// </summary>
        public virtual string Cmd { get; internal set; }
        /// <summary>
        ///   The task template/definition file path relative to the source context. It can be '-' to pipe a file from the standard input.
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   Indicates whether the logs should be displayed in raw format.
        /// </summary>
        public virtual bool? NoFormat { get; internal set; }
        /// <summary>
        ///   Do not show logs after successfully queuing the build.
        /// </summary>
        public virtual bool? NoLogs { get; internal set; }
        /// <summary>
        ///   Do not wait for the run to complete and return immediately after queuing the run.
        /// </summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary>
        ///   The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Value in 'name[=value]' format. Multiples supported by passing --set multiple times.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Secret value in '--set name[=value]' format. Multiples supported by passing --set multiple times.
        /// </summary>
        public virtual string SetSecret { get; internal set; }
        /// <summary>
        ///   The timeout in seconds.
        /// </summary>
        public virtual string Timeout { get; internal set; }
        /// <summary>
        ///   The task values file path relative to the source context.
        /// </summary>
        public virtual string Values { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr run")
              .Add("--registry {value}", Registry)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--cmd {value}", Cmd)
              .Add("--file {value}", File)
              .Add("--no-format", NoFormat)
              .Add("--no-logs", NoLogs)
              .Add("--no-wait", NoWait)
              .Add("--platform {value}", Platform)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--set {value}", Set)
              .Add("--set-secret {value}", SetSecret, secret: true)
              .Add("--timeout {value}", Timeout)
              .Add("--values {value}", Values)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrShowUsageSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrShowUsageSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr show-usage")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Indicates whether the admin user is enabled.
        /// </summary>
        public virtual bool? AdminEnabled { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The SKU of the container registry.
        /// </summary>
        public virtual AcrSku Sku { get; internal set; }
        /// <summary>
        ///   Provide the name of an existing storage account if you're recreating a container registry over a previous registry created storage account. Only applicable to Classic SKU.
        /// </summary>
        public virtual string StorageAccountName { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   Default action to apply when no rule matches. Only applicable to Premium SKU.
        /// </summary>
        public virtual AcrDefaultAction DefaultAction { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr update")
              .Add("--name {value}", Name)
              .Add("--admin-enabled", AdminEnabled)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--sku {value}", Sku)
              .Add("--storage-account-name {value}", StorageAccountName)
              .Add("--tags {value}", Tags)
              .Add("--default-action {value}", DefaultAction)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrConfigSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrConfigSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr config")
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrCredentialRenewSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrCredentialRenewSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of password to regenerate.
        /// </summary>
        public virtual AcrCredentialRenewPasswordName PasswordName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr credential renew")
              .Add("--name {value}", Name)
              .Add("--password-name {value}", PasswordName, secret: true)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrCredentialShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrCredentialShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr credential show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrHelmDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrHelmDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Only delete the provenance file.
        /// </summary>
        public virtual string Prov { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   The helm chart version.
        /// </summary>
        public virtual string Version { get; internal set; }
        /// <summary>
        ///   Do not prompt for confirmation.
        /// </summary>
        public virtual string Yes { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr helm delete")
              .Add("--name {value}", Name)
              .Add("--password {value}", Password, secret: true)
              .Add("--prov {value}", Prov)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--username {value}", Username)
              .Add("--version {value}", Version)
              .Add("--yes {value}", Yes)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrHelmListSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrHelmListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr helm list")
              .Add("--name {value}", Name)
              .Add("--password {value}", Password, secret: true)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--username {value}", Username)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrHelmPushSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrHelmPushSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Overwrite the existing chart package.
        /// </summary>
        public virtual string Force { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr helm push")
              .Add("--name {value}", Name)
              .Add("--force {value}", Force)
              .Add("--password {value}", Password, secret: true)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--username {value}", Username)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrHelmShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrHelmShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   The helm chart version.
        /// </summary>
        public virtual string Version { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr helm show")
              .Add("--name {value}", Name)
              .Add("--password {value}", Password, secret: true)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--username {value}", Username)
              .Add("--version {value}", Version)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrNetworkRuleAddSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrNetworkRuleAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   IPv4 address or CIDR range.
        /// </summary>
        public virtual string IpAddress { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.
        /// </summary>
        public virtual string Subnet { get; internal set; }
        /// <summary>
        ///   Name of a virtual network.
        /// </summary>
        public virtual string VnetName { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr network-rule add")
              .Add("--name {value}", Name)
              .Add("--ip-address {value}", IpAddress)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subnet {value}", Subnet)
              .Add("--vnet-name {value}", VnetName)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrNetworkRuleListSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrNetworkRuleListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr network-rule list")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrNetworkRuleRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrNetworkRuleRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   IPv4 address or CIDR range.
        /// </summary>
        public virtual string IpAddress { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.
        /// </summary>
        public virtual string Subnet { get; internal set; }
        /// <summary>
        ///   Name of a virtual network.
        /// </summary>
        public virtual string VnetName { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr network-rule remove")
              .Add("--name {value}", Name)
              .Add("--ip-address {value}", IpAddress)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subnet {value}", Subnet)
              .Add("--vnet-name {value}", VnetName)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrPackBuildSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrPackBuildSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name and tag of the image using the format: '-t repo/image:tag'.
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Auth mode of the source registry.
        /// </summary>
        public virtual AcrAuthMode AuthMode { get; internal set; }
        /// <summary>
        ///   The name and tag of a Buildpack builder image.
        /// </summary>
        public virtual string Builder { get; internal set; }
        /// <summary>
        ///   Indicates whether the logs should be displayed in raw format.
        /// </summary>
        public virtual bool? NoFormat { get; internal set; }
        /// <summary>
        ///   Do not show logs after successfully queuing the build.
        /// </summary>
        public virtual bool? NoLogs { get; internal set; }
        /// <summary>
        ///   Do not wait for the run to complete and return immediately after queuing the run.
        /// </summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary>
        ///   The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Pull the latest builder and run images before use.
        /// </summary>
        public virtual string Pull { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The timeout in seconds.
        /// </summary>
        public virtual string Timeout { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr pack build")
              .Add("--image {value}", Image)
              .Add("--registry {value}", Registry)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--builder {value}", Builder)
              .Add("--no-format", NoFormat)
              .Add("--no-logs", NoLogs)
              .Add("--no-wait", NoWait)
              .Add("--platform {value}", Platform)
              .Add("--pull {value}", Pull)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--timeout {value}", Timeout)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrReplicationCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrReplicationCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.
        /// </summary>
        public virtual string Location { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   The name of the replication. Default to the location name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr replication create")
              .Add("--location {value}", Location)
              .Add("--registry {value}", Registry)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--tags {value}", Tags)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrReplicationDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrReplicationDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the replication.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr replication delete")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrReplicationListSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrReplicationListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr replication list")
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrReplicationShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrReplicationShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the replication.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr replication show")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrReplicationUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrReplicationUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the replication.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr replication update")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--tags {value}", Tags)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrRepositoryDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrRepositoryDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   The name of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Do not prompt for confirmation.
        /// </summary>
        public virtual string Yes { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr repository delete")
              .Add("--name {value}", Name)
              .Add("--image {value}", Image)
              .Add("--password {value}", Password, secret: true)
              .Add("--repository {value}", Repository)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--username {value}", Username)
              .Add("--yes {value}", Yes)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrRepositoryListSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrRepositoryListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   Limit the number of items in the results.
        /// </summary>
        public virtual int? Top { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr repository list")
              .Add("--name {value}", Name)
              .Add("--password {value}", Password, secret: true)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--top {value}", Top)
              .Add("--username {value}", Username)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrRepositoryShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrRepositoryShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   The name of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr repository show")
              .Add("--name {value}", Name)
              .Add("--image {value}", Image)
              .Add("--password {value}", Password, secret: true)
              .Add("--repository {value}", Repository)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--username {value}", Username)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrRepositoryShowManifestsSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrRepositoryShowManifestsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Show detailed information.
        /// </summary>
        public virtual string Detail { get; internal set; }
        /// <summary>
        ///   Order the items in the results. Default to alphabetical order of names.
        /// </summary>
        public virtual AcrRepositoryOrderby Orderby { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   Limit the number of items in the results.
        /// </summary>
        public virtual int? Top { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr repository show-manifests")
              .Add("--name {value}", Name)
              .Add("--repository {value}", Repository)
              .Add("--detail {value}", Detail)
              .Add("--orderby {value}", Orderby)
              .Add("--password {value}", Password, secret: true)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--top {value}", Top)
              .Add("--username {value}", Username)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrRepositoryShowTagsSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrRepositoryShowTagsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Show detailed information.
        /// </summary>
        public virtual string Detail { get; internal set; }
        /// <summary>
        ///   Order the items in the results. Default to alphabetical order of names.
        /// </summary>
        public virtual AcrRepositoryOrderby Orderby { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   Limit the number of items in the results.
        /// </summary>
        public virtual int? Top { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr repository show-tags")
              .Add("--name {value}", Name)
              .Add("--repository {value}", Repository)
              .Add("--detail {value}", Detail)
              .Add("--orderby {value}", Orderby)
              .Add("--password {value}", Password, secret: true)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--top {value}", Top)
              .Add("--username {value}", Username)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrRepositoryUntagSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrRepositoryUntagSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the image. May include a tag in the format 'name:tag'.
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr repository untag")
              .Add("--image {value}", Image)
              .Add("--name {value}", Name)
              .Add("--password {value}", Password, secret: true)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--username {value}", Username)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrRepositoryUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrRepositoryUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Indicates whether delete operation is allowed.
        /// </summary>
        public virtual bool? DeleteEnabled { get; internal set; }
        /// <summary>
        ///   The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   Indicates whether this item shows in list operation results.
        /// </summary>
        public virtual bool? ListEnabled { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Indicates whether read operation is allowed.
        /// </summary>
        public virtual bool? ReadEnabled { get; internal set; }
        /// <summary>
        ///   The name of the repository.
        /// </summary>
        public virtual string Repository { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Indicates whether write or delete operation is allowed.
        /// </summary>
        public virtual bool? WriteEnabled { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr repository update")
              .Add("--name {value}", Name)
              .Add("--delete-enabled", DeleteEnabled)
              .Add("--image {value}", Image)
              .Add("--list-enabled", ListEnabled)
              .Add("--password {value}", Password, secret: true)
              .Add("--read-enabled", ReadEnabled)
              .Add("--repository {value}", Repository)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--username {value}", Username)
              .Add("--write-enabled", WriteEnabled)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskCancelRunSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskCancelRunSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   The unique run identifier.
        /// </summary>
        public virtual string RunId { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task cancel-run")
              .Add("--registry {value}", Registry)
              .Add("--run-id {value}", RunId)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The full URL to the source code repository (Requires '.git' suffix for a github repo). If '/dev/null' is specified, the value will be set to None and ignored.
        /// </summary>
        public virtual string Context { get; internal set; }
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Build argument in '--arg name[=value]' format. Multiples supported by passing '--arg` multiple times.
        /// </summary>
        public virtual string Arg { get; internal set; }
        /// <summary>
        ///   Assigns managed identities to the task. Use '[system]' to refer to the system-assigned identity or a resource ID to refer to a user-assigned identity.
        /// </summary>
        public virtual string AssignIdentity { get; internal set; }
        /// <summary>
        ///   Auth mode of the source registry.
        /// </summary>
        public virtual AcrAuthMode AuthMode { get; internal set; }
        /// <summary>
        ///   Indicates whether the base image trigger is enabled.
        /// </summary>
        public virtual bool? BaseImageTriggerEnabled { get; internal set; }
        /// <summary>
        ///   The name of the base image trigger.
        /// </summary>
        public virtual string BaseImageTriggerName { get; internal set; }
        /// <summary>
        ///   The type of the auto trigger for base image dependency updates.
        /// </summary>
        public virtual AcrTaskBaseImageTriggerType BaseImageTriggerType { get; internal set; }
        /// <summary>
        ///   The source control branch name.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Commands to execute.
        /// </summary>
        public virtual string Cmd { get; internal set; }
        /// <summary>
        ///   Indicates whether the source control commit trigger is enabled.
        /// </summary>
        public virtual bool? CommitTriggerEnabled { get; internal set; }
        /// <summary>
        ///   The CPU configuration in terms of number of cores required for the run.
        /// </summary>
        public virtual string Cpu { get; internal set; }
        /// <summary>
        ///   The relative path of the the task/docker file to the source code root folder. Task files must be suffixed with '.yaml' or piped from the standard input using '-'.
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   The access token used to access the source control provider.
        /// </summary>
        public virtual string GitAccessToken { get; internal set; }
        /// <summary>
        ///   The name and tag of the image using the format: '-t repo/image:tag'. Multiple tags are supported by passing -t multiple times.
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   Indicates whether the image cache is enabled.
        /// </summary>
        public virtual bool? NoCache { get; internal set; }
        /// <summary>
        ///   Indicates whether the image built should be pushed to the registry.
        /// </summary>
        public virtual bool? NoPush { get; internal set; }
        /// <summary>
        ///   The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Indicates whether the source control pull request trigger is enabled.
        /// </summary>
        public virtual bool? PullRequestTriggerEnabled { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Secret build argument in '--secret-arg name[=value]' format. Multiples supported by passing --secret-arg multiple times.
        /// </summary>
        public virtual string SecretArg { get; internal set; }
        /// <summary>
        ///   Task value in '--set name[=value]' format. Multiples supported by passing --set multiple times.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Secret task value in '--set-secret name[=value]' format. Multiples supported by passing --set-secret multiple times.
        /// </summary>
        public virtual string SetSecret { get; internal set; }
        /// <summary>
        ///   The name of the source trigger.
        /// </summary>
        public virtual string SourceTriggerName { get; internal set; }
        /// <summary>
        ///   The current status of task.
        /// </summary>
        public virtual AcrTaskStatus Status { get; internal set; }
        /// <summary>
        ///   The name of the target build stage.
        /// </summary>
        public virtual string Target { get; internal set; }
        /// <summary>
        ///   The timeout in seconds.
        /// </summary>
        public virtual string Timeout { get; internal set; }
        /// <summary>
        ///   The task values/parameters file path relative to the source context.
        /// </summary>
        public virtual string Values { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task create")
              .Add("--context {value}", Context)
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--arg {value}", Arg)
              .Add("--assign-identity {value}", AssignIdentity)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--base-image-trigger-enabled", BaseImageTriggerEnabled)
              .Add("--base-image-trigger-name {value}", BaseImageTriggerName)
              .Add("--base-image-trigger-type {value}", BaseImageTriggerType)
              .Add("--branch {value}", Branch)
              .Add("--cmd {value}", Cmd)
              .Add("--commit-trigger-enabled", CommitTriggerEnabled)
              .Add("--cpu {value}", Cpu)
              .Add("--file {value}", File)
              .Add("--git-access-token {value}", GitAccessToken)
              .Add("--image {value}", Image)
              .Add("--no-cache", NoCache)
              .Add("--no-push", NoPush)
              .Add("--platform {value}", Platform)
              .Add("--pull-request-trigger-enabled", PullRequestTriggerEnabled)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--secret-arg {value}", SecretArg, secret: true)
              .Add("--set {value}", Set)
              .Add("--set-secret {value}", SetSecret, secret: true)
              .Add("--source-trigger-name {value}", SourceTriggerName)
              .Add("--status {value}", Status)
              .Add("--target {value}", Target)
              .Add("--timeout {value}", Timeout)
              .Add("--values {value}", Values)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task delete")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskListSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task list")
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskListRunsSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskListRunsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The current status of run.
        /// </summary>
        public virtual AcrTaskListRunsRunStatus RunStatus { get; internal set; }
        /// <summary>
        ///   Limit the number of latest runs in the results.
        /// </summary>
        public virtual int? Top { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task list-runs")
              .Add("--registry {value}", Registry)
              .Add("--image {value}", Image)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--run-status {value}", RunStatus)
              .Add("--top {value}", Top)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskLogsSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskLogsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The unique run identifier.
        /// </summary>
        public virtual string RunId { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task logs")
              .Add("--registry {value}", Registry)
              .Add("--image {value}", Image)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--run-id {value}", RunId)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskRunSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskRunSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Do not show logs after successfully queuing the build.
        /// </summary>
        public virtual bool? NoLogs { get; internal set; }
        /// <summary>
        ///   Do not wait for the run to complete and return immediately after queuing the run.
        /// </summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Task value in '--set name[=value]' format. Multiples supported by passing --set multiple times.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Secret task value in '--set-secret name[=value]' format. Multiples supported by passing --set-secret multiple times.
        /// </summary>
        public virtual string SetSecret { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task run")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--no-logs", NoLogs)
              .Add("--no-wait", NoWait)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--set {value}", Set)
              .Add("--set-secret {value}", SetSecret, secret: true)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Indicates whether the secure properties of a task should be returned.
        /// </summary>
        public virtual string WithSecureProperties { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task show")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--with-secure-properties {value}", WithSecureProperties)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskShowRunSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskShowRunSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   The unique run identifier.
        /// </summary>
        public virtual string RunId { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task show-run")
              .Add("--registry {value}", Registry)
              .Add("--run-id {value}", RunId)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Build argument in '--arg name[=value]' format. Multiples supported by passing '--arg` multiple times.
        /// </summary>
        public virtual string Arg { get; internal set; }
        /// <summary>
        ///   Auth mode of the source registry.
        /// </summary>
        public virtual AcrAuthMode AuthMode { get; internal set; }
        /// <summary>
        ///   Indicates whether the base image trigger is enabled.
        /// </summary>
        public virtual bool? BaseImageTriggerEnabled { get; internal set; }
        /// <summary>
        ///   The type of the auto trigger for base image dependency updates.
        /// </summary>
        public virtual AcrTaskBaseImageTriggerType BaseImageTriggerType { get; internal set; }
        /// <summary>
        ///   The source control branch name.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Indicates whether the source control commit trigger is enabled.
        /// </summary>
        public virtual bool? CommitTriggerEnabled { get; internal set; }
        /// <summary>
        ///   The full URL to the source code repository (Requires '.git' suffix for a github repo). If '/dev/null' is specified, the value will be set to None and ignored.
        /// </summary>
        public virtual string Context { get; internal set; }
        /// <summary>
        ///   The CPU configuration in terms of number of cores required for the run.
        /// </summary>
        public virtual string Cpu { get; internal set; }
        /// <summary>
        ///   The relative path of the the task/docker file to the source code root folder. Task files must be suffixed with '.yaml' or piped from the standard input using '-'.
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   The access token used to access the source control provider.
        /// </summary>
        public virtual string GitAccessToken { get; internal set; }
        /// <summary>
        ///   The name and tag of the image using the format: '-t repo/image:tag'. Multiple tags are supported by passing -t multiple times.
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   Indicates whether the image cache is enabled.
        /// </summary>
        public virtual bool? NoCache { get; internal set; }
        /// <summary>
        ///   Indicates whether the image built should be pushed to the registry.
        /// </summary>
        public virtual bool? NoPush { get; internal set; }
        /// <summary>
        ///   The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Indicates whether the source control pull request trigger is enabled.
        /// </summary>
        public virtual bool? PullRequestTriggerEnabled { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Secret build argument in '--secret-arg name[=value]' format. Multiples supported by passing --secret-arg multiple times.
        /// </summary>
        public virtual string SecretArg { get; internal set; }
        /// <summary>
        ///   Task value in '--set name[=value]' format. Multiples supported by passing --set multiple times.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Secret task value in '--set-secret name[=value]' format. Multiples supported by passing --set-secret multiple times.
        /// </summary>
        public virtual string SetSecret { get; internal set; }
        /// <summary>
        ///   The current status of task.
        /// </summary>
        public virtual AcrTaskStatus Status { get; internal set; }
        /// <summary>
        ///   The name of the target build stage.
        /// </summary>
        public virtual string Target { get; internal set; }
        /// <summary>
        ///   The timeout in seconds.
        /// </summary>
        public virtual string Timeout { get; internal set; }
        /// <summary>
        ///   The task values/parameters file path relative to the source context.
        /// </summary>
        public virtual string Values { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task update")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--arg {value}", Arg)
              .Add("--auth-mode {value}", AuthMode)
              .Add("--base-image-trigger-enabled", BaseImageTriggerEnabled)
              .Add("--base-image-trigger-type {value}", BaseImageTriggerType)
              .Add("--branch {value}", Branch)
              .Add("--commit-trigger-enabled", CommitTriggerEnabled)
              .Add("--context {value}", Context)
              .Add("--cpu {value}", Cpu)
              .Add("--file {value}", File)
              .Add("--git-access-token {value}", GitAccessToken)
              .Add("--image {value}", Image)
              .Add("--no-cache", NoCache)
              .Add("--no-push", NoPush)
              .Add("--platform {value}", Platform)
              .Add("--pull-request-trigger-enabled", PullRequestTriggerEnabled)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--secret-arg {value}", SecretArg, secret: true)
              .Add("--set {value}", Set)
              .Add("--set-secret {value}", SetSecret, secret: true)
              .Add("--status {value}", Status)
              .Add("--target {value}", Target)
              .Add("--timeout {value}", Timeout)
              .Add("--values {value}", Values)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskUpdateRunSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskUpdateRunSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   The unique run identifier.
        /// </summary>
        public virtual string RunId { get; internal set; }
        /// <summary>
        ///   Indicates whether the run should be archived.
        /// </summary>
        public virtual bool? NoArchive { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task update-run")
              .Add("--registry {value}", Registry)
              .Add("--run-id {value}", RunId)
              .Add("--no-archive", NoArchive)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrWebhookCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrWebhookCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   Space-separated list of actions that trigger the webhook to post notifications.
        /// </summary>
        public virtual IReadOnlyList<AcrWebhookActions> Actions => ActionsInternal.AsReadOnly();
        internal List<AcrWebhookActions> ActionsInternal { get; set; } = new List<AcrWebhookActions>();
        /// <summary>
        ///   The name of the webhook.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   The service URI for the webhook to post notifications.
        /// </summary>
        public virtual string Uri { get; internal set; }
        /// <summary>
        ///   Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.
        /// </summary>
        public virtual IReadOnlyList<string> Headers => HeadersInternal.AsReadOnly();
        internal List<string> HeadersInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.
        /// </summary>
        public virtual string Location { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means events for all repositories.
        /// </summary>
        public virtual string Scope { get; internal set; }
        /// <summary>
        ///   Indicates whether the webhook is enabled.
        /// </summary>
        public virtual AcrTaskStatus Status { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr webhook create")
              .Add("--actions {value}", Actions, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--uri {value}", Uri)
              .Add("--headers {value}", Headers, separator: ' ')
              .Add("--location {value}", Location)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--scope {value}", Scope)
              .Add("--status {value}", Status)
              .Add("--tags {value}", Tags)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrWebhookDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrWebhookDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the webhook.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr webhook delete")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrWebhookGetConfigSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrWebhookGetConfigSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the webhook.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr webhook get-config")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrWebhookListSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrWebhookListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr webhook list")
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrWebhookListEventsSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrWebhookListEventsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the webhook.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr webhook list-events")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrWebhookPingSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrWebhookPingSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the webhook.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr webhook ping")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrWebhookShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrWebhookShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the webhook.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr webhook show")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrWebhookUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrWebhookUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the webhook.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Space-separated list of actions that trigger the webhook to post notifications.
        /// </summary>
        public virtual IReadOnlyList<AcrWebhookActions> Actions => ActionsInternal.AsReadOnly();
        internal List<AcrWebhookActions> ActionsInternal { get; set; } = new List<AcrWebhookActions>();
        /// <summary>
        ///   Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.
        /// </summary>
        public virtual IReadOnlyList<string> Headers => HeadersInternal.AsReadOnly();
        internal List<string> HeadersInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means events for all repositories.
        /// </summary>
        public virtual string Scope { get; internal set; }
        /// <summary>
        ///   Indicates whether the webhook is enabled.
        /// </summary>
        public virtual AcrTaskStatus Status { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   The service URI for the webhook to post notifications.
        /// </summary>
        public virtual string Uri { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr webhook update")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--actions {value}", Actions, separator: ' ')
              .Add("--headers {value}", Headers, separator: ' ')
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--scope {value}", Scope)
              .Add("--status {value}", Status)
              .Add("--tags {value}", Tags)
              .Add("--uri {value}", Uri)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrConfigContentTrustShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrConfigContentTrustShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr config content-trust show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrConfigContentTrustUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrConfigContentTrustUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Indicates whether content-trust is enabled or disabled.
        /// </summary>
        public virtual AcrTaskStatus Status { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr config content-trust update")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--status {value}", Status)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrHelmRepoAddSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrHelmRepoAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The password used to log into a container registry.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.
        /// </summary>
        public virtual string Suffix { get; internal set; }
        /// <summary>
        ///   The username used to log into a container registry.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr helm repo add")
              .Add("--name {value}", Name)
              .Add("--password {value}", Password, secret: true)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--suffix {value}", Suffix)
              .Add("--username {value}", Username)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskCredentialAddSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskCredentialAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The login server of the custom registry. For instance, 'myregistry.azurecr.io'.
        /// </summary>
        public virtual string LoginServer { get; internal set; }
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   The password to login to the custom registry. This can be plain text or a key vault secret URI.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The task managed identity used for the credential. Use '[system]' to refer to the system-assigned identity or a client id to refer to a user-assigned identity.
        /// </summary>
        public virtual string UseIdentity { get; internal set; }
        /// <summary>
        ///   The username to login to the custom registry. This can be plain text or a key vault secret URI.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task credential add")
              .Add("--login-server {value}", LoginServer)
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--password {value}", Password, secret: true)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--use-identity {value}", UseIdentity)
              .Add("--username {value}", Username)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskCredentialListSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskCredentialListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task credential list")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskCredentialRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskCredentialRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The login server of the custom registry. For instance, 'myregistry.azurecr.io'.
        /// </summary>
        public virtual string LoginServer { get; internal set; }
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task credential remove")
              .Add("--login-server {value}", LoginServer)
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskCredentialUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskCredentialUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The login server of the custom registry. For instance, 'myregistry.azurecr.io'.
        /// </summary>
        public virtual string LoginServer { get; internal set; }
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   The password to login to the custom registry. This can be plain text or a key vault secret URI.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The task managed identity used for the credential. Use '[system]' to refer to the system-assigned identity or a client id to refer to a user-assigned identity.
        /// </summary>
        public virtual string UseIdentity { get; internal set; }
        /// <summary>
        ///   The username to login to the custom registry. This can be plain text or a key vault secret URI.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task credential update")
              .Add("--login-server {value}", LoginServer)
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--password {value}", Password, secret: true)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--use-identity {value}", UseIdentity)
              .Add("--username {value}", Username)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskIdentityAssignSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskIdentityAssignSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Assigns managed identities to the task. Use '[system]' to refer to the system-assigned identity or a resource ID to refer to a user-assigned identity.
        /// </summary>
        public virtual string Identities { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task identity assign")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--identities {value}", Identities)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskIdentityRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskIdentityRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Assigns managed identities to the task. Use '[system]' to refer to the system-assigned identity or a resource ID to refer to a user-assigned identity.
        /// </summary>
        public virtual string Identities { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task identity remove")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--identities {value}", Identities)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrTaskIdentityShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAcrTaskIdentityShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAcr executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAcrTasks.AzureAcrPath;
        public override Action<OutputType, string> CustomLogger => AzureAcrTasks.AzureAcrLogger;
        /// <summary>
        ///   The name of the task.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.
        /// </summary>
        public virtual string Registry { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("acr task identity show")
              .Add("--name {value}", Name)
              .Add("--registry {value}", Registry)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAcrBuildSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrBuildSettingsExtensions
    {
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetRegistry(this AzureAcrBuildSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetRegistry(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.AuthMode"/></em></p>
        ///   <p>Auth mode of the source registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetAuthMode(this AzureAcrBuildSettings toolSettings, AcrAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.AuthMode"/></em></p>
        ///   <p>Auth mode of the source registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetAuthMode(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region BuildArg
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.BuildArg"/></em></p>
        ///   <p>Build argument in '--build-arg name[=value]' format. Multiples supported by passing --build-arg multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetBuildArg(this AzureAcrBuildSettings toolSettings, string buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArg = buildArg;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.BuildArg"/></em></p>
        ///   <p>Build argument in '--build-arg name[=value]' format. Multiples supported by passing --build-arg multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetBuildArg(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArg = null;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.File"/></em></p>
        ///   <p>The relative path of the the docker file to the source code root folder. Default to 'Dockerfile'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetFile(this AzureAcrBuildSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.File"/></em></p>
        ///   <p>The relative path of the the docker file to the source code root folder. Default to 'Dockerfile'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetFile(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.Image"/></em></p>
        ///   <p>The name and tag of the image using the format: '-t repo/image:tag'. Multiple tags are supported by passing -t multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetImage(this AzureAcrBuildSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.Image"/></em></p>
        ///   <p>The name and tag of the image using the format: '-t repo/image:tag'. Multiple tags are supported by passing -t multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetImage(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region NoFormat
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetNoFormat(this AzureAcrBuildSettings toolSettings, bool? noFormat)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = noFormat;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetNoFormat(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrBuildSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings EnableNoFormat(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrBuildSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings DisableNoFormat(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrBuildSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ToggleNoFormat(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = !toolSettings.NoFormat;
            return toolSettings;
        }
        #endregion
        #region NoLogs
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetNoLogs(this AzureAcrBuildSettings toolSettings, bool? noLogs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = noLogs;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetNoLogs(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrBuildSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings EnableNoLogs(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrBuildSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings DisableNoLogs(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrBuildSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ToggleNoLogs(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = !toolSettings.NoLogs;
            return toolSettings;
        }
        #endregion
        #region NoPush
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetNoPush(this AzureAcrBuildSettings toolSettings, bool? noPush)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = noPush;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetNoPush(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrBuildSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings EnableNoPush(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrBuildSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings DisableNoPush(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrBuildSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ToggleNoPush(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = !toolSettings.NoPush;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the build to complete and return immediately after queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetNoWait(this AzureAcrBuildSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the build to complete and return immediately after queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetNoWait(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrBuildSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the build to complete and return immediately after queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings EnableNoWait(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrBuildSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the build to complete and return immediately after queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings DisableNoWait(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrBuildSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the build to complete and return immediately after queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ToggleNoWait(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.Platform"/></em></p>
        ///   <p>The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetPlatform(this AzureAcrBuildSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.Platform"/></em></p>
        ///   <p>The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetPlatform(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetResourceGroup(this AzureAcrBuildSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetResourceGroup(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region SecretBuildArg
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.SecretBuildArg"/></em></p>
        ///   <p>Secret build argument in '--secret-build-arg name[=value]' format. Multiples supported by passing '--secret-build-arg name[=value]' multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetSecretBuildArg(this AzureAcrBuildSettings toolSettings, string secretBuildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretBuildArg = secretBuildArg;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.SecretBuildArg"/></em></p>
        ///   <p>Secret build argument in '--secret-build-arg name[=value]' format. Multiples supported by passing '--secret-build-arg name[=value]' multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetSecretBuildArg(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretBuildArg = null;
            return toolSettings;
        }
        #endregion
        #region Target
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.Target"/></em></p>
        ///   <p>The name of the target build stage.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetTarget(this AzureAcrBuildSettings toolSettings, string target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = target;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.Target"/></em></p>
        ///   <p>The name of the target build stage.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetTarget(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.Timeout"/></em></p>
        ///   <p>The timeout in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetTimeout(this AzureAcrBuildSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.Timeout"/></em></p>
        ///   <p>The timeout in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetTimeout(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetSubscription(this AzureAcrBuildSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetSubscription(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetDebug(this AzureAcrBuildSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetDebug(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetHelp(this AzureAcrBuildSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetHelp(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetOutput(this AzureAcrBuildSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetOutput(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetQuery(this AzureAcrBuildSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetQuery(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrBuildSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings SetVerbose(this AzureAcrBuildSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrBuildSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrBuildSettings ResetVerbose(this AzureAcrBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrCheckHealthSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrCheckHealthSettingsExtensions
    {
        #region IgnoreErrors
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckHealthSettings.IgnoreErrors"/></em></p>
        ///   <p>Ignore errors, displaying them only at the final.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings SetIgnoreErrors(this AzureAcrCheckHealthSettings toolSettings, string ignoreErrors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreErrors = ignoreErrors;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckHealthSettings.IgnoreErrors"/></em></p>
        ///   <p>Ignore errors, displaying them only at the final.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings ResetIgnoreErrors(this AzureAcrCheckHealthSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreErrors = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckHealthSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings SetName(this AzureAcrCheckHealthSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckHealthSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings ResetName(this AzureAcrCheckHealthSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckHealthSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings SetYes(this AzureAcrCheckHealthSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckHealthSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings ResetYes(this AzureAcrCheckHealthSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckHealthSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings SetSubscription(this AzureAcrCheckHealthSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckHealthSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings ResetSubscription(this AzureAcrCheckHealthSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckHealthSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings SetDebug(this AzureAcrCheckHealthSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckHealthSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings ResetDebug(this AzureAcrCheckHealthSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckHealthSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings SetHelp(this AzureAcrCheckHealthSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckHealthSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings ResetHelp(this AzureAcrCheckHealthSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckHealthSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings SetOutput(this AzureAcrCheckHealthSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckHealthSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings ResetOutput(this AzureAcrCheckHealthSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckHealthSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings SetQuery(this AzureAcrCheckHealthSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckHealthSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings ResetQuery(this AzureAcrCheckHealthSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckHealthSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings SetVerbose(this AzureAcrCheckHealthSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckHealthSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckHealthSettings ResetVerbose(this AzureAcrCheckHealthSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrCheckNameSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrCheckNameSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckNameSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings SetName(this AzureAcrCheckNameSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckNameSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings ResetName(this AzureAcrCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckNameSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings SetSubscription(this AzureAcrCheckNameSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckNameSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings ResetSubscription(this AzureAcrCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckNameSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings SetDebug(this AzureAcrCheckNameSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckNameSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings ResetDebug(this AzureAcrCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckNameSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings SetHelp(this AzureAcrCheckNameSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckNameSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings ResetHelp(this AzureAcrCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckNameSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings SetOutput(this AzureAcrCheckNameSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckNameSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings ResetOutput(this AzureAcrCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckNameSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings SetQuery(this AzureAcrCheckNameSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckNameSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings ResetQuery(this AzureAcrCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCheckNameSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings SetVerbose(this AzureAcrCheckNameSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCheckNameSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCheckNameSettings ResetVerbose(this AzureAcrCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrCreateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetName(this AzureAcrCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetName(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetResourceGroup(this AzureAcrCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetResourceGroup(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Sku
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.Sku"/></em></p>
        ///   <p>The SKU of the container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetSku(this AzureAcrCreateSettings toolSettings, AcrSku sku)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = sku;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.Sku"/></em></p>
        ///   <p>The SKU of the container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetSku(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = null;
            return toolSettings;
        }
        #endregion
        #region AdminEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.AdminEnabled"/></em></p>
        ///   <p>Indicates whether the admin user is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetAdminEnabled(this AzureAcrCreateSettings toolSettings, bool? adminEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminEnabled = adminEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.AdminEnabled"/></em></p>
        ///   <p>Indicates whether the admin user is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetAdminEnabled(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrCreateSettings.AdminEnabled"/></em></p>
        ///   <p>Indicates whether the admin user is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings EnableAdminEnabled(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrCreateSettings.AdminEnabled"/></em></p>
        ///   <p>Indicates whether the admin user is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings DisableAdminEnabled(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrCreateSettings.AdminEnabled"/></em></p>
        ///   <p>Indicates whether the admin user is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ToggleAdminEnabled(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminEnabled = !toolSettings.AdminEnabled;
            return toolSettings;
        }
        #endregion
        #region Location
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetLocation(this AzureAcrCreateSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetLocation(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region StorageAccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.StorageAccountName"/></em></p>
        ///   <p>Provide the name of an existing storage account if you're recreating a container registry over a previous registry created storage account. Only applicable to Classic SKU.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetStorageAccountName(this AzureAcrCreateSettings toolSettings, string storageAccountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccountName = storageAccountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.StorageAccountName"/></em></p>
        ///   <p>Provide the name of an existing storage account if you're recreating a container registry over a previous registry created storage account. Only applicable to Classic SKU.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetStorageAccountName(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccountName = null;
            return toolSettings;
        }
        #endregion
        #region DefaultAction
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.DefaultAction"/></em></p>
        ///   <p>Default action to apply when no rule matches. Only applicable to Premium SKU.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetDefaultAction(this AzureAcrCreateSettings toolSettings, AcrDefaultAction defaultAction)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAction = defaultAction;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.DefaultAction"/></em></p>
        ///   <p>Default action to apply when no rule matches. Only applicable to Premium SKU.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetDefaultAction(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAction = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetSubscription(this AzureAcrCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetSubscription(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetDebug(this AzureAcrCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetDebug(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetHelp(this AzureAcrCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetHelp(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetOutput(this AzureAcrCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetOutput(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetQuery(this AzureAcrCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetQuery(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings SetVerbose(this AzureAcrCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCreateSettings ResetVerbose(this AzureAcrCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrDeleteSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrDeleteSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings SetName(this AzureAcrDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrDeleteSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings ResetName(this AzureAcrDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings SetResourceGroup(this AzureAcrDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings ResetResourceGroup(this AzureAcrDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings SetSubscription(this AzureAcrDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings ResetSubscription(this AzureAcrDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings SetDebug(this AzureAcrDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings ResetDebug(this AzureAcrDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings SetHelp(this AzureAcrDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings ResetHelp(this AzureAcrDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings SetOutput(this AzureAcrDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings ResetOutput(this AzureAcrDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings SetQuery(this AzureAcrDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings ResetQuery(this AzureAcrDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings SetVerbose(this AzureAcrDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrDeleteSettings ResetVerbose(this AzureAcrDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrImportSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrImportSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetName(this AzureAcrImportSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetName(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Source
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Source"/></em></p>
        ///   <p>The source identifier will be either a source image name or a fully qualified source.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetSource(this AzureAcrImportSettings toolSettings, string source)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = source;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Source"/></em></p>
        ///   <p>The source identifier will be either a source image name or a fully qualified source.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetSource(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Source = null;
            return toolSettings;
        }
        #endregion
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Force"/></em></p>
        ///   <p>Overwrite the existing tag of the image to be imported.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetForce(this AzureAcrImportSettings toolSettings, string force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Force"/></em></p>
        ///   <p>Overwrite the existing tag of the image to be imported.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetForce(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Image"/></em></p>
        ///   <p>The name and tag of the image using the format: '-t repo/image:tag'. Multiple tags are supported by passing -t multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetImage(this AzureAcrImportSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Image"/></em></p>
        ///   <p>The name and tag of the image using the format: '-t repo/image:tag'. Multiple tags are supported by passing -t multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetImage(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Password"/></em></p>
        ///   <p>The password of source container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetPassword(this AzureAcrImportSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Password"/></em></p>
        ///   <p>The password of source container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetPassword(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Registry"/></em></p>
        ///   <p>The source container registry can be name, login server or resource ID of the source registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetRegistry(this AzureAcrImportSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Registry"/></em></p>
        ///   <p>The source container registry can be name, login server or resource ID of the source registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetRegistry(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Repository"/></em></p>
        ///   <p>The repository name for a manifest-only copy of images. Multiple copies supported by passing --repository multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetRepository(this AzureAcrImportSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Repository"/></em></p>
        ///   <p>The repository name for a manifest-only copy of images. Multiple copies supported by passing --repository multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetRepository(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetResourceGroup(this AzureAcrImportSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetResourceGroup(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Username"/></em></p>
        ///   <p>The username of source container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetUsername(this AzureAcrImportSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Username"/></em></p>
        ///   <p>The username of source container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetUsername(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetSubscription(this AzureAcrImportSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetSubscription(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetDebug(this AzureAcrImportSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetDebug(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetHelp(this AzureAcrImportSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetHelp(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetOutput(this AzureAcrImportSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetOutput(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetQuery(this AzureAcrImportSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetQuery(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrImportSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings SetVerbose(this AzureAcrImportSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrImportSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrImportSettings ResetVerbose(this AzureAcrImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings SetResourceGroup(this AzureAcrListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings ResetResourceGroup(this AzureAcrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings SetSubscription(this AzureAcrListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings ResetSubscription(this AzureAcrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings SetDebug(this AzureAcrListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings ResetDebug(this AzureAcrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings SetHelp(this AzureAcrListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings ResetHelp(this AzureAcrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings SetOutput(this AzureAcrListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings ResetOutput(this AzureAcrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings SetQuery(this AzureAcrListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings ResetQuery(this AzureAcrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings SetVerbose(this AzureAcrListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrListSettings ResetVerbose(this AzureAcrListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrLoginSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrLoginSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrLoginSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings SetName(this AzureAcrLoginSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrLoginSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings ResetName(this AzureAcrLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrLoginSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings SetPassword(this AzureAcrLoginSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrLoginSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings ResetPassword(this AzureAcrLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrLoginSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings SetResourceGroup(this AzureAcrLoginSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrLoginSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings ResetResourceGroup(this AzureAcrLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrLoginSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings SetSuffix(this AzureAcrLoginSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrLoginSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings ResetSuffix(this AzureAcrLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrLoginSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings SetUsername(this AzureAcrLoginSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrLoginSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings ResetUsername(this AzureAcrLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrLoginSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings SetSubscription(this AzureAcrLoginSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrLoginSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings ResetSubscription(this AzureAcrLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrLoginSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings SetDebug(this AzureAcrLoginSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrLoginSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings ResetDebug(this AzureAcrLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrLoginSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings SetHelp(this AzureAcrLoginSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrLoginSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings ResetHelp(this AzureAcrLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrLoginSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings SetOutput(this AzureAcrLoginSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrLoginSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings ResetOutput(this AzureAcrLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrLoginSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings SetQuery(this AzureAcrLoginSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrLoginSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings ResetQuery(this AzureAcrLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrLoginSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings SetVerbose(this AzureAcrLoginSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrLoginSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrLoginSettings ResetVerbose(this AzureAcrLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrRunSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrRunSettingsExtensions
    {
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetRegistry(this AzureAcrRunSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetRegistry(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.AuthMode"/></em></p>
        ///   <p>Auth mode of the source registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetAuthMode(this AzureAcrRunSettings toolSettings, AcrAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.AuthMode"/></em></p>
        ///   <p>Auth mode of the source registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetAuthMode(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Cmd
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.Cmd"/></em></p>
        ///   <p>Commands to execute.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetCmd(this AzureAcrRunSettings toolSettings, string cmd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cmd = cmd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.Cmd"/></em></p>
        ///   <p>Commands to execute.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetCmd(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cmd = null;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.File"/></em></p>
        ///   <p>The task template/definition file path relative to the source context. It can be '-' to pipe a file from the standard input.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetFile(this AzureAcrRunSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.File"/></em></p>
        ///   <p>The task template/definition file path relative to the source context. It can be '-' to pipe a file from the standard input.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetFile(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region NoFormat
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetNoFormat(this AzureAcrRunSettings toolSettings, bool? noFormat)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = noFormat;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetNoFormat(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrRunSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings EnableNoFormat(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrRunSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings DisableNoFormat(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrRunSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ToggleNoFormat(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = !toolSettings.NoFormat;
            return toolSettings;
        }
        #endregion
        #region NoLogs
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetNoLogs(this AzureAcrRunSettings toolSettings, bool? noLogs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = noLogs;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetNoLogs(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrRunSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings EnableNoLogs(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrRunSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings DisableNoLogs(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrRunSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ToggleNoLogs(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = !toolSettings.NoLogs;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetNoWait(this AzureAcrRunSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetNoWait(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrRunSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings EnableNoWait(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrRunSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings DisableNoWait(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrRunSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ToggleNoWait(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.Platform"/></em></p>
        ///   <p>The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetPlatform(this AzureAcrRunSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.Platform"/></em></p>
        ///   <p>The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetPlatform(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetResourceGroup(this AzureAcrRunSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetResourceGroup(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.Set"/></em></p>
        ///   <p>Value in 'name[=value]' format. Multiples supported by passing --set multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetSet(this AzureAcrRunSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.Set"/></em></p>
        ///   <p>Value in 'name[=value]' format. Multiples supported by passing --set multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetSet(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region SetSecret
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.SetSecret"/></em></p>
        ///   <p>Secret value in '--set name[=value]' format. Multiples supported by passing --set multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetSetSecret(this AzureAcrRunSettings toolSettings, string setSecret)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SetSecret = setSecret;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.SetSecret"/></em></p>
        ///   <p>Secret value in '--set name[=value]' format. Multiples supported by passing --set multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetSetSecret(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SetSecret = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.Timeout"/></em></p>
        ///   <p>The timeout in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetTimeout(this AzureAcrRunSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.Timeout"/></em></p>
        ///   <p>The timeout in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetTimeout(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region Values
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.Values"/></em></p>
        ///   <p>The task values file path relative to the source context.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetValues(this AzureAcrRunSettings toolSettings, string values)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Values = values;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.Values"/></em></p>
        ///   <p>The task values file path relative to the source context.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetValues(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Values = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetSubscription(this AzureAcrRunSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetSubscription(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetDebug(this AzureAcrRunSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetDebug(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetHelp(this AzureAcrRunSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetHelp(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetOutput(this AzureAcrRunSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetOutput(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetQuery(this AzureAcrRunSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetQuery(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRunSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings SetVerbose(this AzureAcrRunSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRunSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRunSettings ResetVerbose(this AzureAcrRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrShowSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings SetName(this AzureAcrShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings ResetName(this AzureAcrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings SetResourceGroup(this AzureAcrShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings ResetResourceGroup(this AzureAcrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings SetSubscription(this AzureAcrShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings ResetSubscription(this AzureAcrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings SetDebug(this AzureAcrShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings ResetDebug(this AzureAcrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings SetHelp(this AzureAcrShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings ResetHelp(this AzureAcrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings SetOutput(this AzureAcrShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings ResetOutput(this AzureAcrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings SetQuery(this AzureAcrShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings ResetQuery(this AzureAcrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings SetVerbose(this AzureAcrShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowSettings ResetVerbose(this AzureAcrShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrShowUsageSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrShowUsageSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowUsageSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings SetName(this AzureAcrShowUsageSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowUsageSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings ResetName(this AzureAcrShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowUsageSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings SetResourceGroup(this AzureAcrShowUsageSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowUsageSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings ResetResourceGroup(this AzureAcrShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowUsageSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings SetSubscription(this AzureAcrShowUsageSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowUsageSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings ResetSubscription(this AzureAcrShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowUsageSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings SetDebug(this AzureAcrShowUsageSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowUsageSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings ResetDebug(this AzureAcrShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowUsageSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings SetHelp(this AzureAcrShowUsageSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowUsageSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings ResetHelp(this AzureAcrShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowUsageSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings SetOutput(this AzureAcrShowUsageSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowUsageSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings ResetOutput(this AzureAcrShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowUsageSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings SetQuery(this AzureAcrShowUsageSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowUsageSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings ResetQuery(this AzureAcrShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrShowUsageSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings SetVerbose(this AzureAcrShowUsageSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrShowUsageSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrShowUsageSettings ResetVerbose(this AzureAcrShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrUpdateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetName(this AzureAcrUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetName(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region AdminEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.AdminEnabled"/></em></p>
        ///   <p>Indicates whether the admin user is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetAdminEnabled(this AzureAcrUpdateSettings toolSettings, bool? adminEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminEnabled = adminEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.AdminEnabled"/></em></p>
        ///   <p>Indicates whether the admin user is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetAdminEnabled(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrUpdateSettings.AdminEnabled"/></em></p>
        ///   <p>Indicates whether the admin user is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings EnableAdminEnabled(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrUpdateSettings.AdminEnabled"/></em></p>
        ///   <p>Indicates whether the admin user is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings DisableAdminEnabled(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrUpdateSettings.AdminEnabled"/></em></p>
        ///   <p>Indicates whether the admin user is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ToggleAdminEnabled(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminEnabled = !toolSettings.AdminEnabled;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetResourceGroup(this AzureAcrUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetResourceGroup(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Sku
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.Sku"/></em></p>
        ///   <p>The SKU of the container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetSku(this AzureAcrUpdateSettings toolSettings, AcrSku sku)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = sku;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.Sku"/></em></p>
        ///   <p>The SKU of the container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetSku(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = null;
            return toolSettings;
        }
        #endregion
        #region StorageAccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.StorageAccountName"/></em></p>
        ///   <p>Provide the name of an existing storage account if you're recreating a container registry over a previous registry created storage account. Only applicable to Classic SKU.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetStorageAccountName(this AzureAcrUpdateSettings toolSettings, string storageAccountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccountName = storageAccountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.StorageAccountName"/></em></p>
        ///   <p>Provide the name of an existing storage account if you're recreating a container registry over a previous registry created storage account. Only applicable to Classic SKU.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetStorageAccountName(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccountName = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetTags(this AzureAcrUpdateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetTags(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region DefaultAction
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.DefaultAction"/></em></p>
        ///   <p>Default action to apply when no rule matches. Only applicable to Premium SKU.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetDefaultAction(this AzureAcrUpdateSettings toolSettings, AcrDefaultAction defaultAction)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAction = defaultAction;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.DefaultAction"/></em></p>
        ///   <p>Default action to apply when no rule matches. Only applicable to Premium SKU.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetDefaultAction(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAction = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetAdd(this AzureAcrUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetAdd(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetForceString(this AzureAcrUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetForceString(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetRemove(this AzureAcrUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetRemove(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetSet(this AzureAcrUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetSet(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetSubscription(this AzureAcrUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetSubscription(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetDebug(this AzureAcrUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetDebug(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetHelp(this AzureAcrUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetHelp(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetOutput(this AzureAcrUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetOutput(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetQuery(this AzureAcrUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetQuery(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings SetVerbose(this AzureAcrUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrUpdateSettings ResetVerbose(this AzureAcrUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrConfigSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrConfigSettingsExtensions
    {
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigSettings SetDebug(this AzureAcrConfigSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigSettings ResetDebug(this AzureAcrConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigSettings SetHelp(this AzureAcrConfigSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigSettings ResetHelp(this AzureAcrConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigSettings SetOutput(this AzureAcrConfigSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigSettings ResetOutput(this AzureAcrConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigSettings SetQuery(this AzureAcrConfigSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigSettings ResetQuery(this AzureAcrConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigSettings SetVerbose(this AzureAcrConfigSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigSettings ResetVerbose(this AzureAcrConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrCredentialRenewSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrCredentialRenewSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialRenewSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings SetName(this AzureAcrCredentialRenewSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialRenewSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings ResetName(this AzureAcrCredentialRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region PasswordName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialRenewSettings.PasswordName"/></em></p>
        ///   <p>The name of password to regenerate.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings SetPasswordName(this AzureAcrCredentialRenewSettings toolSettings, AcrCredentialRenewPasswordName passwordName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PasswordName = passwordName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialRenewSettings.PasswordName"/></em></p>
        ///   <p>The name of password to regenerate.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings ResetPasswordName(this AzureAcrCredentialRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PasswordName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialRenewSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings SetResourceGroup(this AzureAcrCredentialRenewSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialRenewSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings ResetResourceGroup(this AzureAcrCredentialRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialRenewSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings SetSubscription(this AzureAcrCredentialRenewSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialRenewSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings ResetSubscription(this AzureAcrCredentialRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialRenewSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings SetDebug(this AzureAcrCredentialRenewSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialRenewSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings ResetDebug(this AzureAcrCredentialRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialRenewSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings SetHelp(this AzureAcrCredentialRenewSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialRenewSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings ResetHelp(this AzureAcrCredentialRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialRenewSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings SetOutput(this AzureAcrCredentialRenewSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialRenewSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings ResetOutput(this AzureAcrCredentialRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialRenewSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings SetQuery(this AzureAcrCredentialRenewSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialRenewSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings ResetQuery(this AzureAcrCredentialRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialRenewSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings SetVerbose(this AzureAcrCredentialRenewSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialRenewSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialRenewSettings ResetVerbose(this AzureAcrCredentialRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrCredentialShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrCredentialShowSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialShowSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings SetName(this AzureAcrCredentialShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialShowSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings ResetName(this AzureAcrCredentialShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings SetResourceGroup(this AzureAcrCredentialShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings ResetResourceGroup(this AzureAcrCredentialShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings SetSubscription(this AzureAcrCredentialShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings ResetSubscription(this AzureAcrCredentialShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings SetDebug(this AzureAcrCredentialShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings ResetDebug(this AzureAcrCredentialShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings SetHelp(this AzureAcrCredentialShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings ResetHelp(this AzureAcrCredentialShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings SetOutput(this AzureAcrCredentialShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings ResetOutput(this AzureAcrCredentialShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings SetQuery(this AzureAcrCredentialShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings ResetQuery(this AzureAcrCredentialShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrCredentialShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings SetVerbose(this AzureAcrCredentialShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrCredentialShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrCredentialShowSettings ResetVerbose(this AzureAcrCredentialShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrHelmDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrHelmDeleteSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetName(this AzureAcrHelmDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetName(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetPassword(this AzureAcrHelmDeleteSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetPassword(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region Prov
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Prov"/></em></p>
        ///   <p>Only delete the provenance file.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetProv(this AzureAcrHelmDeleteSettings toolSettings, string prov)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prov = prov;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Prov"/></em></p>
        ///   <p>Only delete the provenance file.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetProv(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prov = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetResourceGroup(this AzureAcrHelmDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetResourceGroup(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetSuffix(this AzureAcrHelmDeleteSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetSuffix(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetUsername(this AzureAcrHelmDeleteSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetUsername(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Version
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Version"/></em></p>
        ///   <p>The helm chart version.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetVersion(this AzureAcrHelmDeleteSettings toolSettings, string version)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = version;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Version"/></em></p>
        ///   <p>The helm chart version.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetVersion(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetYes(this AzureAcrHelmDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetYes(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetSubscription(this AzureAcrHelmDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetSubscription(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetDebug(this AzureAcrHelmDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetDebug(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetHelp(this AzureAcrHelmDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetHelp(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetOutput(this AzureAcrHelmDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetOutput(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetQuery(this AzureAcrHelmDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetQuery(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings SetVerbose(this AzureAcrHelmDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmDeleteSettings ResetVerbose(this AzureAcrHelmDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrHelmListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrHelmListSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmListSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings SetName(this AzureAcrHelmListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmListSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings ResetName(this AzureAcrHelmListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmListSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings SetPassword(this AzureAcrHelmListSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmListSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings ResetPassword(this AzureAcrHelmListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings SetResourceGroup(this AzureAcrHelmListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings ResetResourceGroup(this AzureAcrHelmListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmListSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings SetSuffix(this AzureAcrHelmListSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmListSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings ResetSuffix(this AzureAcrHelmListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmListSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings SetUsername(this AzureAcrHelmListSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmListSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings ResetUsername(this AzureAcrHelmListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings SetSubscription(this AzureAcrHelmListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings ResetSubscription(this AzureAcrHelmListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings SetDebug(this AzureAcrHelmListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings ResetDebug(this AzureAcrHelmListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings SetHelp(this AzureAcrHelmListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings ResetHelp(this AzureAcrHelmListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings SetOutput(this AzureAcrHelmListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings ResetOutput(this AzureAcrHelmListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings SetQuery(this AzureAcrHelmListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings ResetQuery(this AzureAcrHelmListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings SetVerbose(this AzureAcrHelmListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmListSettings ResetVerbose(this AzureAcrHelmListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrHelmPushSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrHelmPushSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmPushSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings SetName(this AzureAcrHelmPushSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmPushSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings ResetName(this AzureAcrHelmPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmPushSettings.Force"/></em></p>
        ///   <p>Overwrite the existing chart package.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings SetForce(this AzureAcrHelmPushSettings toolSettings, string force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmPushSettings.Force"/></em></p>
        ///   <p>Overwrite the existing chart package.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings ResetForce(this AzureAcrHelmPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmPushSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings SetPassword(this AzureAcrHelmPushSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmPushSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings ResetPassword(this AzureAcrHelmPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmPushSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings SetResourceGroup(this AzureAcrHelmPushSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmPushSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings ResetResourceGroup(this AzureAcrHelmPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmPushSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings SetSuffix(this AzureAcrHelmPushSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmPushSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings ResetSuffix(this AzureAcrHelmPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmPushSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings SetUsername(this AzureAcrHelmPushSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmPushSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings ResetUsername(this AzureAcrHelmPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmPushSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings SetSubscription(this AzureAcrHelmPushSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmPushSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings ResetSubscription(this AzureAcrHelmPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmPushSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings SetDebug(this AzureAcrHelmPushSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmPushSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings ResetDebug(this AzureAcrHelmPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmPushSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings SetHelp(this AzureAcrHelmPushSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmPushSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings ResetHelp(this AzureAcrHelmPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmPushSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings SetOutput(this AzureAcrHelmPushSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmPushSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings ResetOutput(this AzureAcrHelmPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmPushSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings SetQuery(this AzureAcrHelmPushSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmPushSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings ResetQuery(this AzureAcrHelmPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmPushSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings SetVerbose(this AzureAcrHelmPushSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmPushSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmPushSettings ResetVerbose(this AzureAcrHelmPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrHelmShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrHelmShowSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmShowSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings SetName(this AzureAcrHelmShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmShowSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings ResetName(this AzureAcrHelmShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmShowSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings SetPassword(this AzureAcrHelmShowSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmShowSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings ResetPassword(this AzureAcrHelmShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings SetResourceGroup(this AzureAcrHelmShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings ResetResourceGroup(this AzureAcrHelmShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmShowSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings SetSuffix(this AzureAcrHelmShowSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmShowSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings ResetSuffix(this AzureAcrHelmShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmShowSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings SetUsername(this AzureAcrHelmShowSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmShowSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings ResetUsername(this AzureAcrHelmShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Version
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmShowSettings.Version"/></em></p>
        ///   <p>The helm chart version.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings SetVersion(this AzureAcrHelmShowSettings toolSettings, string version)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = version;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmShowSettings.Version"/></em></p>
        ///   <p>The helm chart version.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings ResetVersion(this AzureAcrHelmShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings SetSubscription(this AzureAcrHelmShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings ResetSubscription(this AzureAcrHelmShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings SetDebug(this AzureAcrHelmShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings ResetDebug(this AzureAcrHelmShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings SetHelp(this AzureAcrHelmShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings ResetHelp(this AzureAcrHelmShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings SetOutput(this AzureAcrHelmShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings ResetOutput(this AzureAcrHelmShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings SetQuery(this AzureAcrHelmShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings ResetQuery(this AzureAcrHelmShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings SetVerbose(this AzureAcrHelmShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmShowSettings ResetVerbose(this AzureAcrHelmShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrNetworkRuleAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrNetworkRuleAddSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleAddSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings SetName(this AzureAcrNetworkRuleAddSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleAddSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings ResetName(this AzureAcrNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region IpAddress
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleAddSettings.IpAddress"/></em></p>
        ///   <p>IPv4 address or CIDR range.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings SetIpAddress(this AzureAcrNetworkRuleAddSettings toolSettings, string ipAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpAddress = ipAddress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleAddSettings.IpAddress"/></em></p>
        ///   <p>IPv4 address or CIDR range.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings ResetIpAddress(this AzureAcrNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpAddress = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings SetResourceGroup(this AzureAcrNetworkRuleAddSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings ResetResourceGroup(this AzureAcrNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subnet
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleAddSettings.Subnet"/></em></p>
        ///   <p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings SetSubnet(this AzureAcrNetworkRuleAddSettings toolSettings, string subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = subnet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleAddSettings.Subnet"/></em></p>
        ///   <p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings ResetSubnet(this AzureAcrNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = null;
            return toolSettings;
        }
        #endregion
        #region VnetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleAddSettings.VnetName"/></em></p>
        ///   <p>Name of a virtual network.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings SetVnetName(this AzureAcrNetworkRuleAddSettings toolSettings, string vnetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = vnetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleAddSettings.VnetName"/></em></p>
        ///   <p>Name of a virtual network.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings ResetVnetName(this AzureAcrNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings SetSubscription(this AzureAcrNetworkRuleAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings ResetSubscription(this AzureAcrNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings SetDebug(this AzureAcrNetworkRuleAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings ResetDebug(this AzureAcrNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings SetHelp(this AzureAcrNetworkRuleAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings ResetHelp(this AzureAcrNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings SetOutput(this AzureAcrNetworkRuleAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings ResetOutput(this AzureAcrNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings SetQuery(this AzureAcrNetworkRuleAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings ResetQuery(this AzureAcrNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings SetVerbose(this AzureAcrNetworkRuleAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleAddSettings ResetVerbose(this AzureAcrNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrNetworkRuleListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrNetworkRuleListSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleListSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings SetName(this AzureAcrNetworkRuleListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleListSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings ResetName(this AzureAcrNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings SetResourceGroup(this AzureAcrNetworkRuleListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings ResetResourceGroup(this AzureAcrNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings SetSubscription(this AzureAcrNetworkRuleListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings ResetSubscription(this AzureAcrNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings SetDebug(this AzureAcrNetworkRuleListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings ResetDebug(this AzureAcrNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings SetHelp(this AzureAcrNetworkRuleListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings ResetHelp(this AzureAcrNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings SetOutput(this AzureAcrNetworkRuleListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings ResetOutput(this AzureAcrNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings SetQuery(this AzureAcrNetworkRuleListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings ResetQuery(this AzureAcrNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings SetVerbose(this AzureAcrNetworkRuleListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleListSettings ResetVerbose(this AzureAcrNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrNetworkRuleRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrNetworkRuleRemoveSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleRemoveSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings SetName(this AzureAcrNetworkRuleRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleRemoveSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings ResetName(this AzureAcrNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region IpAddress
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleRemoveSettings.IpAddress"/></em></p>
        ///   <p>IPv4 address or CIDR range.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings SetIpAddress(this AzureAcrNetworkRuleRemoveSettings toolSettings, string ipAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpAddress = ipAddress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleRemoveSettings.IpAddress"/></em></p>
        ///   <p>IPv4 address or CIDR range.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings ResetIpAddress(this AzureAcrNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpAddress = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings SetResourceGroup(this AzureAcrNetworkRuleRemoveSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings ResetResourceGroup(this AzureAcrNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subnet
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleRemoveSettings.Subnet"/></em></p>
        ///   <p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings SetSubnet(this AzureAcrNetworkRuleRemoveSettings toolSettings, string subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = subnet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleRemoveSettings.Subnet"/></em></p>
        ///   <p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings ResetSubnet(this AzureAcrNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = null;
            return toolSettings;
        }
        #endregion
        #region VnetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleRemoveSettings.VnetName"/></em></p>
        ///   <p>Name of a virtual network.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings SetVnetName(this AzureAcrNetworkRuleRemoveSettings toolSettings, string vnetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = vnetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleRemoveSettings.VnetName"/></em></p>
        ///   <p>Name of a virtual network.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings ResetVnetName(this AzureAcrNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings SetSubscription(this AzureAcrNetworkRuleRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings ResetSubscription(this AzureAcrNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings SetDebug(this AzureAcrNetworkRuleRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings ResetDebug(this AzureAcrNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings SetHelp(this AzureAcrNetworkRuleRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings ResetHelp(this AzureAcrNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings SetOutput(this AzureAcrNetworkRuleRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings ResetOutput(this AzureAcrNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings SetQuery(this AzureAcrNetworkRuleRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings ResetQuery(this AzureAcrNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrNetworkRuleRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings SetVerbose(this AzureAcrNetworkRuleRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrNetworkRuleRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrNetworkRuleRemoveSettings ResetVerbose(this AzureAcrNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrPackBuildSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrPackBuildSettingsExtensions
    {
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.Image"/></em></p>
        ///   <p>The name and tag of the image using the format: '-t repo/image:tag'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetImage(this AzureAcrPackBuildSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.Image"/></em></p>
        ///   <p>The name and tag of the image using the format: '-t repo/image:tag'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetImage(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetRegistry(this AzureAcrPackBuildSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetRegistry(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.AuthMode"/></em></p>
        ///   <p>Auth mode of the source registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetAuthMode(this AzureAcrPackBuildSettings toolSettings, AcrAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.AuthMode"/></em></p>
        ///   <p>Auth mode of the source registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetAuthMode(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region Builder
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.Builder"/></em></p>
        ///   <p>The name and tag of a Buildpack builder image.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetBuilder(this AzureAcrPackBuildSettings toolSettings, string builder)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Builder = builder;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.Builder"/></em></p>
        ///   <p>The name and tag of a Buildpack builder image.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetBuilder(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Builder = null;
            return toolSettings;
        }
        #endregion
        #region NoFormat
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetNoFormat(this AzureAcrPackBuildSettings toolSettings, bool? noFormat)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = noFormat;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetNoFormat(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrPackBuildSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings EnableNoFormat(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrPackBuildSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings DisableNoFormat(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrPackBuildSettings.NoFormat"/></em></p>
        ///   <p>Indicates whether the logs should be displayed in raw format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ToggleNoFormat(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoFormat = !toolSettings.NoFormat;
            return toolSettings;
        }
        #endregion
        #region NoLogs
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetNoLogs(this AzureAcrPackBuildSettings toolSettings, bool? noLogs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = noLogs;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetNoLogs(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrPackBuildSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings EnableNoLogs(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrPackBuildSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings DisableNoLogs(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrPackBuildSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ToggleNoLogs(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = !toolSettings.NoLogs;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetNoWait(this AzureAcrPackBuildSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetNoWait(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrPackBuildSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings EnableNoWait(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrPackBuildSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings DisableNoWait(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrPackBuildSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ToggleNoWait(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.Platform"/></em></p>
        ///   <p>The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetPlatform(this AzureAcrPackBuildSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.Platform"/></em></p>
        ///   <p>The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetPlatform(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region Pull
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.Pull"/></em></p>
        ///   <p>Pull the latest builder and run images before use.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetPull(this AzureAcrPackBuildSettings toolSettings, string pull)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = pull;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.Pull"/></em></p>
        ///   <p>Pull the latest builder and run images before use.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetPull(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetResourceGroup(this AzureAcrPackBuildSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetResourceGroup(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.Timeout"/></em></p>
        ///   <p>The timeout in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetTimeout(this AzureAcrPackBuildSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.Timeout"/></em></p>
        ///   <p>The timeout in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetTimeout(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetSubscription(this AzureAcrPackBuildSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetSubscription(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetDebug(this AzureAcrPackBuildSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetDebug(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetHelp(this AzureAcrPackBuildSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetHelp(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetOutput(this AzureAcrPackBuildSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetOutput(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetQuery(this AzureAcrPackBuildSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetQuery(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrPackBuildSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings SetVerbose(this AzureAcrPackBuildSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrPackBuildSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrPackBuildSettings ResetVerbose(this AzureAcrPackBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrReplicationCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrReplicationCreateSettingsExtensions
    {
        #region Location
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationCreateSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings SetLocation(this AzureAcrReplicationCreateSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationCreateSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings ResetLocation(this AzureAcrReplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationCreateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings SetRegistry(this AzureAcrReplicationCreateSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationCreateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings ResetRegistry(this AzureAcrReplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationCreateSettings.Name"/></em></p>
        ///   <p>The name of the replication. Default to the location name.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings SetName(this AzureAcrReplicationCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationCreateSettings.Name"/></em></p>
        ///   <p>The name of the replication. Default to the location name.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings ResetName(this AzureAcrReplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings SetResourceGroup(this AzureAcrReplicationCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings ResetResourceGroup(this AzureAcrReplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings SetTags(this AzureAcrReplicationCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings ResetTags(this AzureAcrReplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings SetSubscription(this AzureAcrReplicationCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings ResetSubscription(this AzureAcrReplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings SetDebug(this AzureAcrReplicationCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings ResetDebug(this AzureAcrReplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings SetHelp(this AzureAcrReplicationCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings ResetHelp(this AzureAcrReplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings SetOutput(this AzureAcrReplicationCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings ResetOutput(this AzureAcrReplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings SetQuery(this AzureAcrReplicationCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings ResetQuery(this AzureAcrReplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings SetVerbose(this AzureAcrReplicationCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationCreateSettings ResetVerbose(this AzureAcrReplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrReplicationDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrReplicationDeleteSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationDeleteSettings.Name"/></em></p>
        ///   <p>The name of the replication.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings SetName(this AzureAcrReplicationDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationDeleteSettings.Name"/></em></p>
        ///   <p>The name of the replication.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings ResetName(this AzureAcrReplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationDeleteSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings SetRegistry(this AzureAcrReplicationDeleteSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationDeleteSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings ResetRegistry(this AzureAcrReplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings SetResourceGroup(this AzureAcrReplicationDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings ResetResourceGroup(this AzureAcrReplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings SetSubscription(this AzureAcrReplicationDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings ResetSubscription(this AzureAcrReplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings SetDebug(this AzureAcrReplicationDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings ResetDebug(this AzureAcrReplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings SetHelp(this AzureAcrReplicationDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings ResetHelp(this AzureAcrReplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings SetOutput(this AzureAcrReplicationDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings ResetOutput(this AzureAcrReplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings SetQuery(this AzureAcrReplicationDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings ResetQuery(this AzureAcrReplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings SetVerbose(this AzureAcrReplicationDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationDeleteSettings ResetVerbose(this AzureAcrReplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrReplicationListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrReplicationListSettingsExtensions
    {
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationListSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings SetRegistry(this AzureAcrReplicationListSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationListSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings ResetRegistry(this AzureAcrReplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings SetResourceGroup(this AzureAcrReplicationListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings ResetResourceGroup(this AzureAcrReplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings SetSubscription(this AzureAcrReplicationListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings ResetSubscription(this AzureAcrReplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings SetDebug(this AzureAcrReplicationListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings ResetDebug(this AzureAcrReplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings SetHelp(this AzureAcrReplicationListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings ResetHelp(this AzureAcrReplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings SetOutput(this AzureAcrReplicationListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings ResetOutput(this AzureAcrReplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings SetQuery(this AzureAcrReplicationListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings ResetQuery(this AzureAcrReplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings SetVerbose(this AzureAcrReplicationListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationListSettings ResetVerbose(this AzureAcrReplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrReplicationShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrReplicationShowSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationShowSettings.Name"/></em></p>
        ///   <p>The name of the replication.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings SetName(this AzureAcrReplicationShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationShowSettings.Name"/></em></p>
        ///   <p>The name of the replication.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings ResetName(this AzureAcrReplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationShowSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings SetRegistry(this AzureAcrReplicationShowSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationShowSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings ResetRegistry(this AzureAcrReplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings SetResourceGroup(this AzureAcrReplicationShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings ResetResourceGroup(this AzureAcrReplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings SetSubscription(this AzureAcrReplicationShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings ResetSubscription(this AzureAcrReplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings SetDebug(this AzureAcrReplicationShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings ResetDebug(this AzureAcrReplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings SetHelp(this AzureAcrReplicationShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings ResetHelp(this AzureAcrReplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings SetOutput(this AzureAcrReplicationShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings ResetOutput(this AzureAcrReplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings SetQuery(this AzureAcrReplicationShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings ResetQuery(this AzureAcrReplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings SetVerbose(this AzureAcrReplicationShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationShowSettings ResetVerbose(this AzureAcrReplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrReplicationUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrReplicationUpdateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.Name"/></em></p>
        ///   <p>The name of the replication.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetName(this AzureAcrReplicationUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.Name"/></em></p>
        ///   <p>The name of the replication.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetName(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetRegistry(this AzureAcrReplicationUpdateSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetRegistry(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetResourceGroup(this AzureAcrReplicationUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetResourceGroup(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetTags(this AzureAcrReplicationUpdateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetTags(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetAdd(this AzureAcrReplicationUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetAdd(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetForceString(this AzureAcrReplicationUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetForceString(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetRemove(this AzureAcrReplicationUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetRemove(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetSet(this AzureAcrReplicationUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetSet(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetSubscription(this AzureAcrReplicationUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetSubscription(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetDebug(this AzureAcrReplicationUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetDebug(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetHelp(this AzureAcrReplicationUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetHelp(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetOutput(this AzureAcrReplicationUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetOutput(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetQuery(this AzureAcrReplicationUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetQuery(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrReplicationUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings SetVerbose(this AzureAcrReplicationUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrReplicationUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrReplicationUpdateSettings ResetVerbose(this AzureAcrReplicationUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrRepositoryDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrRepositoryDeleteSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetName(this AzureAcrRepositoryDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetName(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Image"/></em></p>
        ///   <p>The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetImage(this AzureAcrRepositoryDeleteSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Image"/></em></p>
        ///   <p>The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetImage(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetPassword(this AzureAcrRepositoryDeleteSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetPassword(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Repository"/></em></p>
        ///   <p>The name of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetRepository(this AzureAcrRepositoryDeleteSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Repository"/></em></p>
        ///   <p>The name of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetRepository(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetResourceGroup(this AzureAcrRepositoryDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetResourceGroup(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetSuffix(this AzureAcrRepositoryDeleteSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetSuffix(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetUsername(this AzureAcrRepositoryDeleteSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetUsername(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetYes(this AzureAcrRepositoryDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetYes(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetSubscription(this AzureAcrRepositoryDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetSubscription(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetDebug(this AzureAcrRepositoryDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetDebug(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetHelp(this AzureAcrRepositoryDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetHelp(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetOutput(this AzureAcrRepositoryDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetOutput(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetQuery(this AzureAcrRepositoryDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetQuery(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings SetVerbose(this AzureAcrRepositoryDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryDeleteSettings ResetVerbose(this AzureAcrRepositoryDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrRepositoryListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrRepositoryListSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryListSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings SetName(this AzureAcrRepositoryListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryListSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings ResetName(this AzureAcrRepositoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryListSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings SetPassword(this AzureAcrRepositoryListSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryListSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings ResetPassword(this AzureAcrRepositoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings SetResourceGroup(this AzureAcrRepositoryListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings ResetResourceGroup(this AzureAcrRepositoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryListSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings SetSuffix(this AzureAcrRepositoryListSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryListSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings ResetSuffix(this AzureAcrRepositoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Top
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryListSettings.Top"/></em></p>
        ///   <p>Limit the number of items in the results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings SetTop(this AzureAcrRepositoryListSettings toolSettings, int? top)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = top;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryListSettings.Top"/></em></p>
        ///   <p>Limit the number of items in the results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings ResetTop(this AzureAcrRepositoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryListSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings SetUsername(this AzureAcrRepositoryListSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryListSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings ResetUsername(this AzureAcrRepositoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings SetSubscription(this AzureAcrRepositoryListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings ResetSubscription(this AzureAcrRepositoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings SetDebug(this AzureAcrRepositoryListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings ResetDebug(this AzureAcrRepositoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings SetHelp(this AzureAcrRepositoryListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings ResetHelp(this AzureAcrRepositoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings SetOutput(this AzureAcrRepositoryListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings ResetOutput(this AzureAcrRepositoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings SetQuery(this AzureAcrRepositoryListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings ResetQuery(this AzureAcrRepositoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings SetVerbose(this AzureAcrRepositoryListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryListSettings ResetVerbose(this AzureAcrRepositoryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrRepositoryShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrRepositoryShowSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetName(this AzureAcrRepositoryShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetName(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.Image"/></em></p>
        ///   <p>The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetImage(this AzureAcrRepositoryShowSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.Image"/></em></p>
        ///   <p>The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetImage(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetPassword(this AzureAcrRepositoryShowSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetPassword(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.Repository"/></em></p>
        ///   <p>The name of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetRepository(this AzureAcrRepositoryShowSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.Repository"/></em></p>
        ///   <p>The name of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetRepository(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetResourceGroup(this AzureAcrRepositoryShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetResourceGroup(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetSuffix(this AzureAcrRepositoryShowSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetSuffix(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetUsername(this AzureAcrRepositoryShowSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetUsername(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetSubscription(this AzureAcrRepositoryShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetSubscription(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetDebug(this AzureAcrRepositoryShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetDebug(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetHelp(this AzureAcrRepositoryShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetHelp(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetOutput(this AzureAcrRepositoryShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetOutput(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetQuery(this AzureAcrRepositoryShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetQuery(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings SetVerbose(this AzureAcrRepositoryShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowSettings ResetVerbose(this AzureAcrRepositoryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrRepositoryShowManifestsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrRepositoryShowManifestsSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetName(this AzureAcrRepositoryShowManifestsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetName(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Repository"/></em></p>
        ///   <p>The name of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetRepository(this AzureAcrRepositoryShowManifestsSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Repository"/></em></p>
        ///   <p>The name of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetRepository(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region Detail
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Detail"/></em></p>
        ///   <p>Show detailed information.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetDetail(this AzureAcrRepositoryShowManifestsSettings toolSettings, string detail)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detail = detail;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Detail"/></em></p>
        ///   <p>Show detailed information.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetDetail(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detail = null;
            return toolSettings;
        }
        #endregion
        #region Orderby
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Orderby"/></em></p>
        ///   <p>Order the items in the results. Default to alphabetical order of names.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetOrderby(this AzureAcrRepositoryShowManifestsSettings toolSettings, AcrRepositoryOrderby orderby)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = orderby;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Orderby"/></em></p>
        ///   <p>Order the items in the results. Default to alphabetical order of names.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetOrderby(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetPassword(this AzureAcrRepositoryShowManifestsSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetPassword(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetResourceGroup(this AzureAcrRepositoryShowManifestsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetResourceGroup(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetSuffix(this AzureAcrRepositoryShowManifestsSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetSuffix(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Top
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Top"/></em></p>
        ///   <p>Limit the number of items in the results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetTop(this AzureAcrRepositoryShowManifestsSettings toolSettings, int? top)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = top;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Top"/></em></p>
        ///   <p>Limit the number of items in the results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetTop(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetUsername(this AzureAcrRepositoryShowManifestsSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetUsername(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetSubscription(this AzureAcrRepositoryShowManifestsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetSubscription(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetDebug(this AzureAcrRepositoryShowManifestsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetDebug(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetHelp(this AzureAcrRepositoryShowManifestsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetHelp(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetOutput(this AzureAcrRepositoryShowManifestsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetOutput(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetQuery(this AzureAcrRepositoryShowManifestsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetQuery(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowManifestsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings SetVerbose(this AzureAcrRepositoryShowManifestsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowManifestsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowManifestsSettings ResetVerbose(this AzureAcrRepositoryShowManifestsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrRepositoryShowTagsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrRepositoryShowTagsSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetName(this AzureAcrRepositoryShowTagsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetName(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Repository"/></em></p>
        ///   <p>The name of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetRepository(this AzureAcrRepositoryShowTagsSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Repository"/></em></p>
        ///   <p>The name of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetRepository(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region Detail
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Detail"/></em></p>
        ///   <p>Show detailed information.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetDetail(this AzureAcrRepositoryShowTagsSettings toolSettings, string detail)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detail = detail;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Detail"/></em></p>
        ///   <p>Show detailed information.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetDetail(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detail = null;
            return toolSettings;
        }
        #endregion
        #region Orderby
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Orderby"/></em></p>
        ///   <p>Order the items in the results. Default to alphabetical order of names.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetOrderby(this AzureAcrRepositoryShowTagsSettings toolSettings, AcrRepositoryOrderby orderby)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = orderby;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Orderby"/></em></p>
        ///   <p>Order the items in the results. Default to alphabetical order of names.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetOrderby(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetPassword(this AzureAcrRepositoryShowTagsSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetPassword(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetResourceGroup(this AzureAcrRepositoryShowTagsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetResourceGroup(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetSuffix(this AzureAcrRepositoryShowTagsSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetSuffix(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Top
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Top"/></em></p>
        ///   <p>Limit the number of items in the results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetTop(this AzureAcrRepositoryShowTagsSettings toolSettings, int? top)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = top;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Top"/></em></p>
        ///   <p>Limit the number of items in the results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetTop(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetUsername(this AzureAcrRepositoryShowTagsSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetUsername(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetSubscription(this AzureAcrRepositoryShowTagsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetSubscription(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetDebug(this AzureAcrRepositoryShowTagsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetDebug(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetHelp(this AzureAcrRepositoryShowTagsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetHelp(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetOutput(this AzureAcrRepositoryShowTagsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetOutput(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetQuery(this AzureAcrRepositoryShowTagsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetQuery(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryShowTagsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings SetVerbose(this AzureAcrRepositoryShowTagsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryShowTagsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryShowTagsSettings ResetVerbose(this AzureAcrRepositoryShowTagsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrRepositoryUntagSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrRepositoryUntagSettingsExtensions
    {
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUntagSettings.Image"/></em></p>
        ///   <p>The name of the image. May include a tag in the format 'name:tag'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings SetImage(this AzureAcrRepositoryUntagSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUntagSettings.Image"/></em></p>
        ///   <p>The name of the image. May include a tag in the format 'name:tag'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings ResetImage(this AzureAcrRepositoryUntagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUntagSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings SetName(this AzureAcrRepositoryUntagSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUntagSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings ResetName(this AzureAcrRepositoryUntagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUntagSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings SetPassword(this AzureAcrRepositoryUntagSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUntagSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings ResetPassword(this AzureAcrRepositoryUntagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUntagSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings SetResourceGroup(this AzureAcrRepositoryUntagSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUntagSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings ResetResourceGroup(this AzureAcrRepositoryUntagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUntagSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings SetSuffix(this AzureAcrRepositoryUntagSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUntagSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings ResetSuffix(this AzureAcrRepositoryUntagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUntagSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings SetUsername(this AzureAcrRepositoryUntagSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUntagSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings ResetUsername(this AzureAcrRepositoryUntagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUntagSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings SetSubscription(this AzureAcrRepositoryUntagSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUntagSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings ResetSubscription(this AzureAcrRepositoryUntagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUntagSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings SetDebug(this AzureAcrRepositoryUntagSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUntagSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings ResetDebug(this AzureAcrRepositoryUntagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUntagSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings SetHelp(this AzureAcrRepositoryUntagSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUntagSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings ResetHelp(this AzureAcrRepositoryUntagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUntagSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings SetOutput(this AzureAcrRepositoryUntagSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUntagSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings ResetOutput(this AzureAcrRepositoryUntagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUntagSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings SetQuery(this AzureAcrRepositoryUntagSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUntagSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings ResetQuery(this AzureAcrRepositoryUntagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUntagSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings SetVerbose(this AzureAcrRepositoryUntagSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUntagSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUntagSettings ResetVerbose(this AzureAcrRepositoryUntagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrRepositoryUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrRepositoryUpdateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetName(this AzureAcrRepositoryUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetName(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region DeleteEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.DeleteEnabled"/></em></p>
        ///   <p>Indicates whether delete operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetDeleteEnabled(this AzureAcrRepositoryUpdateSettings toolSettings, bool? deleteEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteEnabled = deleteEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.DeleteEnabled"/></em></p>
        ///   <p>Indicates whether delete operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetDeleteEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrRepositoryUpdateSettings.DeleteEnabled"/></em></p>
        ///   <p>Indicates whether delete operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings EnableDeleteEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrRepositoryUpdateSettings.DeleteEnabled"/></em></p>
        ///   <p>Indicates whether delete operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings DisableDeleteEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrRepositoryUpdateSettings.DeleteEnabled"/></em></p>
        ///   <p>Indicates whether delete operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ToggleDeleteEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeleteEnabled = !toolSettings.DeleteEnabled;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.Image"/></em></p>
        ///   <p>The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetImage(this AzureAcrRepositoryUpdateSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.Image"/></em></p>
        ///   <p>The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetImage(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region ListEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.ListEnabled"/></em></p>
        ///   <p>Indicates whether this item shows in list operation results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetListEnabled(this AzureAcrRepositoryUpdateSettings toolSettings, bool? listEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ListEnabled = listEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.ListEnabled"/></em></p>
        ///   <p>Indicates whether this item shows in list operation results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetListEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ListEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrRepositoryUpdateSettings.ListEnabled"/></em></p>
        ///   <p>Indicates whether this item shows in list operation results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings EnableListEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ListEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrRepositoryUpdateSettings.ListEnabled"/></em></p>
        ///   <p>Indicates whether this item shows in list operation results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings DisableListEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ListEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrRepositoryUpdateSettings.ListEnabled"/></em></p>
        ///   <p>Indicates whether this item shows in list operation results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ToggleListEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ListEnabled = !toolSettings.ListEnabled;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetPassword(this AzureAcrRepositoryUpdateSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetPassword(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region ReadEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.ReadEnabled"/></em></p>
        ///   <p>Indicates whether read operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetReadEnabled(this AzureAcrRepositoryUpdateSettings toolSettings, bool? readEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadEnabled = readEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.ReadEnabled"/></em></p>
        ///   <p>Indicates whether read operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetReadEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrRepositoryUpdateSettings.ReadEnabled"/></em></p>
        ///   <p>Indicates whether read operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings EnableReadEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrRepositoryUpdateSettings.ReadEnabled"/></em></p>
        ///   <p>Indicates whether read operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings DisableReadEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrRepositoryUpdateSettings.ReadEnabled"/></em></p>
        ///   <p>Indicates whether read operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ToggleReadEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadEnabled = !toolSettings.ReadEnabled;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.Repository"/></em></p>
        ///   <p>The name of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetRepository(this AzureAcrRepositoryUpdateSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.Repository"/></em></p>
        ///   <p>The name of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetRepository(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetResourceGroup(this AzureAcrRepositoryUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetResourceGroup(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetSuffix(this AzureAcrRepositoryUpdateSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetSuffix(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetUsername(this AzureAcrRepositoryUpdateSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetUsername(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region WriteEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.WriteEnabled"/></em></p>
        ///   <p>Indicates whether write or delete operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetWriteEnabled(this AzureAcrRepositoryUpdateSettings toolSettings, bool? writeEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WriteEnabled = writeEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.WriteEnabled"/></em></p>
        ///   <p>Indicates whether write or delete operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetWriteEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WriteEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrRepositoryUpdateSettings.WriteEnabled"/></em></p>
        ///   <p>Indicates whether write or delete operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings EnableWriteEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WriteEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrRepositoryUpdateSettings.WriteEnabled"/></em></p>
        ///   <p>Indicates whether write or delete operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings DisableWriteEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WriteEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrRepositoryUpdateSettings.WriteEnabled"/></em></p>
        ///   <p>Indicates whether write or delete operation is allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ToggleWriteEnabled(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WriteEnabled = !toolSettings.WriteEnabled;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetSubscription(this AzureAcrRepositoryUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetSubscription(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetDebug(this AzureAcrRepositoryUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetDebug(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetHelp(this AzureAcrRepositoryUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetHelp(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetOutput(this AzureAcrRepositoryUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetOutput(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetQuery(this AzureAcrRepositoryUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetQuery(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrRepositoryUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings SetVerbose(this AzureAcrRepositoryUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrRepositoryUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrRepositoryUpdateSettings ResetVerbose(this AzureAcrRepositoryUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskCancelRunSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskCancelRunSettingsExtensions
    {
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCancelRunSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings SetRegistry(this AzureAcrTaskCancelRunSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCancelRunSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings ResetRegistry(this AzureAcrTaskCancelRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region RunId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCancelRunSettings.RunId"/></em></p>
        ///   <p>The unique run identifier.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings SetRunId(this AzureAcrTaskCancelRunSettings toolSettings, string runId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RunId = runId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCancelRunSettings.RunId"/></em></p>
        ///   <p>The unique run identifier.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings ResetRunId(this AzureAcrTaskCancelRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RunId = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCancelRunSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings SetResourceGroup(this AzureAcrTaskCancelRunSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCancelRunSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings ResetResourceGroup(this AzureAcrTaskCancelRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCancelRunSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings SetSubscription(this AzureAcrTaskCancelRunSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCancelRunSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings ResetSubscription(this AzureAcrTaskCancelRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCancelRunSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings SetDebug(this AzureAcrTaskCancelRunSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCancelRunSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings ResetDebug(this AzureAcrTaskCancelRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCancelRunSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings SetHelp(this AzureAcrTaskCancelRunSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCancelRunSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings ResetHelp(this AzureAcrTaskCancelRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCancelRunSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings SetOutput(this AzureAcrTaskCancelRunSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCancelRunSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings ResetOutput(this AzureAcrTaskCancelRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCancelRunSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings SetQuery(this AzureAcrTaskCancelRunSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCancelRunSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings ResetQuery(this AzureAcrTaskCancelRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCancelRunSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings SetVerbose(this AzureAcrTaskCancelRunSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCancelRunSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCancelRunSettings ResetVerbose(this AzureAcrTaskCancelRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskCreateSettingsExtensions
    {
        #region Context
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Context"/></em></p>
        ///   <p>The full URL to the source code repository (Requires '.git' suffix for a github repo). If '/dev/null' is specified, the value will be set to None and ignored.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetContext(this AzureAcrTaskCreateSettings toolSettings, string context)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = context;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Context"/></em></p>
        ///   <p>The full URL to the source code repository (Requires '.git' suffix for a github repo). If '/dev/null' is specified, the value will be set to None and ignored.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetContext(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetName(this AzureAcrTaskCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetName(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetRegistry(this AzureAcrTaskCreateSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetRegistry(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region Arg
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Arg"/></em></p>
        ///   <p>Build argument in '--arg name[=value]' format. Multiples supported by passing '--arg` multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetArg(this AzureAcrTaskCreateSettings toolSettings, string arg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Arg = arg;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Arg"/></em></p>
        ///   <p>Build argument in '--arg name[=value]' format. Multiples supported by passing '--arg` multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetArg(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Arg = null;
            return toolSettings;
        }
        #endregion
        #region AssignIdentity
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.AssignIdentity"/></em></p>
        ///   <p>Assigns managed identities to the task. Use '[system]' to refer to the system-assigned identity or a resource ID to refer to a user-assigned identity.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetAssignIdentity(this AzureAcrTaskCreateSettings toolSettings, string assignIdentity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssignIdentity = assignIdentity;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.AssignIdentity"/></em></p>
        ///   <p>Assigns managed identities to the task. Use '[system]' to refer to the system-assigned identity or a resource ID to refer to a user-assigned identity.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetAssignIdentity(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssignIdentity = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.AuthMode"/></em></p>
        ///   <p>Auth mode of the source registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetAuthMode(this AzureAcrTaskCreateSettings toolSettings, AcrAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.AuthMode"/></em></p>
        ///   <p>Auth mode of the source registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetAuthMode(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region BaseImageTriggerEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the base image trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetBaseImageTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings, bool? baseImageTriggerEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerEnabled = baseImageTriggerEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the base image trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetBaseImageTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the base image trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings EnableBaseImageTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the base image trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings DisableBaseImageTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the base image trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ToggleBaseImageTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerEnabled = !toolSettings.BaseImageTriggerEnabled;
            return toolSettings;
        }
        #endregion
        #region BaseImageTriggerName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerName"/></em></p>
        ///   <p>The name of the base image trigger.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetBaseImageTriggerName(this AzureAcrTaskCreateSettings toolSettings, string baseImageTriggerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerName = baseImageTriggerName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerName"/></em></p>
        ///   <p>The name of the base image trigger.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetBaseImageTriggerName(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerName = null;
            return toolSettings;
        }
        #endregion
        #region BaseImageTriggerType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerType"/></em></p>
        ///   <p>The type of the auto trigger for base image dependency updates.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetBaseImageTriggerType(this AzureAcrTaskCreateSettings toolSettings, AcrTaskBaseImageTriggerType baseImageTriggerType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerType = baseImageTriggerType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.BaseImageTriggerType"/></em></p>
        ///   <p>The type of the auto trigger for base image dependency updates.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetBaseImageTriggerType(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerType = null;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Branch"/></em></p>
        ///   <p>The source control branch name.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetBranch(this AzureAcrTaskCreateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Branch"/></em></p>
        ///   <p>The source control branch name.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetBranch(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region Cmd
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Cmd"/></em></p>
        ///   <p>Commands to execute.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetCmd(this AzureAcrTaskCreateSettings toolSettings, string cmd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cmd = cmd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Cmd"/></em></p>
        ///   <p>Commands to execute.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetCmd(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cmd = null;
            return toolSettings;
        }
        #endregion
        #region CommitTriggerEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.CommitTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control commit trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetCommitTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings, bool? commitTriggerEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CommitTriggerEnabled = commitTriggerEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.CommitTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control commit trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetCommitTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CommitTriggerEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskCreateSettings.CommitTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control commit trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings EnableCommitTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CommitTriggerEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskCreateSettings.CommitTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control commit trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings DisableCommitTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CommitTriggerEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskCreateSettings.CommitTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control commit trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ToggleCommitTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CommitTriggerEnabled = !toolSettings.CommitTriggerEnabled;
            return toolSettings;
        }
        #endregion
        #region Cpu
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Cpu"/></em></p>
        ///   <p>The CPU configuration in terms of number of cores required for the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetCpu(this AzureAcrTaskCreateSettings toolSettings, string cpu)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpu = cpu;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Cpu"/></em></p>
        ///   <p>The CPU configuration in terms of number of cores required for the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetCpu(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpu = null;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.File"/></em></p>
        ///   <p>The relative path of the the task/docker file to the source code root folder. Task files must be suffixed with '.yaml' or piped from the standard input using '-'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetFile(this AzureAcrTaskCreateSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.File"/></em></p>
        ///   <p>The relative path of the the task/docker file to the source code root folder. Task files must be suffixed with '.yaml' or piped from the standard input using '-'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetFile(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region GitAccessToken
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.GitAccessToken"/></em></p>
        ///   <p>The access token used to access the source control provider.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetGitAccessToken(this AzureAcrTaskCreateSettings toolSettings, string gitAccessToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GitAccessToken = gitAccessToken;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.GitAccessToken"/></em></p>
        ///   <p>The access token used to access the source control provider.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetGitAccessToken(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GitAccessToken = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Image"/></em></p>
        ///   <p>The name and tag of the image using the format: '-t repo/image:tag'. Multiple tags are supported by passing -t multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetImage(this AzureAcrTaskCreateSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Image"/></em></p>
        ///   <p>The name and tag of the image using the format: '-t repo/image:tag'. Multiple tags are supported by passing -t multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetImage(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region NoCache
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.NoCache"/></em></p>
        ///   <p>Indicates whether the image cache is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetNoCache(this AzureAcrTaskCreateSettings toolSettings, bool? noCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = noCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.NoCache"/></em></p>
        ///   <p>Indicates whether the image cache is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetNoCache(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskCreateSettings.NoCache"/></em></p>
        ///   <p>Indicates whether the image cache is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings EnableNoCache(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskCreateSettings.NoCache"/></em></p>
        ///   <p>Indicates whether the image cache is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings DisableNoCache(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskCreateSettings.NoCache"/></em></p>
        ///   <p>Indicates whether the image cache is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ToggleNoCache(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = !toolSettings.NoCache;
            return toolSettings;
        }
        #endregion
        #region NoPush
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetNoPush(this AzureAcrTaskCreateSettings toolSettings, bool? noPush)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = noPush;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetNoPush(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskCreateSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings EnableNoPush(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskCreateSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings DisableNoPush(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskCreateSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ToggleNoPush(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = !toolSettings.NoPush;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Platform"/></em></p>
        ///   <p>The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetPlatform(this AzureAcrTaskCreateSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Platform"/></em></p>
        ///   <p>The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetPlatform(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region PullRequestTriggerEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.PullRequestTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control pull request trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetPullRequestTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings, bool? pullRequestTriggerEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PullRequestTriggerEnabled = pullRequestTriggerEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.PullRequestTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control pull request trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetPullRequestTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PullRequestTriggerEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskCreateSettings.PullRequestTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control pull request trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings EnablePullRequestTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PullRequestTriggerEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskCreateSettings.PullRequestTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control pull request trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings DisablePullRequestTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PullRequestTriggerEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskCreateSettings.PullRequestTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control pull request trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings TogglePullRequestTriggerEnabled(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PullRequestTriggerEnabled = !toolSettings.PullRequestTriggerEnabled;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetResourceGroup(this AzureAcrTaskCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetResourceGroup(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region SecretArg
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.SecretArg"/></em></p>
        ///   <p>Secret build argument in '--secret-arg name[=value]' format. Multiples supported by passing --secret-arg multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetSecretArg(this AzureAcrTaskCreateSettings toolSettings, string secretArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretArg = secretArg;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.SecretArg"/></em></p>
        ///   <p>Secret build argument in '--secret-arg name[=value]' format. Multiples supported by passing --secret-arg multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetSecretArg(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretArg = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Set"/></em></p>
        ///   <p>Task value in '--set name[=value]' format. Multiples supported by passing --set multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetSet(this AzureAcrTaskCreateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Set"/></em></p>
        ///   <p>Task value in '--set name[=value]' format. Multiples supported by passing --set multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetSet(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region SetSecret
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.SetSecret"/></em></p>
        ///   <p>Secret task value in '--set-secret name[=value]' format. Multiples supported by passing --set-secret multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetSetSecret(this AzureAcrTaskCreateSettings toolSettings, string setSecret)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SetSecret = setSecret;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.SetSecret"/></em></p>
        ///   <p>Secret task value in '--set-secret name[=value]' format. Multiples supported by passing --set-secret multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetSetSecret(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SetSecret = null;
            return toolSettings;
        }
        #endregion
        #region SourceTriggerName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.SourceTriggerName"/></em></p>
        ///   <p>The name of the source trigger.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetSourceTriggerName(this AzureAcrTaskCreateSettings toolSettings, string sourceTriggerName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceTriggerName = sourceTriggerName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.SourceTriggerName"/></em></p>
        ///   <p>The name of the source trigger.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetSourceTriggerName(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceTriggerName = null;
            return toolSettings;
        }
        #endregion
        #region Status
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Status"/></em></p>
        ///   <p>The current status of task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetStatus(this AzureAcrTaskCreateSettings toolSettings, AcrTaskStatus status)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = status;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Status"/></em></p>
        ///   <p>The current status of task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetStatus(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = null;
            return toolSettings;
        }
        #endregion
        #region Target
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Target"/></em></p>
        ///   <p>The name of the target build stage.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetTarget(this AzureAcrTaskCreateSettings toolSettings, string target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = target;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Target"/></em></p>
        ///   <p>The name of the target build stage.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetTarget(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Timeout"/></em></p>
        ///   <p>The timeout in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetTimeout(this AzureAcrTaskCreateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Timeout"/></em></p>
        ///   <p>The timeout in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetTimeout(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region Values
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Values"/></em></p>
        ///   <p>The task values/parameters file path relative to the source context.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetValues(this AzureAcrTaskCreateSettings toolSettings, string values)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Values = values;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Values"/></em></p>
        ///   <p>The task values/parameters file path relative to the source context.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetValues(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Values = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetSubscription(this AzureAcrTaskCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetSubscription(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetDebug(this AzureAcrTaskCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetDebug(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetHelp(this AzureAcrTaskCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetHelp(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetOutput(this AzureAcrTaskCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetOutput(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetQuery(this AzureAcrTaskCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetQuery(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings SetVerbose(this AzureAcrTaskCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCreateSettings ResetVerbose(this AzureAcrTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskDeleteSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskDeleteSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings SetName(this AzureAcrTaskDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskDeleteSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings ResetName(this AzureAcrTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskDeleteSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings SetRegistry(this AzureAcrTaskDeleteSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskDeleteSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings ResetRegistry(this AzureAcrTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings SetResourceGroup(this AzureAcrTaskDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings ResetResourceGroup(this AzureAcrTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings SetSubscription(this AzureAcrTaskDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings ResetSubscription(this AzureAcrTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings SetDebug(this AzureAcrTaskDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings ResetDebug(this AzureAcrTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings SetHelp(this AzureAcrTaskDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings ResetHelp(this AzureAcrTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings SetOutput(this AzureAcrTaskDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings ResetOutput(this AzureAcrTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings SetQuery(this AzureAcrTaskDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings ResetQuery(this AzureAcrTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings SetVerbose(this AzureAcrTaskDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskDeleteSettings ResetVerbose(this AzureAcrTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskListSettingsExtensions
    {
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings SetRegistry(this AzureAcrTaskListSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings ResetRegistry(this AzureAcrTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings SetResourceGroup(this AzureAcrTaskListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings ResetResourceGroup(this AzureAcrTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings SetSubscription(this AzureAcrTaskListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings ResetSubscription(this AzureAcrTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings SetDebug(this AzureAcrTaskListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings ResetDebug(this AzureAcrTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings SetHelp(this AzureAcrTaskListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings ResetHelp(this AzureAcrTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings SetOutput(this AzureAcrTaskListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings ResetOutput(this AzureAcrTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings SetQuery(this AzureAcrTaskListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings ResetQuery(this AzureAcrTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings SetVerbose(this AzureAcrTaskListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListSettings ResetVerbose(this AzureAcrTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskListRunsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskListRunsSettingsExtensions
    {
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListRunsSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings SetRegistry(this AzureAcrTaskListRunsSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListRunsSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings ResetRegistry(this AzureAcrTaskListRunsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListRunsSettings.Image"/></em></p>
        ///   <p>The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings SetImage(this AzureAcrTaskListRunsSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListRunsSettings.Image"/></em></p>
        ///   <p>The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings ResetImage(this AzureAcrTaskListRunsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListRunsSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings SetName(this AzureAcrTaskListRunsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListRunsSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings ResetName(this AzureAcrTaskListRunsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListRunsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings SetResourceGroup(this AzureAcrTaskListRunsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListRunsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings ResetResourceGroup(this AzureAcrTaskListRunsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region RunStatus
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListRunsSettings.RunStatus"/></em></p>
        ///   <p>The current status of run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings SetRunStatus(this AzureAcrTaskListRunsSettings toolSettings, AcrTaskListRunsRunStatus runStatus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RunStatus = runStatus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListRunsSettings.RunStatus"/></em></p>
        ///   <p>The current status of run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings ResetRunStatus(this AzureAcrTaskListRunsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RunStatus = null;
            return toolSettings;
        }
        #endregion
        #region Top
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListRunsSettings.Top"/></em></p>
        ///   <p>Limit the number of latest runs in the results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings SetTop(this AzureAcrTaskListRunsSettings toolSettings, int? top)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = top;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListRunsSettings.Top"/></em></p>
        ///   <p>Limit the number of latest runs in the results.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings ResetTop(this AzureAcrTaskListRunsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListRunsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings SetSubscription(this AzureAcrTaskListRunsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListRunsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings ResetSubscription(this AzureAcrTaskListRunsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListRunsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings SetDebug(this AzureAcrTaskListRunsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListRunsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings ResetDebug(this AzureAcrTaskListRunsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListRunsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings SetHelp(this AzureAcrTaskListRunsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListRunsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings ResetHelp(this AzureAcrTaskListRunsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListRunsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings SetOutput(this AzureAcrTaskListRunsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListRunsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings ResetOutput(this AzureAcrTaskListRunsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListRunsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings SetQuery(this AzureAcrTaskListRunsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListRunsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings ResetQuery(this AzureAcrTaskListRunsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskListRunsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings SetVerbose(this AzureAcrTaskListRunsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskListRunsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskListRunsSettings ResetVerbose(this AzureAcrTaskListRunsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskLogsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskLogsSettingsExtensions
    {
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskLogsSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings SetRegistry(this AzureAcrTaskLogsSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskLogsSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings ResetRegistry(this AzureAcrTaskLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskLogsSettings.Image"/></em></p>
        ///   <p>The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings SetImage(this AzureAcrTaskLogsSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskLogsSettings.Image"/></em></p>
        ///   <p>The name of the image. May include a tag in the format 'name:tag' or digest in the format 'name@digest'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings ResetImage(this AzureAcrTaskLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskLogsSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings SetName(this AzureAcrTaskLogsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskLogsSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings ResetName(this AzureAcrTaskLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskLogsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings SetResourceGroup(this AzureAcrTaskLogsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskLogsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings ResetResourceGroup(this AzureAcrTaskLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region RunId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskLogsSettings.RunId"/></em></p>
        ///   <p>The unique run identifier.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings SetRunId(this AzureAcrTaskLogsSettings toolSettings, string runId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RunId = runId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskLogsSettings.RunId"/></em></p>
        ///   <p>The unique run identifier.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings ResetRunId(this AzureAcrTaskLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RunId = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskLogsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings SetSubscription(this AzureAcrTaskLogsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskLogsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings ResetSubscription(this AzureAcrTaskLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskLogsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings SetDebug(this AzureAcrTaskLogsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskLogsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings ResetDebug(this AzureAcrTaskLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskLogsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings SetHelp(this AzureAcrTaskLogsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskLogsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings ResetHelp(this AzureAcrTaskLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskLogsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings SetOutput(this AzureAcrTaskLogsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskLogsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings ResetOutput(this AzureAcrTaskLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskLogsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings SetQuery(this AzureAcrTaskLogsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskLogsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings ResetQuery(this AzureAcrTaskLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskLogsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings SetVerbose(this AzureAcrTaskLogsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskLogsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskLogsSettings ResetVerbose(this AzureAcrTaskLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskRunSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskRunSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetName(this AzureAcrTaskRunSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetName(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetRegistry(this AzureAcrTaskRunSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetRegistry(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region NoLogs
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetNoLogs(this AzureAcrTaskRunSettings toolSettings, bool? noLogs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = noLogs;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetNoLogs(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskRunSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings EnableNoLogs(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskRunSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings DisableNoLogs(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskRunSettings.NoLogs"/></em></p>
        ///   <p>Do not show logs after successfully queuing the build.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ToggleNoLogs(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoLogs = !toolSettings.NoLogs;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetNoWait(this AzureAcrTaskRunSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetNoWait(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskRunSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings EnableNoWait(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskRunSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings DisableNoWait(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskRunSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the run to complete and return immediately after queuing the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ToggleNoWait(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetResourceGroup(this AzureAcrTaskRunSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetResourceGroup(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.Set"/></em></p>
        ///   <p>Task value in '--set name[=value]' format. Multiples supported by passing --set multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetSet(this AzureAcrTaskRunSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.Set"/></em></p>
        ///   <p>Task value in '--set name[=value]' format. Multiples supported by passing --set multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetSet(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region SetSecret
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.SetSecret"/></em></p>
        ///   <p>Secret task value in '--set-secret name[=value]' format. Multiples supported by passing --set-secret multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetSetSecret(this AzureAcrTaskRunSettings toolSettings, string setSecret)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SetSecret = setSecret;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.SetSecret"/></em></p>
        ///   <p>Secret task value in '--set-secret name[=value]' format. Multiples supported by passing --set-secret multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetSetSecret(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SetSecret = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetSubscription(this AzureAcrTaskRunSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetSubscription(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetDebug(this AzureAcrTaskRunSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetDebug(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetHelp(this AzureAcrTaskRunSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetHelp(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetOutput(this AzureAcrTaskRunSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetOutput(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetQuery(this AzureAcrTaskRunSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetQuery(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskRunSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings SetVerbose(this AzureAcrTaskRunSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskRunSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskRunSettings ResetVerbose(this AzureAcrTaskRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskShowSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings SetName(this AzureAcrTaskShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings ResetName(this AzureAcrTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings SetRegistry(this AzureAcrTaskShowSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings ResetRegistry(this AzureAcrTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings SetResourceGroup(this AzureAcrTaskShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings ResetResourceGroup(this AzureAcrTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region WithSecureProperties
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowSettings.WithSecureProperties"/></em></p>
        ///   <p>Indicates whether the secure properties of a task should be returned.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings SetWithSecureProperties(this AzureAcrTaskShowSettings toolSettings, string withSecureProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithSecureProperties = withSecureProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowSettings.WithSecureProperties"/></em></p>
        ///   <p>Indicates whether the secure properties of a task should be returned.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings ResetWithSecureProperties(this AzureAcrTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithSecureProperties = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings SetSubscription(this AzureAcrTaskShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings ResetSubscription(this AzureAcrTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings SetDebug(this AzureAcrTaskShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings ResetDebug(this AzureAcrTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings SetHelp(this AzureAcrTaskShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings ResetHelp(this AzureAcrTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings SetOutput(this AzureAcrTaskShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings ResetOutput(this AzureAcrTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings SetQuery(this AzureAcrTaskShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings ResetQuery(this AzureAcrTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings SetVerbose(this AzureAcrTaskShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowSettings ResetVerbose(this AzureAcrTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskShowRunSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskShowRunSettingsExtensions
    {
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowRunSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings SetRegistry(this AzureAcrTaskShowRunSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowRunSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings ResetRegistry(this AzureAcrTaskShowRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region RunId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowRunSettings.RunId"/></em></p>
        ///   <p>The unique run identifier.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings SetRunId(this AzureAcrTaskShowRunSettings toolSettings, string runId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RunId = runId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowRunSettings.RunId"/></em></p>
        ///   <p>The unique run identifier.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings ResetRunId(this AzureAcrTaskShowRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RunId = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowRunSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings SetResourceGroup(this AzureAcrTaskShowRunSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowRunSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings ResetResourceGroup(this AzureAcrTaskShowRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowRunSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings SetSubscription(this AzureAcrTaskShowRunSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowRunSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings ResetSubscription(this AzureAcrTaskShowRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowRunSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings SetDebug(this AzureAcrTaskShowRunSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowRunSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings ResetDebug(this AzureAcrTaskShowRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowRunSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings SetHelp(this AzureAcrTaskShowRunSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowRunSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings ResetHelp(this AzureAcrTaskShowRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowRunSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings SetOutput(this AzureAcrTaskShowRunSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowRunSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings ResetOutput(this AzureAcrTaskShowRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowRunSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings SetQuery(this AzureAcrTaskShowRunSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowRunSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings ResetQuery(this AzureAcrTaskShowRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskShowRunSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings SetVerbose(this AzureAcrTaskShowRunSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskShowRunSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskShowRunSettings ResetVerbose(this AzureAcrTaskShowRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskUpdateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetName(this AzureAcrTaskUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetName(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetRegistry(this AzureAcrTaskUpdateSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetRegistry(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region Arg
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Arg"/></em></p>
        ///   <p>Build argument in '--arg name[=value]' format. Multiples supported by passing '--arg` multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetArg(this AzureAcrTaskUpdateSettings toolSettings, string arg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Arg = arg;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Arg"/></em></p>
        ///   <p>Build argument in '--arg name[=value]' format. Multiples supported by passing '--arg` multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetArg(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Arg = null;
            return toolSettings;
        }
        #endregion
        #region AuthMode
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.AuthMode"/></em></p>
        ///   <p>Auth mode of the source registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetAuthMode(this AzureAcrTaskUpdateSettings toolSettings, AcrAuthMode authMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = authMode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.AuthMode"/></em></p>
        ///   <p>Auth mode of the source registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetAuthMode(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthMode = null;
            return toolSettings;
        }
        #endregion
        #region BaseImageTriggerEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.BaseImageTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the base image trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetBaseImageTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings, bool? baseImageTriggerEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerEnabled = baseImageTriggerEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.BaseImageTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the base image trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetBaseImageTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskUpdateSettings.BaseImageTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the base image trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings EnableBaseImageTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskUpdateSettings.BaseImageTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the base image trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings DisableBaseImageTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskUpdateSettings.BaseImageTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the base image trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ToggleBaseImageTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerEnabled = !toolSettings.BaseImageTriggerEnabled;
            return toolSettings;
        }
        #endregion
        #region BaseImageTriggerType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.BaseImageTriggerType"/></em></p>
        ///   <p>The type of the auto trigger for base image dependency updates.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetBaseImageTriggerType(this AzureAcrTaskUpdateSettings toolSettings, AcrTaskBaseImageTriggerType baseImageTriggerType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerType = baseImageTriggerType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.BaseImageTriggerType"/></em></p>
        ///   <p>The type of the auto trigger for base image dependency updates.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetBaseImageTriggerType(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseImageTriggerType = null;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Branch"/></em></p>
        ///   <p>The source control branch name.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetBranch(this AzureAcrTaskUpdateSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Branch"/></em></p>
        ///   <p>The source control branch name.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetBranch(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region CommitTriggerEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.CommitTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control commit trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetCommitTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings, bool? commitTriggerEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CommitTriggerEnabled = commitTriggerEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.CommitTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control commit trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetCommitTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CommitTriggerEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskUpdateSettings.CommitTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control commit trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings EnableCommitTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CommitTriggerEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskUpdateSettings.CommitTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control commit trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings DisableCommitTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CommitTriggerEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskUpdateSettings.CommitTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control commit trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ToggleCommitTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CommitTriggerEnabled = !toolSettings.CommitTriggerEnabled;
            return toolSettings;
        }
        #endregion
        #region Context
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Context"/></em></p>
        ///   <p>The full URL to the source code repository (Requires '.git' suffix for a github repo). If '/dev/null' is specified, the value will be set to None and ignored.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetContext(this AzureAcrTaskUpdateSettings toolSettings, string context)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = context;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Context"/></em></p>
        ///   <p>The full URL to the source code repository (Requires '.git' suffix for a github repo). If '/dev/null' is specified, the value will be set to None and ignored.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetContext(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = null;
            return toolSettings;
        }
        #endregion
        #region Cpu
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Cpu"/></em></p>
        ///   <p>The CPU configuration in terms of number of cores required for the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetCpu(this AzureAcrTaskUpdateSettings toolSettings, string cpu)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpu = cpu;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Cpu"/></em></p>
        ///   <p>The CPU configuration in terms of number of cores required for the run.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetCpu(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpu = null;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.File"/></em></p>
        ///   <p>The relative path of the the task/docker file to the source code root folder. Task files must be suffixed with '.yaml' or piped from the standard input using '-'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetFile(this AzureAcrTaskUpdateSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.File"/></em></p>
        ///   <p>The relative path of the the task/docker file to the source code root folder. Task files must be suffixed with '.yaml' or piped from the standard input using '-'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetFile(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region GitAccessToken
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.GitAccessToken"/></em></p>
        ///   <p>The access token used to access the source control provider.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetGitAccessToken(this AzureAcrTaskUpdateSettings toolSettings, string gitAccessToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GitAccessToken = gitAccessToken;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.GitAccessToken"/></em></p>
        ///   <p>The access token used to access the source control provider.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetGitAccessToken(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GitAccessToken = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Image"/></em></p>
        ///   <p>The name and tag of the image using the format: '-t repo/image:tag'. Multiple tags are supported by passing -t multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetImage(this AzureAcrTaskUpdateSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Image"/></em></p>
        ///   <p>The name and tag of the image using the format: '-t repo/image:tag'. Multiple tags are supported by passing -t multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetImage(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region NoCache
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.NoCache"/></em></p>
        ///   <p>Indicates whether the image cache is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetNoCache(this AzureAcrTaskUpdateSettings toolSettings, bool? noCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = noCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.NoCache"/></em></p>
        ///   <p>Indicates whether the image cache is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetNoCache(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskUpdateSettings.NoCache"/></em></p>
        ///   <p>Indicates whether the image cache is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings EnableNoCache(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskUpdateSettings.NoCache"/></em></p>
        ///   <p>Indicates whether the image cache is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings DisableNoCache(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskUpdateSettings.NoCache"/></em></p>
        ///   <p>Indicates whether the image cache is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ToggleNoCache(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = !toolSettings.NoCache;
            return toolSettings;
        }
        #endregion
        #region NoPush
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetNoPush(this AzureAcrTaskUpdateSettings toolSettings, bool? noPush)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = noPush;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetNoPush(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskUpdateSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings EnableNoPush(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskUpdateSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings DisableNoPush(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskUpdateSettings.NoPush"/></em></p>
        ///   <p>Indicates whether the image built should be pushed to the registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ToggleNoPush(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPush = !toolSettings.NoPush;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Platform"/></em></p>
        ///   <p>The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetPlatform(this AzureAcrTaskUpdateSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Platform"/></em></p>
        ///   <p>The platform where build/task is run, Eg, 'windows' and 'linux'. When it's used in build commands, it also can be specified in 'os/arch/variant' format for the resulting image. Eg, linux/arm/v7. The 'arch' and 'variant' parts are optional.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetPlatform(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region PullRequestTriggerEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.PullRequestTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control pull request trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetPullRequestTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings, bool? pullRequestTriggerEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PullRequestTriggerEnabled = pullRequestTriggerEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.PullRequestTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control pull request trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetPullRequestTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PullRequestTriggerEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskUpdateSettings.PullRequestTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control pull request trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings EnablePullRequestTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PullRequestTriggerEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskUpdateSettings.PullRequestTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control pull request trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings DisablePullRequestTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PullRequestTriggerEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskUpdateSettings.PullRequestTriggerEnabled"/></em></p>
        ///   <p>Indicates whether the source control pull request trigger is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings TogglePullRequestTriggerEnabled(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PullRequestTriggerEnabled = !toolSettings.PullRequestTriggerEnabled;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetResourceGroup(this AzureAcrTaskUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetResourceGroup(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region SecretArg
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.SecretArg"/></em></p>
        ///   <p>Secret build argument in '--secret-arg name[=value]' format. Multiples supported by passing --secret-arg multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetSecretArg(this AzureAcrTaskUpdateSettings toolSettings, string secretArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretArg = secretArg;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.SecretArg"/></em></p>
        ///   <p>Secret build argument in '--secret-arg name[=value]' format. Multiples supported by passing --secret-arg multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetSecretArg(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretArg = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Set"/></em></p>
        ///   <p>Task value in '--set name[=value]' format. Multiples supported by passing --set multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetSet(this AzureAcrTaskUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Set"/></em></p>
        ///   <p>Task value in '--set name[=value]' format. Multiples supported by passing --set multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetSet(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region SetSecret
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.SetSecret"/></em></p>
        ///   <p>Secret task value in '--set-secret name[=value]' format. Multiples supported by passing --set-secret multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetSetSecret(this AzureAcrTaskUpdateSettings toolSettings, string setSecret)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SetSecret = setSecret;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.SetSecret"/></em></p>
        ///   <p>Secret task value in '--set-secret name[=value]' format. Multiples supported by passing --set-secret multiple times.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetSetSecret(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SetSecret = null;
            return toolSettings;
        }
        #endregion
        #region Status
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Status"/></em></p>
        ///   <p>The current status of task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetStatus(this AzureAcrTaskUpdateSettings toolSettings, AcrTaskStatus status)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = status;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Status"/></em></p>
        ///   <p>The current status of task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetStatus(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = null;
            return toolSettings;
        }
        #endregion
        #region Target
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Target"/></em></p>
        ///   <p>The name of the target build stage.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetTarget(this AzureAcrTaskUpdateSettings toolSettings, string target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = target;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Target"/></em></p>
        ///   <p>The name of the target build stage.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetTarget(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Timeout"/></em></p>
        ///   <p>The timeout in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetTimeout(this AzureAcrTaskUpdateSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Timeout"/></em></p>
        ///   <p>The timeout in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetTimeout(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region Values
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Values"/></em></p>
        ///   <p>The task values/parameters file path relative to the source context.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetValues(this AzureAcrTaskUpdateSettings toolSettings, string values)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Values = values;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Values"/></em></p>
        ///   <p>The task values/parameters file path relative to the source context.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetValues(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Values = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetSubscription(this AzureAcrTaskUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetSubscription(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetDebug(this AzureAcrTaskUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetDebug(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetHelp(this AzureAcrTaskUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetHelp(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetOutput(this AzureAcrTaskUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetOutput(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetQuery(this AzureAcrTaskUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetQuery(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings SetVerbose(this AzureAcrTaskUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateSettings ResetVerbose(this AzureAcrTaskUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskUpdateRunSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskUpdateRunSettingsExtensions
    {
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateRunSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings SetRegistry(this AzureAcrTaskUpdateRunSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateRunSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings ResetRegistry(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region RunId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateRunSettings.RunId"/></em></p>
        ///   <p>The unique run identifier.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings SetRunId(this AzureAcrTaskUpdateRunSettings toolSettings, string runId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RunId = runId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateRunSettings.RunId"/></em></p>
        ///   <p>The unique run identifier.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings ResetRunId(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RunId = null;
            return toolSettings;
        }
        #endregion
        #region NoArchive
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateRunSettings.NoArchive"/></em></p>
        ///   <p>Indicates whether the run should be archived.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings SetNoArchive(this AzureAcrTaskUpdateRunSettings toolSettings, bool? noArchive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoArchive = noArchive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateRunSettings.NoArchive"/></em></p>
        ///   <p>Indicates whether the run should be archived.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings ResetNoArchive(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoArchive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAcrTaskUpdateRunSettings.NoArchive"/></em></p>
        ///   <p>Indicates whether the run should be archived.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings EnableNoArchive(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoArchive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAcrTaskUpdateRunSettings.NoArchive"/></em></p>
        ///   <p>Indicates whether the run should be archived.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings DisableNoArchive(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoArchive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAcrTaskUpdateRunSettings.NoArchive"/></em></p>
        ///   <p>Indicates whether the run should be archived.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings ToggleNoArchive(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoArchive = !toolSettings.NoArchive;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateRunSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings SetResourceGroup(this AzureAcrTaskUpdateRunSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateRunSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings ResetResourceGroup(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateRunSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings SetSubscription(this AzureAcrTaskUpdateRunSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateRunSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings ResetSubscription(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateRunSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings SetDebug(this AzureAcrTaskUpdateRunSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateRunSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings ResetDebug(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateRunSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings SetHelp(this AzureAcrTaskUpdateRunSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateRunSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings ResetHelp(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateRunSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings SetOutput(this AzureAcrTaskUpdateRunSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateRunSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings ResetOutput(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateRunSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings SetQuery(this AzureAcrTaskUpdateRunSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateRunSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings ResetQuery(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskUpdateRunSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings SetVerbose(this AzureAcrTaskUpdateRunSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskUpdateRunSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskUpdateRunSettings ResetVerbose(this AzureAcrTaskUpdateRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrWebhookCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrWebhookCreateSettingsExtensions
    {
        #region Actions
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Actions"/> to a new list</em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetActions(this AzureAcrWebhookCreateSettings toolSettings, params AcrWebhookActions[] actions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ActionsInternal = actions.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Actions"/> to a new list</em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetActions(this AzureAcrWebhookCreateSettings toolSettings, IEnumerable<AcrWebhookActions> actions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ActionsInternal = actions.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAcrWebhookCreateSettings.Actions"/></em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings AddActions(this AzureAcrWebhookCreateSettings toolSettings, params AcrWebhookActions[] actions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ActionsInternal.AddRange(actions);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAcrWebhookCreateSettings.Actions"/></em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings AddActions(this AzureAcrWebhookCreateSettings toolSettings, IEnumerable<AcrWebhookActions> actions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ActionsInternal.AddRange(actions);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAcrWebhookCreateSettings.Actions"/></em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ClearActions(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ActionsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAcrWebhookCreateSettings.Actions"/></em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings RemoveActions(this AzureAcrWebhookCreateSettings toolSettings, params AcrWebhookActions[] actions)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<AcrWebhookActions>(actions);
            toolSettings.ActionsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAcrWebhookCreateSettings.Actions"/></em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings RemoveActions(this AzureAcrWebhookCreateSettings toolSettings, IEnumerable<AcrWebhookActions> actions)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<AcrWebhookActions>(actions);
            toolSettings.ActionsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetName(this AzureAcrWebhookCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetName(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetRegistry(this AzureAcrWebhookCreateSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetRegistry(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region Uri
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Uri"/></em></p>
        ///   <p>The service URI for the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetUri(this AzureAcrWebhookCreateSettings toolSettings, string uri)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Uri = uri;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Uri"/></em></p>
        ///   <p>The service URI for the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetUri(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Uri = null;
            return toolSettings;
        }
        #endregion
        #region Headers
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Headers"/> to a new list</em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetHeaders(this AzureAcrWebhookCreateSettings toolSettings, params string[] headers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HeadersInternal = headers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Headers"/> to a new list</em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetHeaders(this AzureAcrWebhookCreateSettings toolSettings, IEnumerable<string> headers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HeadersInternal = headers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAcrWebhookCreateSettings.Headers"/></em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings AddHeaders(this AzureAcrWebhookCreateSettings toolSettings, params string[] headers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HeadersInternal.AddRange(headers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAcrWebhookCreateSettings.Headers"/></em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings AddHeaders(this AzureAcrWebhookCreateSettings toolSettings, IEnumerable<string> headers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HeadersInternal.AddRange(headers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAcrWebhookCreateSettings.Headers"/></em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ClearHeaders(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HeadersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAcrWebhookCreateSettings.Headers"/></em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings RemoveHeaders(this AzureAcrWebhookCreateSettings toolSettings, params string[] headers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(headers);
            toolSettings.HeadersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAcrWebhookCreateSettings.Headers"/></em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings RemoveHeaders(this AzureAcrWebhookCreateSettings toolSettings, IEnumerable<string> headers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(headers);
            toolSettings.HeadersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Location
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetLocation(this AzureAcrWebhookCreateSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetLocation(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetResourceGroup(this AzureAcrWebhookCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetResourceGroup(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Scope
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Scope"/></em></p>
        ///   <p>The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means events for all repositories.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetScope(this AzureAcrWebhookCreateSettings toolSettings, string scope)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Scope = scope;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Scope"/></em></p>
        ///   <p>The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means events for all repositories.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetScope(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Scope = null;
            return toolSettings;
        }
        #endregion
        #region Status
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Status"/></em></p>
        ///   <p>Indicates whether the webhook is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetStatus(this AzureAcrWebhookCreateSettings toolSettings, AcrTaskStatus status)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = status;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Status"/></em></p>
        ///   <p>Indicates whether the webhook is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetStatus(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetTags(this AzureAcrWebhookCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetTags(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetSubscription(this AzureAcrWebhookCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetSubscription(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetDebug(this AzureAcrWebhookCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetDebug(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetHelp(this AzureAcrWebhookCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetHelp(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetOutput(this AzureAcrWebhookCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetOutput(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetQuery(this AzureAcrWebhookCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetQuery(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings SetVerbose(this AzureAcrWebhookCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookCreateSettings ResetVerbose(this AzureAcrWebhookCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrWebhookDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrWebhookDeleteSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookDeleteSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings SetName(this AzureAcrWebhookDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookDeleteSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings ResetName(this AzureAcrWebhookDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookDeleteSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings SetRegistry(this AzureAcrWebhookDeleteSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookDeleteSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings ResetRegistry(this AzureAcrWebhookDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings SetResourceGroup(this AzureAcrWebhookDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings ResetResourceGroup(this AzureAcrWebhookDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings SetSubscription(this AzureAcrWebhookDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings ResetSubscription(this AzureAcrWebhookDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings SetDebug(this AzureAcrWebhookDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings ResetDebug(this AzureAcrWebhookDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings SetHelp(this AzureAcrWebhookDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings ResetHelp(this AzureAcrWebhookDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings SetOutput(this AzureAcrWebhookDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings ResetOutput(this AzureAcrWebhookDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings SetQuery(this AzureAcrWebhookDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings ResetQuery(this AzureAcrWebhookDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings SetVerbose(this AzureAcrWebhookDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookDeleteSettings ResetVerbose(this AzureAcrWebhookDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrWebhookGetConfigSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrWebhookGetConfigSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookGetConfigSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings SetName(this AzureAcrWebhookGetConfigSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookGetConfigSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings ResetName(this AzureAcrWebhookGetConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookGetConfigSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings SetRegistry(this AzureAcrWebhookGetConfigSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookGetConfigSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings ResetRegistry(this AzureAcrWebhookGetConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookGetConfigSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings SetResourceGroup(this AzureAcrWebhookGetConfigSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookGetConfigSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings ResetResourceGroup(this AzureAcrWebhookGetConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookGetConfigSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings SetSubscription(this AzureAcrWebhookGetConfigSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookGetConfigSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings ResetSubscription(this AzureAcrWebhookGetConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookGetConfigSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings SetDebug(this AzureAcrWebhookGetConfigSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookGetConfigSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings ResetDebug(this AzureAcrWebhookGetConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookGetConfigSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings SetHelp(this AzureAcrWebhookGetConfigSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookGetConfigSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings ResetHelp(this AzureAcrWebhookGetConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookGetConfigSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings SetOutput(this AzureAcrWebhookGetConfigSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookGetConfigSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings ResetOutput(this AzureAcrWebhookGetConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookGetConfigSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings SetQuery(this AzureAcrWebhookGetConfigSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookGetConfigSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings ResetQuery(this AzureAcrWebhookGetConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookGetConfigSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings SetVerbose(this AzureAcrWebhookGetConfigSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookGetConfigSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookGetConfigSettings ResetVerbose(this AzureAcrWebhookGetConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrWebhookListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrWebhookListSettingsExtensions
    {
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings SetRegistry(this AzureAcrWebhookListSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings ResetRegistry(this AzureAcrWebhookListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings SetResourceGroup(this AzureAcrWebhookListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings ResetResourceGroup(this AzureAcrWebhookListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings SetSubscription(this AzureAcrWebhookListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings ResetSubscription(this AzureAcrWebhookListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings SetDebug(this AzureAcrWebhookListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings ResetDebug(this AzureAcrWebhookListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings SetHelp(this AzureAcrWebhookListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings ResetHelp(this AzureAcrWebhookListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings SetOutput(this AzureAcrWebhookListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings ResetOutput(this AzureAcrWebhookListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings SetQuery(this AzureAcrWebhookListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings ResetQuery(this AzureAcrWebhookListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings SetVerbose(this AzureAcrWebhookListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListSettings ResetVerbose(this AzureAcrWebhookListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrWebhookListEventsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrWebhookListEventsSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListEventsSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings SetName(this AzureAcrWebhookListEventsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListEventsSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings ResetName(this AzureAcrWebhookListEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListEventsSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings SetRegistry(this AzureAcrWebhookListEventsSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListEventsSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings ResetRegistry(this AzureAcrWebhookListEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListEventsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings SetResourceGroup(this AzureAcrWebhookListEventsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListEventsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings ResetResourceGroup(this AzureAcrWebhookListEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListEventsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings SetSubscription(this AzureAcrWebhookListEventsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListEventsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings ResetSubscription(this AzureAcrWebhookListEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListEventsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings SetDebug(this AzureAcrWebhookListEventsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListEventsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings ResetDebug(this AzureAcrWebhookListEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListEventsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings SetHelp(this AzureAcrWebhookListEventsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListEventsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings ResetHelp(this AzureAcrWebhookListEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListEventsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings SetOutput(this AzureAcrWebhookListEventsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListEventsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings ResetOutput(this AzureAcrWebhookListEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListEventsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings SetQuery(this AzureAcrWebhookListEventsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListEventsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings ResetQuery(this AzureAcrWebhookListEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookListEventsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings SetVerbose(this AzureAcrWebhookListEventsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookListEventsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookListEventsSettings ResetVerbose(this AzureAcrWebhookListEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrWebhookPingSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrWebhookPingSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookPingSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings SetName(this AzureAcrWebhookPingSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookPingSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings ResetName(this AzureAcrWebhookPingSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookPingSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings SetRegistry(this AzureAcrWebhookPingSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookPingSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings ResetRegistry(this AzureAcrWebhookPingSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookPingSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings SetResourceGroup(this AzureAcrWebhookPingSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookPingSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings ResetResourceGroup(this AzureAcrWebhookPingSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookPingSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings SetSubscription(this AzureAcrWebhookPingSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookPingSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings ResetSubscription(this AzureAcrWebhookPingSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookPingSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings SetDebug(this AzureAcrWebhookPingSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookPingSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings ResetDebug(this AzureAcrWebhookPingSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookPingSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings SetHelp(this AzureAcrWebhookPingSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookPingSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings ResetHelp(this AzureAcrWebhookPingSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookPingSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings SetOutput(this AzureAcrWebhookPingSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookPingSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings ResetOutput(this AzureAcrWebhookPingSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookPingSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings SetQuery(this AzureAcrWebhookPingSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookPingSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings ResetQuery(this AzureAcrWebhookPingSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookPingSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings SetVerbose(this AzureAcrWebhookPingSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookPingSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookPingSettings ResetVerbose(this AzureAcrWebhookPingSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrWebhookShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrWebhookShowSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookShowSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings SetName(this AzureAcrWebhookShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookShowSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings ResetName(this AzureAcrWebhookShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookShowSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings SetRegistry(this AzureAcrWebhookShowSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookShowSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings ResetRegistry(this AzureAcrWebhookShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings SetResourceGroup(this AzureAcrWebhookShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings ResetResourceGroup(this AzureAcrWebhookShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings SetSubscription(this AzureAcrWebhookShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings ResetSubscription(this AzureAcrWebhookShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings SetDebug(this AzureAcrWebhookShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings ResetDebug(this AzureAcrWebhookShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings SetHelp(this AzureAcrWebhookShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings ResetHelp(this AzureAcrWebhookShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings SetOutput(this AzureAcrWebhookShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings ResetOutput(this AzureAcrWebhookShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings SetQuery(this AzureAcrWebhookShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings ResetQuery(this AzureAcrWebhookShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings SetVerbose(this AzureAcrWebhookShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookShowSettings ResetVerbose(this AzureAcrWebhookShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrWebhookUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrWebhookUpdateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetName(this AzureAcrWebhookUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Name"/></em></p>
        ///   <p>The name of the webhook.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetName(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetRegistry(this AzureAcrWebhookUpdateSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetRegistry(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region Actions
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Actions"/> to a new list</em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetActions(this AzureAcrWebhookUpdateSettings toolSettings, params AcrWebhookActions[] actions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ActionsInternal = actions.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Actions"/> to a new list</em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetActions(this AzureAcrWebhookUpdateSettings toolSettings, IEnumerable<AcrWebhookActions> actions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ActionsInternal = actions.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAcrWebhookUpdateSettings.Actions"/></em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings AddActions(this AzureAcrWebhookUpdateSettings toolSettings, params AcrWebhookActions[] actions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ActionsInternal.AddRange(actions);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAcrWebhookUpdateSettings.Actions"/></em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings AddActions(this AzureAcrWebhookUpdateSettings toolSettings, IEnumerable<AcrWebhookActions> actions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ActionsInternal.AddRange(actions);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAcrWebhookUpdateSettings.Actions"/></em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ClearActions(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ActionsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAcrWebhookUpdateSettings.Actions"/></em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings RemoveActions(this AzureAcrWebhookUpdateSettings toolSettings, params AcrWebhookActions[] actions)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<AcrWebhookActions>(actions);
            toolSettings.ActionsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAcrWebhookUpdateSettings.Actions"/></em></p>
        ///   <p>Space-separated list of actions that trigger the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings RemoveActions(this AzureAcrWebhookUpdateSettings toolSettings, IEnumerable<AcrWebhookActions> actions)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<AcrWebhookActions>(actions);
            toolSettings.ActionsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Headers
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Headers"/> to a new list</em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetHeaders(this AzureAcrWebhookUpdateSettings toolSettings, params string[] headers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HeadersInternal = headers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Headers"/> to a new list</em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetHeaders(this AzureAcrWebhookUpdateSettings toolSettings, IEnumerable<string> headers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HeadersInternal = headers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAcrWebhookUpdateSettings.Headers"/></em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings AddHeaders(this AzureAcrWebhookUpdateSettings toolSettings, params string[] headers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HeadersInternal.AddRange(headers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAcrWebhookUpdateSettings.Headers"/></em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings AddHeaders(this AzureAcrWebhookUpdateSettings toolSettings, IEnumerable<string> headers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HeadersInternal.AddRange(headers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAcrWebhookUpdateSettings.Headers"/></em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ClearHeaders(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HeadersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAcrWebhookUpdateSettings.Headers"/></em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings RemoveHeaders(this AzureAcrWebhookUpdateSettings toolSettings, params string[] headers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(headers);
            toolSettings.HeadersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAcrWebhookUpdateSettings.Headers"/></em></p>
        ///   <p>Space-separated custom headers in 'key[=value]' format that will be added to the webhook notifications. Use "" to clear existing headers.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings RemoveHeaders(this AzureAcrWebhookUpdateSettings toolSettings, IEnumerable<string> headers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(headers);
            toolSettings.HeadersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetResourceGroup(this AzureAcrWebhookUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetResourceGroup(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Scope
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Scope"/></em></p>
        ///   <p>The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means events for all repositories.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetScope(this AzureAcrWebhookUpdateSettings toolSettings, string scope)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Scope = scope;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Scope"/></em></p>
        ///   <p>The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means events for all repositories.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetScope(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Scope = null;
            return toolSettings;
        }
        #endregion
        #region Status
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Status"/></em></p>
        ///   <p>Indicates whether the webhook is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetStatus(this AzureAcrWebhookUpdateSettings toolSettings, AcrTaskStatus status)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = status;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Status"/></em></p>
        ///   <p>Indicates whether the webhook is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetStatus(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetTags(this AzureAcrWebhookUpdateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetTags(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Uri
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Uri"/></em></p>
        ///   <p>The service URI for the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetUri(this AzureAcrWebhookUpdateSettings toolSettings, string uri)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Uri = uri;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Uri"/></em></p>
        ///   <p>The service URI for the webhook to post notifications.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetUri(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Uri = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetAdd(this AzureAcrWebhookUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetAdd(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetForceString(this AzureAcrWebhookUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetForceString(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetRemove(this AzureAcrWebhookUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetRemove(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetSet(this AzureAcrWebhookUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetSet(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetSubscription(this AzureAcrWebhookUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetSubscription(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetDebug(this AzureAcrWebhookUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetDebug(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetHelp(this AzureAcrWebhookUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetHelp(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetOutput(this AzureAcrWebhookUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetOutput(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetQuery(this AzureAcrWebhookUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetQuery(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrWebhookUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings SetVerbose(this AzureAcrWebhookUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrWebhookUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrWebhookUpdateSettings ResetVerbose(this AzureAcrWebhookUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrConfigContentTrustShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrConfigContentTrustShowSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustShowSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings SetName(this AzureAcrConfigContentTrustShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustShowSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings ResetName(this AzureAcrConfigContentTrustShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings SetResourceGroup(this AzureAcrConfigContentTrustShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings ResetResourceGroup(this AzureAcrConfigContentTrustShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings SetSubscription(this AzureAcrConfigContentTrustShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings ResetSubscription(this AzureAcrConfigContentTrustShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings SetDebug(this AzureAcrConfigContentTrustShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings ResetDebug(this AzureAcrConfigContentTrustShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings SetHelp(this AzureAcrConfigContentTrustShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings ResetHelp(this AzureAcrConfigContentTrustShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings SetOutput(this AzureAcrConfigContentTrustShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings ResetOutput(this AzureAcrConfigContentTrustShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings SetQuery(this AzureAcrConfigContentTrustShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings ResetQuery(this AzureAcrConfigContentTrustShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings SetVerbose(this AzureAcrConfigContentTrustShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustShowSettings ResetVerbose(this AzureAcrConfigContentTrustShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrConfigContentTrustUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrConfigContentTrustUpdateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustUpdateSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings SetName(this AzureAcrConfigContentTrustUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustUpdateSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings ResetName(this AzureAcrConfigContentTrustUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings SetResourceGroup(this AzureAcrConfigContentTrustUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings ResetResourceGroup(this AzureAcrConfigContentTrustUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Status
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustUpdateSettings.Status"/></em></p>
        ///   <p>Indicates whether content-trust is enabled or disabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings SetStatus(this AzureAcrConfigContentTrustUpdateSettings toolSettings, AcrTaskStatus status)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = status;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustUpdateSettings.Status"/></em></p>
        ///   <p>Indicates whether content-trust is enabled or disabled.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings ResetStatus(this AzureAcrConfigContentTrustUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings SetSubscription(this AzureAcrConfigContentTrustUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings ResetSubscription(this AzureAcrConfigContentTrustUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings SetDebug(this AzureAcrConfigContentTrustUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings ResetDebug(this AzureAcrConfigContentTrustUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings SetHelp(this AzureAcrConfigContentTrustUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings ResetHelp(this AzureAcrConfigContentTrustUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings SetOutput(this AzureAcrConfigContentTrustUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings ResetOutput(this AzureAcrConfigContentTrustUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings SetQuery(this AzureAcrConfigContentTrustUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings ResetQuery(this AzureAcrConfigContentTrustUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrConfigContentTrustUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings SetVerbose(this AzureAcrConfigContentTrustUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrConfigContentTrustUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrConfigContentTrustUpdateSettings ResetVerbose(this AzureAcrConfigContentTrustUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrHelmRepoAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrHelmRepoAddSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmRepoAddSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings SetName(this AzureAcrHelmRepoAddSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmRepoAddSettings.Name"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings ResetName(this AzureAcrHelmRepoAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmRepoAddSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings SetPassword(this AzureAcrHelmRepoAddSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmRepoAddSettings.Password"/></em></p>
        ///   <p>The password used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings ResetPassword(this AzureAcrHelmRepoAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmRepoAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings SetResourceGroup(this AzureAcrHelmRepoAddSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmRepoAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings ResetResourceGroup(this AzureAcrHelmRepoAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Suffix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmRepoAddSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings SetSuffix(this AzureAcrHelmRepoAddSettings toolSettings, string suffix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = suffix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmRepoAddSettings.Suffix"/></em></p>
        ///   <p>The tenant suffix in registry login server. You may specify '--suffix tenant' if your registry login server is in the format 'registry-tenant.azurecr.io'. Applicable if you're accessing the registry from a different subscription or you have permission to access images but not the permission to manage the registry resource.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings ResetSuffix(this AzureAcrHelmRepoAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Suffix = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmRepoAddSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings SetUsername(this AzureAcrHelmRepoAddSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmRepoAddSettings.Username"/></em></p>
        ///   <p>The username used to log into a container registry.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings ResetUsername(this AzureAcrHelmRepoAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmRepoAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings SetSubscription(this AzureAcrHelmRepoAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmRepoAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings ResetSubscription(this AzureAcrHelmRepoAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmRepoAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings SetDebug(this AzureAcrHelmRepoAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmRepoAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings ResetDebug(this AzureAcrHelmRepoAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmRepoAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings SetHelp(this AzureAcrHelmRepoAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmRepoAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings ResetHelp(this AzureAcrHelmRepoAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmRepoAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings SetOutput(this AzureAcrHelmRepoAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmRepoAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings ResetOutput(this AzureAcrHelmRepoAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmRepoAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings SetQuery(this AzureAcrHelmRepoAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmRepoAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings ResetQuery(this AzureAcrHelmRepoAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrHelmRepoAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings SetVerbose(this AzureAcrHelmRepoAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrHelmRepoAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrHelmRepoAddSettings ResetVerbose(this AzureAcrHelmRepoAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskCredentialAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskCredentialAddSettingsExtensions
    {
        #region LoginServer
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.LoginServer"/></em></p>
        ///   <p>The login server of the custom registry. For instance, 'myregistry.azurecr.io'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetLoginServer(this AzureAcrTaskCredentialAddSettings toolSettings, string loginServer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LoginServer = loginServer;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.LoginServer"/></em></p>
        ///   <p>The login server of the custom registry. For instance, 'myregistry.azurecr.io'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetLoginServer(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LoginServer = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetName(this AzureAcrTaskCredentialAddSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetName(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetRegistry(this AzureAcrTaskCredentialAddSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetRegistry(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.Password"/></em></p>
        ///   <p>The password to login to the custom registry. This can be plain text or a key vault secret URI.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetPassword(this AzureAcrTaskCredentialAddSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.Password"/></em></p>
        ///   <p>The password to login to the custom registry. This can be plain text or a key vault secret URI.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetPassword(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetResourceGroup(this AzureAcrTaskCredentialAddSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetResourceGroup(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region UseIdentity
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.UseIdentity"/></em></p>
        ///   <p>The task managed identity used for the credential. Use '[system]' to refer to the system-assigned identity or a client id to refer to a user-assigned identity.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetUseIdentity(this AzureAcrTaskCredentialAddSettings toolSettings, string useIdentity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseIdentity = useIdentity;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.UseIdentity"/></em></p>
        ///   <p>The task managed identity used for the credential. Use '[system]' to refer to the system-assigned identity or a client id to refer to a user-assigned identity.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetUseIdentity(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseIdentity = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.Username"/></em></p>
        ///   <p>The username to login to the custom registry. This can be plain text or a key vault secret URI.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetUsername(this AzureAcrTaskCredentialAddSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.Username"/></em></p>
        ///   <p>The username to login to the custom registry. This can be plain text or a key vault secret URI.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetUsername(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetSubscription(this AzureAcrTaskCredentialAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetSubscription(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetDebug(this AzureAcrTaskCredentialAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetDebug(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetHelp(this AzureAcrTaskCredentialAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetHelp(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetOutput(this AzureAcrTaskCredentialAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetOutput(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetQuery(this AzureAcrTaskCredentialAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetQuery(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings SetVerbose(this AzureAcrTaskCredentialAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialAddSettings ResetVerbose(this AzureAcrTaskCredentialAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskCredentialListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskCredentialListSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialListSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings SetName(this AzureAcrTaskCredentialListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialListSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings ResetName(this AzureAcrTaskCredentialListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialListSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings SetRegistry(this AzureAcrTaskCredentialListSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialListSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings ResetRegistry(this AzureAcrTaskCredentialListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings SetResourceGroup(this AzureAcrTaskCredentialListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings ResetResourceGroup(this AzureAcrTaskCredentialListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings SetSubscription(this AzureAcrTaskCredentialListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings ResetSubscription(this AzureAcrTaskCredentialListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings SetDebug(this AzureAcrTaskCredentialListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings ResetDebug(this AzureAcrTaskCredentialListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings SetHelp(this AzureAcrTaskCredentialListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings ResetHelp(this AzureAcrTaskCredentialListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings SetOutput(this AzureAcrTaskCredentialListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings ResetOutput(this AzureAcrTaskCredentialListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings SetQuery(this AzureAcrTaskCredentialListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings ResetQuery(this AzureAcrTaskCredentialListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings SetVerbose(this AzureAcrTaskCredentialListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialListSettings ResetVerbose(this AzureAcrTaskCredentialListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskCredentialRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskCredentialRemoveSettingsExtensions
    {
        #region LoginServer
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialRemoveSettings.LoginServer"/></em></p>
        ///   <p>The login server of the custom registry. For instance, 'myregistry.azurecr.io'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings SetLoginServer(this AzureAcrTaskCredentialRemoveSettings toolSettings, string loginServer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LoginServer = loginServer;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialRemoveSettings.LoginServer"/></em></p>
        ///   <p>The login server of the custom registry. For instance, 'myregistry.azurecr.io'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings ResetLoginServer(this AzureAcrTaskCredentialRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LoginServer = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialRemoveSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings SetName(this AzureAcrTaskCredentialRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialRemoveSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings ResetName(this AzureAcrTaskCredentialRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialRemoveSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings SetRegistry(this AzureAcrTaskCredentialRemoveSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialRemoveSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings ResetRegistry(this AzureAcrTaskCredentialRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings SetResourceGroup(this AzureAcrTaskCredentialRemoveSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings ResetResourceGroup(this AzureAcrTaskCredentialRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings SetSubscription(this AzureAcrTaskCredentialRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings ResetSubscription(this AzureAcrTaskCredentialRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings SetDebug(this AzureAcrTaskCredentialRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings ResetDebug(this AzureAcrTaskCredentialRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings SetHelp(this AzureAcrTaskCredentialRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings ResetHelp(this AzureAcrTaskCredentialRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings SetOutput(this AzureAcrTaskCredentialRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings ResetOutput(this AzureAcrTaskCredentialRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings SetQuery(this AzureAcrTaskCredentialRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings ResetQuery(this AzureAcrTaskCredentialRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings SetVerbose(this AzureAcrTaskCredentialRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialRemoveSettings ResetVerbose(this AzureAcrTaskCredentialRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskCredentialUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskCredentialUpdateSettingsExtensions
    {
        #region LoginServer
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.LoginServer"/></em></p>
        ///   <p>The login server of the custom registry. For instance, 'myregistry.azurecr.io'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetLoginServer(this AzureAcrTaskCredentialUpdateSettings toolSettings, string loginServer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LoginServer = loginServer;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.LoginServer"/></em></p>
        ///   <p>The login server of the custom registry. For instance, 'myregistry.azurecr.io'.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetLoginServer(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LoginServer = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetName(this AzureAcrTaskCredentialUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetName(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetRegistry(this AzureAcrTaskCredentialUpdateSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetRegistry(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.Password"/></em></p>
        ///   <p>The password to login to the custom registry. This can be plain text or a key vault secret URI.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetPassword(this AzureAcrTaskCredentialUpdateSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.Password"/></em></p>
        ///   <p>The password to login to the custom registry. This can be plain text or a key vault secret URI.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetPassword(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetResourceGroup(this AzureAcrTaskCredentialUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetResourceGroup(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region UseIdentity
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.UseIdentity"/></em></p>
        ///   <p>The task managed identity used for the credential. Use '[system]' to refer to the system-assigned identity or a client id to refer to a user-assigned identity.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetUseIdentity(this AzureAcrTaskCredentialUpdateSettings toolSettings, string useIdentity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseIdentity = useIdentity;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.UseIdentity"/></em></p>
        ///   <p>The task managed identity used for the credential. Use '[system]' to refer to the system-assigned identity or a client id to refer to a user-assigned identity.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetUseIdentity(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseIdentity = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.Username"/></em></p>
        ///   <p>The username to login to the custom registry. This can be plain text or a key vault secret URI.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetUsername(this AzureAcrTaskCredentialUpdateSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.Username"/></em></p>
        ///   <p>The username to login to the custom registry. This can be plain text or a key vault secret URI.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetUsername(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetSubscription(this AzureAcrTaskCredentialUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetSubscription(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetDebug(this AzureAcrTaskCredentialUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetDebug(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetHelp(this AzureAcrTaskCredentialUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetHelp(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetOutput(this AzureAcrTaskCredentialUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetOutput(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetQuery(this AzureAcrTaskCredentialUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetQuery(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskCredentialUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings SetVerbose(this AzureAcrTaskCredentialUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskCredentialUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskCredentialUpdateSettings ResetVerbose(this AzureAcrTaskCredentialUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskIdentityAssignSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskIdentityAssignSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityAssignSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings SetName(this AzureAcrTaskIdentityAssignSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityAssignSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings ResetName(this AzureAcrTaskIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityAssignSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings SetRegistry(this AzureAcrTaskIdentityAssignSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityAssignSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings ResetRegistry(this AzureAcrTaskIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region Identities
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityAssignSettings.Identities"/></em></p>
        ///   <p>Assigns managed identities to the task. Use '[system]' to refer to the system-assigned identity or a resource ID to refer to a user-assigned identity.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings SetIdentities(this AzureAcrTaskIdentityAssignSettings toolSettings, string identities)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Identities = identities;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityAssignSettings.Identities"/></em></p>
        ///   <p>Assigns managed identities to the task. Use '[system]' to refer to the system-assigned identity or a resource ID to refer to a user-assigned identity.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings ResetIdentities(this AzureAcrTaskIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Identities = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityAssignSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings SetResourceGroup(this AzureAcrTaskIdentityAssignSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityAssignSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings ResetResourceGroup(this AzureAcrTaskIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityAssignSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings SetSubscription(this AzureAcrTaskIdentityAssignSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityAssignSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings ResetSubscription(this AzureAcrTaskIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityAssignSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings SetDebug(this AzureAcrTaskIdentityAssignSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityAssignSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings ResetDebug(this AzureAcrTaskIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityAssignSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings SetHelp(this AzureAcrTaskIdentityAssignSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityAssignSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings ResetHelp(this AzureAcrTaskIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityAssignSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings SetOutput(this AzureAcrTaskIdentityAssignSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityAssignSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings ResetOutput(this AzureAcrTaskIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityAssignSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings SetQuery(this AzureAcrTaskIdentityAssignSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityAssignSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings ResetQuery(this AzureAcrTaskIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityAssignSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings SetVerbose(this AzureAcrTaskIdentityAssignSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityAssignSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityAssignSettings ResetVerbose(this AzureAcrTaskIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskIdentityRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskIdentityRemoveSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityRemoveSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings SetName(this AzureAcrTaskIdentityRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityRemoveSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings ResetName(this AzureAcrTaskIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityRemoveSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings SetRegistry(this AzureAcrTaskIdentityRemoveSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityRemoveSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings ResetRegistry(this AzureAcrTaskIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region Identities
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityRemoveSettings.Identities"/></em></p>
        ///   <p>Assigns managed identities to the task. Use '[system]' to refer to the system-assigned identity or a resource ID to refer to a user-assigned identity.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings SetIdentities(this AzureAcrTaskIdentityRemoveSettings toolSettings, string identities)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Identities = identities;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityRemoveSettings.Identities"/></em></p>
        ///   <p>Assigns managed identities to the task. Use '[system]' to refer to the system-assigned identity or a resource ID to refer to a user-assigned identity.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings ResetIdentities(this AzureAcrTaskIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Identities = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings SetResourceGroup(this AzureAcrTaskIdentityRemoveSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings ResetResourceGroup(this AzureAcrTaskIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings SetSubscription(this AzureAcrTaskIdentityRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings ResetSubscription(this AzureAcrTaskIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings SetDebug(this AzureAcrTaskIdentityRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings ResetDebug(this AzureAcrTaskIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings SetHelp(this AzureAcrTaskIdentityRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings ResetHelp(this AzureAcrTaskIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings SetOutput(this AzureAcrTaskIdentityRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings ResetOutput(this AzureAcrTaskIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings SetQuery(this AzureAcrTaskIdentityRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings ResetQuery(this AzureAcrTaskIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings SetVerbose(this AzureAcrTaskIdentityRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityRemoveSettings ResetVerbose(this AzureAcrTaskIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAcrTaskIdentityShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAcrTaskIdentityShowSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityShowSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings SetName(this AzureAcrTaskIdentityShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityShowSettings.Name"/></em></p>
        ///   <p>The name of the task.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings ResetName(this AzureAcrTaskIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Registry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityShowSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings SetRegistry(this AzureAcrTaskIdentityShowSettings toolSettings, string registry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = registry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityShowSettings.Registry"/></em></p>
        ///   <p>The name of the container registry. You can configure the default registry name using `az configure --defaults acr=&amp;lt;registry name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings ResetRegistry(this AzureAcrTaskIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Registry = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings SetResourceGroup(this AzureAcrTaskIdentityShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings ResetResourceGroup(this AzureAcrTaskIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings SetSubscription(this AzureAcrTaskIdentityShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings ResetSubscription(this AzureAcrTaskIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings SetDebug(this AzureAcrTaskIdentityShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings ResetDebug(this AzureAcrTaskIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings SetHelp(this AzureAcrTaskIdentityShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings ResetHelp(this AzureAcrTaskIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings SetOutput(this AzureAcrTaskIdentityShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings ResetOutput(this AzureAcrTaskIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings SetQuery(this AzureAcrTaskIdentityShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings ResetQuery(this AzureAcrTaskIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAcrTaskIdentityShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings SetVerbose(this AzureAcrTaskIdentityShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAcrTaskIdentityShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAcrTaskIdentityShowSettings ResetVerbose(this AzureAcrTaskIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AcrAuthMode
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AcrAuthMode>))]
    public partial class AcrAuthMode : Enumeration
    {
        public static AcrAuthMode default_ = new AcrAuthMode { Value = "default" };
        public static AcrAuthMode none = new AcrAuthMode { Value = "none" };
    }
    #endregion
    #region AcrSku
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AcrSku>))]
    public partial class AcrSku : Enumeration
    {
        public static AcrSku basic = new AcrSku { Value = "basic" };
        public static AcrSku classic = new AcrSku { Value = "classic" };
        public static AcrSku premium = new AcrSku { Value = "premium" };
        public static AcrSku standard = new AcrSku { Value = "standard" };
    }
    #endregion
    #region AcrDefaultAction
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AcrDefaultAction>))]
    public partial class AcrDefaultAction : Enumeration
    {
        public static AcrDefaultAction allow = new AcrDefaultAction { Value = "allow" };
        public static AcrDefaultAction deny = new AcrDefaultAction { Value = "deny" };
    }
    #endregion
    #region AcrCredentialRenewPasswordName
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AcrCredentialRenewPasswordName>))]
    public partial class AcrCredentialRenewPasswordName : Enumeration
    {
        public static AcrCredentialRenewPasswordName password = new AcrCredentialRenewPasswordName { Value = "password" };
        public static AcrCredentialRenewPasswordName password2 = new AcrCredentialRenewPasswordName { Value = "password2" };
    }
    #endregion
    #region AcrRepositoryOrderby
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AcrRepositoryOrderby>))]
    public partial class AcrRepositoryOrderby : Enumeration
    {
        public static AcrRepositoryOrderby time_asc = new AcrRepositoryOrderby { Value = "time_asc" };
        public static AcrRepositoryOrderby time_desc = new AcrRepositoryOrderby { Value = "time_desc" };
    }
    #endregion
    #region AcrTaskBaseImageTriggerType
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AcrTaskBaseImageTriggerType>))]
    public partial class AcrTaskBaseImageTriggerType : Enumeration
    {
        public static AcrTaskBaseImageTriggerType all = new AcrTaskBaseImageTriggerType { Value = "all" };
        public static AcrTaskBaseImageTriggerType runtime = new AcrTaskBaseImageTriggerType { Value = "runtime" };
    }
    #endregion
    #region AcrTaskStatus
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AcrTaskStatus>))]
    public partial class AcrTaskStatus : Enumeration
    {
        public static AcrTaskStatus disabled = new AcrTaskStatus { Value = "disabled" };
        public static AcrTaskStatus enabled = new AcrTaskStatus { Value = "enabled" };
    }
    #endregion
    #region AcrTaskListRunsRunStatus
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AcrTaskListRunsRunStatus>))]
    public partial class AcrTaskListRunsRunStatus : Enumeration
    {
        public static AcrTaskListRunsRunStatus canceled = new AcrTaskListRunsRunStatus { Value = "canceled" };
        public static AcrTaskListRunsRunStatus error = new AcrTaskListRunsRunStatus { Value = "error" };
        public static AcrTaskListRunsRunStatus failed = new AcrTaskListRunsRunStatus { Value = "failed" };
        public static AcrTaskListRunsRunStatus queued = new AcrTaskListRunsRunStatus { Value = "queued" };
        public static AcrTaskListRunsRunStatus running = new AcrTaskListRunsRunStatus { Value = "running" };
        public static AcrTaskListRunsRunStatus started = new AcrTaskListRunsRunStatus { Value = "started" };
        public static AcrTaskListRunsRunStatus succeeded = new AcrTaskListRunsRunStatus { Value = "succeeded" };
        public static AcrTaskListRunsRunStatus timeout = new AcrTaskListRunsRunStatus { Value = "timeout" };
    }
    #endregion
    #region AcrWebhookActions
    /// <summary>
    ///   Used within <see cref="AzureAcrTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AcrWebhookActions>))]
    public partial class AcrWebhookActions : Enumeration
    {
        public static AcrWebhookActions chart_delete = new AcrWebhookActions { Value = "chart_delete" };
        public static AcrWebhookActions chart_push = new AcrWebhookActions { Value = "chart_push" };
        public static AcrWebhookActions delete = new AcrWebhookActions { Value = "delete" };
        public static AcrWebhookActions push = new AcrWebhookActions { Value = "push" };
        public static AcrWebhookActions quarantine = new AcrWebhookActions { Value = "quarantine" };
    }
    #endregion
}
